"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cropBase64Image = cropBase64Image;
exports.base64ToImage = base64ToImage;
exports.imageToBase64 = imageToBase64;
exports.cropImage = cropImage;
exports.getImagesMatches = getImagesMatches;
exports.getImagesSimilarity = getImagesSimilarity;
exports.getImageOccurrence = getImageOccurrence;
exports.getJimpImage = getJimpImage;
exports.MIME_BMP = exports.MIME_PNG = exports.MIME_JPEG = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _jimp = _interopRequireDefault(require("jimp"));

var _buffer = require("buffer");

var _pngjs = require("pngjs");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _util = require("./util");

const MIME_JPEG = _jimp.default.MIME_JPEG,
      MIME_PNG = _jimp.default.MIME_PNG,
      MIME_BMP = _jimp.default.MIME_BMP;
exports.MIME_BMP = MIME_BMP;
exports.MIME_PNG = MIME_PNG;
exports.MIME_JPEG = MIME_JPEG;
let cv = null;
const BYTES_IN_PIXEL_BLOCK = 4;
const SCANLINE_FILTER_METHOD = 4;
const DEFAULT_MATCH_THRESHOLD = 0.5;
const AVAILABLE_DETECTORS = ['AKAZE', 'AGAST', 'BRISK', 'FAST', 'GFTT', 'KAZE', 'MSER', 'SIFT', 'ORB'];
const AVAILABLE_MATCHING_FUNCTIONS = ['FlannBased', 'BruteForce', 'BruteForceL1', 'BruteForceHamming', 'BruteForceHammingLut', 'BruteForceSL2'];

function getJimpImage(_x) {
  return _getJimpImage.apply(this, arguments);
}

function _getJimpImage() {
  _getJimpImage = (0, _asyncToGenerator2.default)(function* (data) {
    return yield new _bluebird.default((resolve, reject) => {
      if (!_lodash.default.isString(data) && !_lodash.default.isBuffer(data)) {
        return reject(new Error("Must initialize jimp object with string or buffer"));
      }

      if (_lodash.default.isString(data)) {
        data = _buffer.Buffer.from(data, 'base64');
      }

      new _jimp.default(data, (err, imgObj) => {
        if (err) {
          return reject(err);
        }

        if (!imgObj) {
          return reject(new Error("Could not create jimp image from that data"));
        }

        imgObj._getBuffer = imgObj.getBuffer.bind(imgObj);
        imgObj.getBuffer = _bluebird.default.promisify(imgObj._getBuffer, {
          context: imgObj
        });
        resolve(imgObj);
      });
    });
  });
  return _getJimpImage.apply(this, arguments);
}

function initOpenCV() {
  if (!cv) {
    try {
      cv = require('opencv4nodejs');
    } catch (ign) {}
  }

  if (!cv) {
    throw new Error('opencv4nodejs module is required to use OpenCV features. ' + 'Please install it first (npm i -g opencv4nodejs) and restart Appium. ' + 'Read https://github.com/justadudewhohacks/opencv4nodejs#how-to-install for more details on this topic.');
  }
}

function detectAndCompute(_x2, _x3) {
  return _detectAndCompute.apply(this, arguments);
}

function _detectAndCompute() {
  _detectAndCompute = (0, _asyncToGenerator2.default)(function* (img, detector) {
    const keyPoints = yield detector.detectAsync(img);
    const descriptor = yield detector.computeAsync(img, keyPoints);
    return {
      keyPoints,
      descriptor
    };
  });
  return _detectAndCompute.apply(this, arguments);
}

function calculateMatchedRect(matchedPoints) {
  if (matchedPoints.length < 2) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }

  const pointsSortedByDistance = matchedPoints.map(point => [Math.sqrt(point.x * point.x + point.y * point.y), point]).sort((pair1, pair2) => pair1[0] >= pair2[0]).map(pair => pair[1]);

  const firstPoint = _lodash.default.head(pointsSortedByDistance);

  const lastPoint = _lodash.default.last(pointsSortedByDistance);

  const topLeftPoint = {
    x: firstPoint.x <= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y <= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  const bottomRightPoint = {
    x: firstPoint.x >= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y >= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  return {
    x: topLeftPoint.x,
    y: topLeftPoint.y,
    width: bottomRightPoint.x - topLeftPoint.x,
    height: bottomRightPoint.y - topLeftPoint.y
  };
}

function highlightRegion(mat, region) {
  if (region.width <= 0 || region.height <= 0) {
    return;
  }

  const color = new cv.Vec(0, 0, 255);
  const thickness = 2;
  mat.drawRectangle(new cv.Rect(region.x, region.y, region.width, region.height), color, thickness, cv.LINE_8);
  return mat;
}

function getImagesMatches(_x4, _x5) {
  return _getImagesMatches.apply(this, arguments);
}

function _getImagesMatches() {
  _getImagesMatches = (0, _asyncToGenerator2.default)(function* (img1Data, img2Data, options = {}) {
    initOpenCV();
    const _options$detectorName = options.detectorName,
          detectorName = _options$detectorName === void 0 ? 'ORB' : _options$detectorName,
          _options$visualize = options.visualize,
          visualize = _options$visualize === void 0 ? false : _options$visualize,
          goodMatchesFactor = options.goodMatchesFactor,
          _options$matchFunc = options.matchFunc,
          matchFunc = _options$matchFunc === void 0 ? 'BruteForce' : _options$matchFunc;

    if (!_lodash.default.includes(AVAILABLE_DETECTORS, detectorName)) {
      throw new Error(`'${detectorName}' detector is unknown. ` + `Only ${JSON.stringify(AVAILABLE_DETECTORS)} detectors are supported.`);
    }

    if (!_lodash.default.includes(AVAILABLE_MATCHING_FUNCTIONS, matchFunc)) {
      throw new Error(`'${matchFunc}' matching function is unknown. ` + `Only ${JSON.stringify(AVAILABLE_MATCHING_FUNCTIONS)} matching functions are supported.`);
    }

    const detector = new cv[`${detectorName}Detector`]();

    const _ref = yield _bluebird.default.all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]),
          _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          img1 = _ref2[0],
          img2 = _ref2[1];

    const _ref3 = yield _bluebird.default.all([detectAndCompute(img1, detector), detectAndCompute(img2, detector)]),
          _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          result1 = _ref4[0],
          result2 = _ref4[1];

    let matches = [];

    try {
      matches = yield cv[`match${matchFunc}Async`](result1.descriptor, result2.descriptor);
    } catch (e) {
      throw new Error(`Cannot find any matches between the given images. Try another detection algorithm. ` + ` Original error: ${e}`);
    }

    const totalCount = matches.length;

    if ((0, _util.hasValue)(goodMatchesFactor)) {
      if (_lodash.default.isFunction(goodMatchesFactor)) {
        const distances = matches.map(match => match.distance);

        const minDistance = _lodash.default.min(distances);

        const maxDistance = _lodash.default.max(distances);

        matches = matches.filter(match => goodMatchesFactor(match.distance, minDistance, maxDistance));
      } else {
        if (matches.length > goodMatchesFactor) {
          matches = matches.sort((match1, match2) => match1.distance - match2.distance).slice(0, goodMatchesFactor);
        }
      }
    }

    const points1 = matches.map(match => result1.keyPoints[match.queryIdx].point);
    const rect1 = calculateMatchedRect(points1);
    const points2 = matches.map(match => result2.keyPoints[match.trainIdx].point);
    const rect2 = calculateMatchedRect(points2);
    const result = {
      points1,
      rect1,
      points2,
      rect2,
      totalCount,
      count: matches.length
    };

    if (visualize) {
      const visualization = cv.drawMatches(img1, img2, result1.keyPoints, result2.keyPoints, matches);
      highlightRegion(visualization, rect1);
      highlightRegion(visualization, {
        x: img1.cols + rect2.x,
        y: rect2.y,
        width: rect2.width,
        height: rect2.height
      });
      result.visualization = yield cv.imencodeAsync('.png', visualization);
    }

    return result;
  });
  return _getImagesMatches.apply(this, arguments);
}

function getImagesSimilarity(_x6, _x7) {
  return _getImagesSimilarity.apply(this, arguments);
}

function _getImagesSimilarity() {
  _getImagesSimilarity = (0, _asyncToGenerator2.default)(function* (img1Data, img2Data, options = {}) {
    initOpenCV();
    const _options$visualize2 = options.visualize,
          visualize = _options$visualize2 === void 0 ? false : _options$visualize2;

    let _ref5 = yield _bluebird.default.all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]),
        _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
        template = _ref6[0],
        reference = _ref6[1];

    if (template.rows !== reference.rows || template.cols !== reference.cols) {
      throw new Error('Both images are expected to have the same size in order to ' + 'calculate the similarity score.');
    }

    var _ref7 = yield _bluebird.default.all([template.convertToAsync(cv.CV_8UC3), reference.convertToAsync(cv.CV_8UC3)]);

    var _ref8 = (0, _slicedToArray2.default)(_ref7, 2);

    template = _ref8[0];
    reference = _ref8[1];
    const matched = yield reference.matchTemplateAsync(template, cv.TM_CCOEFF_NORMED);
    const minMax = yield matched.minMaxLocAsync();
    const result = {
      score: minMax.maxVal
    };

    if (visualize) {
      const resultMat = new cv.Mat(template.rows, template.cols * 2, cv.CV_8UC3);
      yield _bluebird.default.all([reference.copyToAsync(resultMat.getRegion(new cv.Rect(0, 0, reference.cols, reference.rows))), template.copyToAsync(resultMat.getRegion(new cv.Rect(reference.cols, 0, template.cols, template.rows)))]);
      let mask = reference.absdiff(template);
      mask = yield mask.cvtColorAsync(cv.COLOR_BGR2GRAY);
      let contours = [];

      try {
        mask = yield mask.thresholdAsync(128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU);
        contours = yield mask.findContoursAsync(cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);
      } catch (ign) {}

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = contours[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const contour = _step.value;
          const boundingRect = contour.boundingRect();
          highlightRegion(resultMat, boundingRect);
          highlightRegion(resultMat, {
            x: reference.cols + boundingRect.x,
            y: boundingRect.y,
            width: boundingRect.width,
            height: boundingRect.height
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      result.visualization = yield cv.imencodeAsync('.png', resultMat);
    }

    return result;
  });
  return _getImagesSimilarity.apply(this, arguments);
}

function getImageOccurrence(_x8, _x9) {
  return _getImageOccurrence.apply(this, arguments);
}

function _getImageOccurrence() {
  _getImageOccurrence = (0, _asyncToGenerator2.default)(function* (fullImgData, partialImgData, options = {}) {
    initOpenCV();
    const _options$visualize3 = options.visualize,
          visualize = _options$visualize3 === void 0 ? false : _options$visualize3,
          _options$threshold = options.threshold,
          threshold = _options$threshold === void 0 ? DEFAULT_MATCH_THRESHOLD : _options$threshold;

    const _ref9 = yield _bluebird.default.all([cv.imdecodeAsync(fullImgData), cv.imdecodeAsync(partialImgData)]),
          _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
          fullImg = _ref10[0],
          partialImg = _ref10[1];

    const result = {};

    try {
      const matched = yield fullImg.matchTemplateAsync(partialImg, cv.TM_CCOEFF_NORMED);
      const minMax = yield matched.minMaxLocAsync();

      if (minMax.maxVal < threshold) {
        throw new Error(`Cannot find any occurrences of the partial image in the full ` + `image above the threshold of ${threshold}. Highest match value ` + `found was ${minMax.maxVal}`);
      }

      result.rect = {
        x: minMax.maxLoc.x,
        y: minMax.maxLoc.y,
        width: partialImg.cols,
        height: partialImg.rows
      };
    } catch (e) {
      throw new Error(`Cannot find any occurences of the partial image in the full image. ` + `Original error: ${e}`);
    }

    if (visualize) {
      highlightRegion(fullImg, result.rect);
      result.visualization = yield cv.imencodeAsync('.png', fullImg);
    }

    return result;
  });
  return _getImageOccurrence.apply(this, arguments);
}

function cropBase64Image(_x10, _x11) {
  return _cropBase64Image.apply(this, arguments);
}

function _cropBase64Image() {
  _cropBase64Image = (0, _asyncToGenerator2.default)(function* (base64Image, rect) {
    const image = yield base64ToImage(base64Image);
    cropImage(image, rect);
    return yield imageToBase64(image);
  });
  return _cropBase64Image.apply(this, arguments);
}

function base64ToImage(_x12) {
  return _base64ToImage.apply(this, arguments);
}

function _base64ToImage() {
  _base64ToImage = (0, _asyncToGenerator2.default)(function* (base64Image) {
    const imageBuffer = _buffer.Buffer.from(base64Image, 'base64');

    return yield new _bluebird.default((resolve, reject) => {
      const image = new _pngjs.PNG({
        filterType: SCANLINE_FILTER_METHOD
      });
      image.parse(imageBuffer, (err, image) => {
        if (err) {
          return reject(err);
        }

        resolve(image);
      });
    });
  });
  return _base64ToImage.apply(this, arguments);
}

function imageToBase64(_x13) {
  return _imageToBase.apply(this, arguments);
}

function _imageToBase() {
  _imageToBase = (0, _asyncToGenerator2.default)(function* (image) {
    return yield new _bluebird.default((resolve, reject) => {
      const chunks = [];
      image.pack().on('data', chunk => chunks.push(chunk)).on('end', () => {
        resolve(_buffer.Buffer.concat(chunks).toString('base64'));
      }).on('error', err => {
        reject(err);
      });
    });
  });
  return _imageToBase.apply(this, arguments);
}

function cropImage(image, rect) {
  const imageRect = {
    width: image.width,
    height: image.height
  };
  const interRect = getRectIntersection(rect, imageRect);

  if (interRect.width < rect.width || interRect.height < rect.height) {
    throw new Error(`Cannot crop ${JSON.stringify(rect)} from ${JSON.stringify(imageRect)} because the intersection between them was not the size of the rect`);
  }

  const firstVerticalPixel = interRect.top;
  const lastVerticalPixel = interRect.top + interRect.height;
  const firstHorizontalPixel = interRect.left;
  const lastHorizontalPixel = interRect.left + interRect.width;
  const croppedArray = [];

  for (let y = firstVerticalPixel; y < lastVerticalPixel; y++) {
    for (let x = firstHorizontalPixel; x < lastHorizontalPixel; x++) {
      const firstByteIdxInPixelBlock = imageRect.width * y + x << 2;

      for (let byteIdx = 0; byteIdx < BYTES_IN_PIXEL_BLOCK; byteIdx++) {
        croppedArray.push(image.data[firstByteIdxInPixelBlock + byteIdx]);
      }
    }
  }

  image.data = _buffer.Buffer.from(croppedArray);
  image.width = interRect.width;
  image.height = interRect.height;
  return image;
}

function getRectIntersection(rect, imageSize) {
  const left = rect.left >= imageSize.width ? imageSize.width : rect.left;
  const top = rect.top >= imageSize.height ? imageSize.height : rect.top;
  const width = imageSize.width >= left + rect.width ? rect.width : imageSize.width - left;
  const height = imageSize.height >= top + rect.height ? rect.height : imageSize.height - top;
  return {
    left,
    top,
    width,
    height
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
