"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  hasAccess(path) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _this.access(path, fs.F_OK | fs.R_OK);
      } catch (err) {
        return false;
      }

      return true;
    })();
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  mkdir(dirName) {
    return (0, _asyncToGenerator2.default)(function* () {
      let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

      try {
        yield _mkdir(dirName);
      } catch (err) {
        if (err && err.code !== "EEXIST") {
          throw err;
        }
      }
    })();
  },

  copyFile(source, destination, ...otherArgs) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!(yield _this2.hasAccess(source))) {
        throw new Error(`The file at '${source}' does not exist or is not accessible`);
      }

      return yield _bluebird.default.promisify(_ncp.default)(source, destination, ...otherArgs);
    })();
  },

  md5(filePath) {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield md5(filePath);
    })();
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  hash(filePath, algorithm = 'sha1') {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield new _bluebird.default((resolve, reject) => {
        const fileHash = _crypto.default.createHash(algorithm);

        const readStream = _fs2.default.createReadStream(filePath);

        readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
        readStream.on('data', chunk => fileHash.update(chunk));
        readStream.on('end', () => resolve(fileHash.digest('hex')));
      });
    })();
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (var _i = 0; _i < simples.length; _i++) {
  let s = simples[_i];
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mcy5qcyJdLCJuYW1lcyI6WyJtZDUiLCJCIiwicHJvbWlzaWZ5IiwibWQ1ZmlsZSIsImZzIiwiaGFzQWNjZXNzIiwicGF0aCIsImFjY2VzcyIsIkZfT0siLCJSX09LIiwiZXJyIiwiZXhpc3RzIiwicmltcmFmIiwibWtkaXIiLCJkaXJOYW1lIiwiX21rZGlyIiwiX2ZzIiwiY29kZSIsImNvcHlGaWxlIiwic291cmNlIiwiZGVzdGluYXRpb24iLCJvdGhlckFyZ3MiLCJFcnJvciIsIm5jcCIsImZpbGVQYXRoIiwibXYiLCJ3aGljaCIsImdsb2IiLCJoYXNoIiwiYWxnb3JpdGhtIiwicmVzb2x2ZSIsInJlamVjdCIsImZpbGVIYXNoIiwiY3J5cHRvIiwiY3JlYXRlSGFzaCIsInJlYWRTdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwib24iLCJlIiwibWVzc2FnZSIsImNodW5rIiwidXBkYXRlIiwiZGlnZXN0Iiwic2ltcGxlcyIsInMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsR0FBRyxHQUFHQyxrQkFBRUMsU0FBRixDQUFZQyxnQkFBWixDQUFaOztBQUVBLElBQUlDLEVBQUUsR0FBRztBQUNEQyxFQUFBQSxTQUFOLENBQWlCQyxJQUFqQixFQUF1QjtBQUFBOztBQUFBO0FBQ3JCLFVBQUk7QUFDRixjQUFNLEtBQUksQ0FBQ0MsTUFBTCxDQUFZRCxJQUFaLEVBQWtCRixFQUFFLENBQUNJLElBQUgsR0FBVUosRUFBRSxDQUFDSyxJQUEvQixDQUFOO0FBQ0QsT0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLGVBQU8sS0FBUDtBQUNEOztBQUNELGFBQU8sSUFBUDtBQU5xQjtBQU90QixHQVJNOztBQVNQQyxFQUFBQSxNQUFNLENBQUVMLElBQUYsRUFBUTtBQUFFLFdBQU8sS0FBS0QsU0FBTCxDQUFlQyxJQUFmLENBQVA7QUFBOEIs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RUMsU0FBRixDQUFZYyxhQUFJNEIsQ0FBSixDQUFaLENBQVI7QUFDRDs7ZUFHY3hDLEUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqc2hpbnQgaWdub3JlOiBzdGFydFxuaW1wb3J0IF9mcyBmcm9tICdmcyc7XG5pbXBvcnQgcmltcmFmIGZyb20gJ3JpbXJhZic7XG5pbXBvcnQgbWQ1ZmlsZSBmcm9tICdtZDUtZmlsZSc7XG5pbXBvcnQgbmNwIGZyb20gJ25jcCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgbXYgZnJvbSAnbXYnO1xuaW1wb3J0IHdoaWNoIGZyb20gJ3doaWNoJztcbmltcG9ydCBnbG9iIGZyb20gJ2dsb2InO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5cbmNvbnN0IG1kNSA9IEIucHJvbWlzaWZ5KG1kNWZpbGUpO1xuXG5sZXQgZnMgPSB7XG4gIGFzeW5jIGhhc0FjY2VzcyAocGF0aCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmFjY2VzcyhwYXRoLCBmcy5GX09LIHwgZnMuUl9PSyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBleGlzdHMgKHBhdGgpIHsgcmV0dXJuIHRoaXMuaGFzQWNjZXNzKHBhdGgpOyB9LFxuICByaW1yYWY6IEIucHJvbWlzaWZ5KHJpbXJhZiksXG4gIGFzeW5jIG1rZGlyIChkaXJOYW1lKSB7XG4gICAgbGV0IF9ta2RpciA9IEIucHJvbWlzaWZ5KF9mcy5ta2Rpcik7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IF9ta2RpcihkaXJOYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09IFwiRUVYSVNUXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYXN5bmMgY29weUZpbGUgKHNvdXJjZSwgZGVzdGluYXRpb24sIC4uLm90aGVyQXJncykge1xuICAgIGlmICghYXdhaXQgdGhpcy5oYXNBY2Nlc3Moc291cmNlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZmlsZSBhdCAnJHtzb3VyY2V9JyBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgYWNjZXNzaWJsZWApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgKEIucHJvbWlzaWZ5KG5jcCkpKHNvdXJjZSwgZGVzdGluYXRpb24sIC4uLm90aGVyQXJncyk7XG4gIH0sXG4gIGFzeW5jIG1kNSAoZmlsZVBhdGgpIHtcbiAgICByZXR1cm4gYXdhaXQgbWQ1KGZpbGVQYXRoKTtcbiAgfSxcbiAgbXY6IEIucHJvbWlzaWZ5KG12KSxcbiAgd2hpY2g6IEIucHJvbWlzaWZ5KHdoaWNoKSxcbiAgZ2xvYjogQi5wcm9taXNpZnkoZ2xvYiksXG4gIGFzeW5jIGhhc2ggKGZpbGVQYXRoLCBhbGdvcml0aG0gPSAnc2hhMScpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZmlsZUhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvcml0aG0pO1xuICAgICAgY29uc3QgcmVhZFN0cmVhbSA9IF9mcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGVQYXRoKTtcbiAgICAgIHJlYWRTdHJlYW0ub24oJ2Vycm9yJywgKGUpID0+IHJlamVjdChcbiAgICAgICAgbmV3IEVycm9yKGBDYW5ub3QgY2FsY3VsYXRlICR7YWxnb3JpdGhtfSBoYXNoIGZvciAnJHtmaWxlUGF0aH0nLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCkpKTtcbiAgICAgIHJlYWRTdHJlYW0ub24oJ2RhdGEnLCAoY2h1bmspID0+IGZpbGVIYXNoLnVwZGF0ZShjaHVuaykpO1xuICAgICAgcmVhZFN0cmVhbS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShmaWxlSGFzaC5kaWdlc3QoJ2hleCcpKSk7XG4gICAgfSk7XG4gIH0sXG59O1xuXG5jb25zdCBzaW1wbGVzID0gW1xuICAnb3BlbicsICdjbG9zZScsICdhY2Nlc3MnLCAncmVhZEZpbGUnLCAnd3JpdGVGaWxlJywgJ3dyaXRlJywgJ3JlYWQnLFxuICAncmVhZGxpbmsnLCAnY2htb2QnLCAndW5saW5rJywgJ3JlYWRkaXInLCAnc3RhdCcsICdyZW5hbWUnLCAnbHN0YXQnLFxuXTtcblxuZm9yIChsZXQgcyBvZiBzaW1wbGVzKSB7XG4gIGZzW3NdID0gQi5wcm9taXNpZnkoX2ZzW3NdKTtcbn1cblxuZXhwb3J0IHsgZnMgfTtcbmV4cG9ydCBkZWZhdWx0IGZzO1xuIl0sImZpbGUiOiJsaWIvZnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
