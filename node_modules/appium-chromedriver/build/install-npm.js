#!/usr/bin/env node
"use strict";

const fs = require('fs');

const path = require('path');

function waitForDeps(cb) {
  let i = 0;

  function check() {
    i++;

    try {
      require('./build/lib/install');

      cb();
    } catch (err) {
      if (err.message.includes("Cannot find module './build/lib/install'")) {
        console.warn('Project does not appear to be built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }

      console.warn('Error trying to install Chromedriver binary. Waiting and trying again.', err.message);

      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }

  check();
}

if (require.main === module) {
  let installScript = path.resolve(__dirname, 'build', 'lib', 'install.js');
  waitForDeps(function (err) {
    if (err) {
      console.warn("Unable to import install script. Re-run `install appium-chromedriver` manually.");
      return;
    }

    fs.stat(installScript, function (err) {
      if (err) {
        console.warn("NOTE: Run 'gulp transpile' before using");
        return;
      }

      require('./build/lib/install').doInstall().catch(function (err) {
        console.error(err.stack ? err.stack : err);
        process.exit(1);
      });
    });
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJ3YWl0Rm9yRGVwcyIsImNiIiwiaSIsImNoZWNrIiwiZXJyIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiY29uc29sZSIsIndhcm4iLCJzZXRUaW1lb3V0IiwibWFpbiIsIm1vZHVsZSIsImluc3RhbGxTY3JpcHQiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwic3RhdCIsImRvSW5zdGFsbCIsImNhdGNoIiwiZXJyb3IiLCJzdGFjayIsInByb2Nlc3MiLCJleGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBSUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUdBLFNBQVNFLFdBQVQsQ0FBc0JDLEVBQXRCLEVBQTBCO0FBR3hCLE1BQUlDLENBQUMsR0FBRyxDQUFSOztBQUNBLFdBQVNDLEtBQVQsR0FBa0I7QUFDaEJELElBQUFBLENBQUM7O0FBQ0QsUUFBSTtBQUNGSixNQUFBQSxPQUFPLENBQUMscUJBQUQsQ0FBUDs7QUFDQUcsTUFBQUEsRUFBRTtBQUNILEtBSEQsQ0FHRSxPQUFPRyxHQUFQLEVBQVk7QUFDWixVQUFJQSxHQUFHLENBQUNDLE9BQUosQ0FBWUMsUUFBWixDQUFxQiwwQ0FBckIsQ0FBSixFQUFzRTtBQUNwRUMsUUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsNkVBQWI7QUFDQSxlQUFPUCxFQUFFLENBQUMsK0JBQStCRyxHQUFoQyxDQUFUO0FBQ0Q7O0FBQ0RHLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLHdFQUFiLEVBQXVGSixHQUFHLENBQUNDLE9BQTNGOztBQUNBLFVBQUlILENBQUMsSUFBSSxHQUFULEVBQWM7QUFDWk8sUUFBQUEsVUFBVSxDQUFDTixLQUFELEVBQVEsSUFBUixDQUFWO0FBQ0QsT0FGRCxNQUVPO0FBQ0xGLFFBQUFBLEVBQUUsQ0FBQywyQ0FBMkNHLEdBQTVDLENBQUY7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0RELEVBQUFBLEtBQUs7QUFDTjs7QUFFRCxJQUFJTCxPQUFPLENBQUNZLElBQVIsS0FBaUJDLE1BQXJCLEVBQTZCO0FBRTNCLE1BQUlDLGFBQWEsR0FBR2IsSUFBSSxDQUFDYyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsT0FBeEIsRUFBaUMsS0FBakMsRUFBd0MsWUFBeEMsQ0FBcEI7QUFDQWQsRUFBQUEsV0FBVyxDQUFDLFVBQVVJLEdBQVYsRUFBZTtBQUN6QixRQUFJQSxHQUFKLEVBQVM7QUFDUEcsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsaUZBQWI7QUFDQTtBQUNEOztBQUNEWCxJQUFBQSxFQUFFLENBQUNrQixJQUFILENBQVFILGFBQVIsRUFBdUIsVUFBVVIsR0FBVixFQUFlO0FBQ3BDLFVBQUlBLEdBQUosRUFBUztBQUNQRyxRQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSx5Q0FBYjtBQUNBO0FBQ0Q7O0FBQ0RWLE1BQUFBLE9BQU8sQ0FBQyxxQkFBRCxDQUFQLENBQStCa0IsU0FBL0IsR0FBMkNDLEtBQTNDLENBQWlELFVBQVViLEdBQVYsRUFBZTtBQUM5REcsUUFBQUEsT0FBTyxDQUFDVyxLQUFSLENBQWNkLEdBQUcsQ0FBQ2UsS0FBSixHQUFZZixHQUFHLENBQUNlLEtBQWhCLEdBQXdCZixHQUF0QztBQUNBZ0IsUUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYjtBQUNELE9BSEQ7QUFJRCxLQVREO0FBVUQsR0FmVSxDQUFYO0FBZ0JEIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzICovXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cblxuZnVuY3Rpb24gd2FpdEZvckRlcHMgKGNiKSB7XG4gIC8vIHNlZSBpZiB3ZSBjYW4gaW1wb3J0IHRoZSBuZWNlc3NhcnkgY29kZVxuICAvLyB0cnkgaXQgYSByaWRpY3Vsb3VzIChidXQgZmluaXRlKSBudW1iZXIgb2YgdGltZXNcbiAgbGV0IGkgPSAwO1xuICBmdW5jdGlvbiBjaGVjayAoKSB7XG4gICAgaSsrO1xuICAgIHRyeSB7XG4gICAgICByZXF1aXJlKCcuL2J1aWxkL2xpYi9pbnN0YWxsJyk7XG4gICAgICBjYigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyci5tZXNzYWdlLmluY2x1ZGVzKFwiQ2Fubm90IGZpbmQgbW9kdWxlICcuL2J1aWxkL2xpYi9pbnN0YWxsJ1wiKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1Byb2plY3QgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGJ1aWx0IHlldC4gUGxlYXNlIHJ1biBgZ3VscCB0cmFuc3BpbGVgIGZpcnN0LicpO1xuICAgICAgICByZXR1cm4gY2IoJ0NvdWxkIG5vdCBpbnN0YWxsIG1vZHVsZTogJyArIGVycik7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIHRyeWluZyB0byBpbnN0YWxsIENocm9tZWRyaXZlciBiaW5hcnkuIFdhaXRpbmcgYW5kIHRyeWluZyBhZ2Fpbi4nLCBlcnIubWVzc2FnZSk7XG4gICAgICBpZiAoaSA8PSAyMDApIHtcbiAgICAgICAgc2V0VGltZW91dChjaGVjaywgMTAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYignQ291bGQgbm90IGltcG9ydCBpbnN0YWxsYXRpb24gbW9kdWxlOiAnICsgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2hlY2soKTtcbn1cblxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIC8vIGNoZWNrIGlmIGN1ciBkaXIgZXhpc3RzXG4gIGxldCBpbnN0YWxsU2NyaXB0ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWxkJywgJ2xpYicsICdpbnN0YWxsLmpzJyk7XG4gIHdhaXRGb3JEZXBzKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gaW1wb3J0IGluc3RhbGwgc2NyaXB0LiBSZS1ydW4gYGluc3RhbGwgYXBwaXVtLWNocm9tZWRyaXZlcmAgbWFudWFsbHkuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmcy5zdGF0KGluc3RhbGxTY3JpcHQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTk9URTogUnVuICdndWxwIHRyYW5zcGlsZScgYmVmb3JlIHVzaW5nXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXF1aXJlKCcuL2J1aWxkL2xpYi9pbnN0YWxsJykuZG9JbnN0YWxsKCkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayA/IGVyci5zdGFjayA6IGVycik7XG4gICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdLCJmaWxlIjoiaW5zdGFsbC1ucG0uanMiLCJzb3VyY2VSb290IjoiLi4ifQ==
