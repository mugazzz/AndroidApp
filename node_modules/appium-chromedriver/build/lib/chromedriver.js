"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMostRecentChromedriver = getMostRecentChromedriver;
exports.default = exports.CD_VER = exports.CHROMEDRIVER_CHROME_MAPPING = exports.Chromedriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _events = _interopRequireDefault(require("events"));

var _appiumBaseDriver = require("appium-base-driver");

var _child_process = _interopRequireDefault(require("child_process"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("./utils");

var _semver = _interopRequireDefault(require("semver"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

const log = _appiumSupport.logger.getLogger('Chromedriver');

const DEFAULT_HOST = '127.0.0.1';
const DEFAULT_PORT = 9515;
const CHROMEDRIVER_CHROME_MAPPING = {
  '2.43': '69.0.3497',
  '2.42': '68.0.3440',
  '2.41': '67.0.3396',
  '2.40': '66.0.3359',
  '2.39': '66.0.3359',
  '2.38': '65.0.3325',
  '2.37': '64.0.3282',
  '2.36': '63.0.3239',
  '2.35': '62.0.3202',
  '2.34': '61.0.3163',
  '2.33': '60.0.3112',
  '2.32': '59.0.3071',
  '2.31': '58.0.3029',
  '2.30': '58.0.3029',
  '2.29': '57.0.2987',
  '2.28': '55.0.2883',
  '2.27': '54.0.2840',
  '2.26': '53.0.2785',
  '2.25': '53.0.2785',
  '2.24': '52.0.2743',
  '2.23': '51.0.2704',
  '2.22': '49.0.2623',
  '2.21': '46.0.2490',
  '2.20': '43.0.2357',
  '2.19': '43.0.2357',
  '2.18': '43.0.2357',
  '2.17': '42.0.2311',
  '2.16': '42.0.2311',
  '2.15': '40.0.2214',
  '2.14': '39.0.2171',
  '2.13': '38.0.2125',
  '2.12': '36.0.1985',
  '2.11': '36.0.1985',
  '2.10': '33.0.1751',
  '2.9': '31.0.1650',
  '2.8': '30.0.1573',
  '2.7': '30.0.1573',
  '2.6': '29.0.1545',
  '2.5': '29.0.1545',
  '2.4': '29.0.1545',
  '2.3': '28.0.1500',
  '2.2': '27.0.1453',
  '2.1': '27.0.1453',
  '2.0': '27.0.1453'
};
exports.CHROMEDRIVER_CHROME_MAPPING = CHROMEDRIVER_CHROME_MAPPING;
const CHROME_BUNDLE_ID = 'com.android.chrome';
const WEBVIEW_BUNDLE_IDS = ['com.google.android.webview', 'com.android.webview'];
const CHROMEDRIVER_TUTORIAL = 'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md';
const CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || getMostRecentChromedriver();
exports.CD_VER = CD_VER;
const CD_VERSION_TIMEOUT = 5000;

function getMostRecentChromedriver(mapping = CHROMEDRIVER_CHROME_MAPPING) {
  if (_lodash.default.isEmpty(mapping)) {
    throw new Error('Unable to get most recent Chromedriver from empty mapping');
  }

  return _lodash.default.keys(mapping).map(_semver.default.coerce).sort(_semver.default.rcompare).map(v => `${_semver.default.major(v)}.${_semver.default.minor(v)}`)[0];
}

class Chromedriver extends _events.default.EventEmitter {
  constructor(args = {}) {
    super();
    const _args$host = args.host,
          host = _args$host === void 0 ? DEFAULT_HOST : _args$host,
          _args$port = args.port,
          port = _args$port === void 0 ? DEFAULT_PORT : _args$port,
          _args$useSystemExecut = args.useSystemExecutable,
          useSystemExecutable = _args$useSystemExecut === void 0 ? false : _args$useSystemExecut,
          executable = args.executable,
          _args$executableDir = args.executableDir,
          executableDir = _args$executableDir === void 0 ? (0, _utils.getChromedriverDir)() : _args$executableDir,
          bundleId = args.bundleId,
          mappingPath = args.mappingPath,
          cmdArgs = args.cmdArgs,
          adb = args.adb,
          verbose = args.verbose,
          logPath = args.logPath,
          disableBuildCheck = args.disableBuildCheck;
    this.proxyHost = host;
    this.proxyPort = port;
    this.adb = adb;
    this.cmdArgs = cmdArgs;
    this.proc = null;
    this.useSystemExecutable = useSystemExecutable;
    this.chromedriver = executable;
    this.executableDir = executableDir;
    this.mappingPath = mappingPath;
    this.bundleId = bundleId;
    this.executableVerified = false;
    this.state = Chromedriver.STATE_STOPPED;
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.proxyHost,
      port: this.proxyPort
    });
    this.verbose = verbose;
    this.logPath = logPath;
    this.disableBuildCheck = !!disableBuildCheck;
  }

  getMapping() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let mapping = CHROMEDRIVER_CHROME_MAPPING;

      if (_this.mappingPath) {
        log.debug(`Attempting to use Chromedriver-Chrome mapping from '${_this.mappingPath}'`);

        if (!(yield _appiumSupport.fs.exists(_this.mappingPath))) {
          log.warn(`No file found at '${_this.mappingPath}'. Using default mapping`);
        } else {
          try {
            mapping = JSON.parse((yield _appiumSupport.fs.readFile(_this.mappingPath)));
          } catch (err) {
            log.error(`Error parsing mapping from '${_this.mappingPath}': ${err.message}`);
            log.warn('Using default mapping');
          }
        }
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.toPairs(mapping)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
                cdVersion = _step$value[0],
                chromeVersion = _step$value[1];

          mapping[cdVersion] = _semver.default.coerce(chromeVersion);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return mapping;
    })();
  }

  getChromedrivers(mapping) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const executables = yield _appiumSupport.fs.glob(`${_this2.executableDir}/*`);
      log.debug(`Found ${executables.length} executable${executables.length === 1 ? '' : 's'} ` + `in '${_this2.executableDir}'`);
      const cds = (yield (0, _asyncbox.asyncmap)(executables, function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (executable) {
          const logError = ({
            message,
            stdout = null,
            stderr = null
          }) => {
            let errMsg = `Cannot retrieve version number from '${_path.default.basename(executable)}' Chromedriver binary. ` + `Make sure it returns a valid version string in response to '--version' command line argument. ${message}`;

            if (stdout) {
              errMsg += `\nStdout: ${stdout}`;
            }

            if (stderr) {
              errMsg += `\nStderr: ${stderr}`;
            }

            log.warn(errMsg);
            return null;
          };

          let stdout;
          let stderr;

          try {
            var _ref2 = yield (0, _teen_process.exec)(executable, ['--version'], {
              timeout: CD_VERSION_TIMEOUT
            });

            stdout = _ref2.stdout;
            stderr = _ref2.stderr;
          } catch (err) {
            if (!(err.message || '').includes('timed out') && !(err.stdout || '').includes('Starting ChromeDriver')) {
              return logError(err);
            }

            stdout = err.stdout;
          }

          const match = /ChromeDriver\s+\(?v?([\d.]+)\)?/i.exec(stdout);

          if (!match) {
            return logError({
              message: 'Cannot parse the version string',
              stdout,
              stderr
            });
          }

          const versionObj = _semver.default.coerce(match[1], true);

          if (!versionObj) {
            return logError({
              message: 'Cannot coerce the version number',
              stdout,
              stderr
            });
          }

          const version = `${versionObj.major}.${versionObj.minor}`;
          return {
            executable,
            version,
            minCDVersion: mapping[version]
          };
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }())).filter(cd => !!cd).sort((a, b) => _semver.default.gte(_semver.default.coerce(b.version), _semver.default.coerce(a.version)) ? 1 : -1);

      if (_lodash.default.isEmpty(cds)) {
        log.errorAndThrow(`No Chromedrivers found in '${_this2.executableDir}'`);
      }

      log.debug(`The following Chromedriver executables were found:`);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = cds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          const cd = _step2.value;
          log.debug(`    ${cd.executable} (minimum Chrome version '${cd.minCDVersion ? cd.minCDVersion : 'Unknown'}')`);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return cds;
    })();
  }

  getChromeVersion() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let chromeVersion;

      if (_this3.adb && (yield _this3.adb.getApiLevel()) >= 24) {
        _this3.bundleId = CHROME_BUNDLE_ID;
      }

      if (!_this3.bundleId) {
        _this3.bundleId = CHROME_BUNDLE_ID;

        for (var _i = 0; _i < WEBVIEW_BUNDLE_IDS.length; _i++) {
          const bundleId = WEBVIEW_BUNDLE_IDS[_i];
          chromeVersion = yield (0, _utils.getChromeVersion)(_this3.adb, bundleId);

          if (chromeVersion) {
            _this3.bundleId = bundleId;
            break;
          }
        }
      }

      if (!chromeVersion) {
        chromeVersion = yield (0, _utils.getChromeVersion)(_this3.adb, _this3.bundleId);
      }

      return chromeVersion ? _semver.default.coerce(chromeVersion) : null;
    })();
  }

  getCompatibleChromedriver() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this4.adb) {
        return yield (0, _utils.getChromedriverBinaryPath)();
      }

      const mapping = yield _this4.getMapping();
      const cds = yield _this4.getChromedrivers(mapping);
      const chromeVersion = yield _this4.getChromeVersion();

      if (!chromeVersion) {
        let cd = cds[0];
        log.warn(`Unable to discover Chrome version. Using Chromedriver ${cd.version} at '${cd.executable}'`);
        return cd.executable;
      }

      log.debug(`Found Chrome bundle '${_this4.bundleId}' version '${chromeVersion}'`);

      if (_semver.default.gt(chromeVersion, _lodash.default.values(mapping)[0]) && !_lodash.default.isUndefined(cds[0]) && _lodash.default.isUndefined(cds[0].minCDVersion)) {
        let cd = cds[0];
        log.warn(`No known Chromedriver available to automate Chrome version '${chromeVersion}'.\n` + `Using Chromedriver version '${cd.version}', which has not been tested with Appium.`);
        return cd.executable;
      }

      const workingCds = cds.filter(cd => {
        return !_lodash.default.isUndefined(cd.minCDVersion) && _semver.default.gte(chromeVersion, cd.minCDVersion);
      });

      if (_lodash.default.isEmpty(workingCds)) {
        log.errorAndThrow(`No Chromedriver found that can automate Chrome '${chromeVersion}'. ` + `See ${CHROMEDRIVER_TUTORIAL} for more details.`);
      }

      const binPath = workingCds[0].executable;
      log.debug(`Found ${workingCds.length} Chromedriver executable${workingCds.length === 1 ? '' : 's'} ` + `capable of automating Chrome '${chromeVersion}'.\n` + `Choosing the most recent, '${binPath}'.`);
      log.debug('If a specific version is required, specify it with the `chromedriverExecutable`' + 'desired capability.');
      return binPath;
    })();
  }

  initChromedriverPath() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this5.executableVerified) return;

      if (!_this5.chromedriver) {
        _this5.chromedriver = _this5.useSystemExecutable ? yield (0, _utils.getChromedriverBinaryPath)() : yield _this5.getCompatibleChromedriver();
      }

      if (!(yield _appiumSupport.fs.exists(_this5.chromedriver))) {
        throw new Error(`Trying to use a chromedriver binary at the path ` + `${_this5.chromedriver}, but it doesn't exist!`);
      }

      _this5.executableVerified = true;
      log.info(`Set chromedriver binary as: ${_this5.chromedriver}`);
    })();
  }

  start(caps, emitStartingState = true) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this6.capabilities = caps;

      if (emitStartingState) {
        _this6.changeState(Chromedriver.STATE_STARTING);
      }

      let args = ["--url-base=wd/hub", `--port=${_this6.proxyPort}`];

      if (_this6.adb && _this6.adb.adbPort) {
        args = args.concat([`--adb-port=${_this6.adb.adbPort}`]);
      }

      if (_this6.cmdArgs) {
        args = args.concat(_this6.cmdArgs);
      }

      if (_this6.logPath) {
        args = args.concat([`--log-path=${_this6.logPath}`]);
      }

      if (_this6.disableBuildCheck) {
        args = args.concat(['--disable-build-check']);
      }

      args = args.concat(['--verbose']);

      const startDetector = stdout => {
        return stdout.indexOf('Starting ') === 0;
      };

      let processIsAlive = false;
      let webviewVersion;

      try {
        yield _this6.initChromedriverPath();
        yield _this6.killAll();
        _this6.proc = new _teen_process.SubProcess(_this6.chromedriver, args);
        processIsAlive = true;

        _this6.proc.on('output', (stdout, stderr) => {
          const out = stdout + stderr;
          let match = /"Browser": "(.*)"/.exec(out);

          if (match) {
            webviewVersion = match[1];
            log.debug(`Webview version: '${webviewVersion}'`);
          }

          match = /Starting ChromeDriver ([.\d]+)/.exec(out);

          if (match) {
            log.debug(`Chromedriver version: '${match[1]}'`);
          }

          if (_this6.verbose) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = (stdout || '').trim().split('\n')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                let line = _step3.value;
                if (!line.trim().length) continue;
                log.debug(`[STDOUT] ${line}`);
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = (stderr || '').trim().split('\n')[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                let line = _step4.value;
                if (!line.trim().length) continue;
                log.error(`[STDERR] ${line}`);
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }
        });

        _this6.proc.on('exit', (code, signal) => {
          processIsAlive = false;

          if (_this6.state !== Chromedriver.STATE_STOPPED && _this6.state !== Chromedriver.STATE_STOPPING && _this6.state !== Chromedriver.STATE_RESTARTING) {
            let msg = `Chromedriver exited unexpectedly with code ${code}, ` + `signal ${signal}`;
            log.error(msg);

            _this6.changeState(Chromedriver.STATE_STOPPED);
          }
        });

        log.info(`Spawning chromedriver with: ${_this6.chromedriver} ` + `${args.join(' ')}`);
        yield _this6.proc.start(startDetector);
        yield _this6.waitForOnline();
        yield _this6.startSession();
      } catch (e) {
        _this6.emit(Chromedriver.EVENT_ERROR, e);

        if (processIsAlive) {
          yield _this6.proc.stop();
        }

        let message = '';

        if (e.message.includes('Chrome version must be')) {
          message += 'Unable to automate Chrome version because it is too old for this version of Chromedriver.\n';

          if (webviewVersion) {
            message += `Chrome version on the device: ${webviewVersion}\n`;
          }

          message += `Visit '${CHROMEDRIVER_TUTORIAL}' to troubleshoot the problem.\n`;
        }

        message += e.message;
        log.errorAndThrow(message);
      }
    })();
  }

  sessionId() {
    if (this.state !== Chromedriver.STATE_ONLINE) {
      return null;
    }

    return this.jwproxy.sessionId;
  }

  restart() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      log.info("Restarting chromedriver");

      if (_this7.state !== Chromedriver.STATE_ONLINE) {
        throw new Error("Can't restart when we're not online");
      }

      _this7.changeState(Chromedriver.STATE_RESTARTING);

      yield _this7.stop(false);
      yield _this7.start(_this7.capabilities, false);
    })();
  }

  waitForOnline() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let chromedriverStopped = false;
      yield (0, _asyncbox.retryInterval)(20, 200, (0, _asyncToGenerator2.default)(function* () {
        if (_this8.state === Chromedriver.STATE_STOPPED) {
          chromedriverStopped = true;
          return;
        }

        yield _this8.getStatus();
      }));

      if (chromedriverStopped) {
        throw new Error('ChromeDriver crashed during startup.');
      }
    })();
  }

  getStatus() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this9.jwproxy.command('/status', 'GET');
    })();
  }

  startSession() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield (0, _asyncbox.retryInterval)(4, 200, (0, _asyncToGenerator2.default)(function* () {
        try {
          let res = yield _this10.jwproxy.command('/session', 'POST', {
            desiredCapabilities: _this10.capabilities
          });

          if (res.status) {
            throw new Error(res.value.message);
          }
        } catch (err) {
          log.errorAndThrow(`Failed to start Chromedriver session: ${err.message}`);
        }
      }));

      _this10.changeState(Chromedriver.STATE_ONLINE);
    })();
  }

  stop(emitStates = true) {
    var _this11 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (emitStates) {
        _this11.changeState(Chromedriver.STATE_STOPPING);
      }

      try {
        yield _this11.jwproxy.command('', 'DELETE');
        yield _this11.proc.stop('SIGTERM', 20000);

        if (emitStates) {
          _this11.changeState(Chromedriver.STATE_STOPPED);
        }
      } catch (e) {
        log.error(e);
      }
    })();
  }

  changeState(state) {
    this.state = state;
    log.debug(`Changed state to '${state}'`);
    this.emit(Chromedriver.EVENT_CHANGED, {
      state
    });
  }

  sendCommand(url, method, body) {
    var _this12 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this12.jwproxy.command(url, method, body);
    })();
  }

  proxyReq(req, res) {
    var _this13 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this13.jwproxy.proxyReqRes(req, res);
    })();
  }

  killAll() {
    var _this14 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let cmd;

      if (_appiumSupport.system.isWindows()) {
        cmd = "FOR /F \"usebackq tokens=5\" %a in (`netstat -nao ^| " + "findstr /R /C:\"" + _this14.proxyPort + " \"`) do (" + "FOR /F \"usebackq\" %b in (`TASKLIST /FI \"PID eq %a\" ^| " + "findstr /I chromedriver.exe`) do (IF NOT %b==\"\" TASKKILL " + "/F /PID %a))";
      } else {
        cmd = `pkill -15 -f "${_this14.chromedriver}.*--port=${_this14.proxyPort}"`;
      }

      log.debug(`Killing any old chromedrivers, running: ${cmd}`);

      try {
        yield _bluebird.default.promisify(_child_process.default.exec)(cmd);
        log.debug("Successfully cleaned up old chromedrivers");
      } catch (err) {
        log.warn("No old chromedrivers seemed to exist");
      }

      if (_this14.adb) {
        log.debug(`Cleaning any old adb forwarded port socket connections`);

        try {
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = (yield _this14.adb.getForwardList())[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              let conn = _step5.value;

              if (conn.indexOf('webview_devtools') !== -1) {
                let params = conn.split(/\s+/);

                if (params.length > 1) {
                  yield _this14.adb.removePortForward(params[1].replace(/[\D]*/, ''));
                }
              }
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                _iterator5.return();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        } catch (err) {
          log.warn(`Unable to clean forwarded ports. Error: '${err.message}'. Continuing.`);
        }
      }
    })();
  }

  hasWorkingWebview() {
    var _this15 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _this15.jwproxy.command('/url', 'GET');
        return true;
      } catch (e) {
        return false;
      }
    })();
  }

}

exports.Chromedriver = Chromedriver;
Chromedriver.EVENT_ERROR = 'chromedriver_error';
Chromedriver.EVENT_CHANGED = 'stateChanged';
Chromedriver.STATE_STOPPED = 'stopped';
Chromedriver.STATE_STARTING = 'starting';
Chromedriver.STATE_ONLINE = 'online';
Chromedriver.STATE_STOPPING = 'stopping';
Chromedriver.STATE_RESTARTING = 'restarting';
var _default = Chromedriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
