"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const should = _chai.default.should();

_chai.default.use(_chaiAsPromised.default);

function baseDriverE2ETests(DriverClass, defaultCaps = {}) {
  describe('BaseDriver (e2e)', function () {
    let baseServer,
        d = new DriverClass();
    before((0, _asyncToGenerator2.default)(function* () {
      baseServer = yield (0, _2.server)((0, _2.routeConfiguringFunction)(d), 8181);
    }));
    after((0, _asyncToGenerator2.default)(function* () {
      yield baseServer.close();
    }));

    function startSession(caps) {
      return (0, _requestPromise.default)({
        url: 'http://localhost:8181/wd/hub/session',
        method: 'POST',
        json: {
          desiredCapabilities: caps,
          requiredCapabilities: {}
        }
      });
    }

    function endSession(id) {
      return (0, _requestPromise.default)({
        url: `http://localhost:8181/wd/hub/session/${id}`,
        method: 'DELETE',
        json: true,
        simple: false
      });
    }

    function getSession(id) {
      return (0, _requestPromise.default)({
        url: `http://localhost:8181/wd/hub/session/${id}`,
        method: 'GET',
        json: true,
        simple: false
      });
    }

    describe('session handling', function () {
      it('should create session and retrieve a session id, then delete it', (0, _asyncToGenerator2.default)(function* () {
        let res = yield (0, _requestPromise.default)({
          url: 'http://localhost:8181/wd/hub/session',
          method: 'POST',
          json: {
            desiredCapabilities: defaultCaps,
            requiredCapabilities: {}
          },
          simple: false,
          resolveWithFullResponse: true
        });
        res.statusCode.should.equal(200);
        res.body.status.should.equal(0);
        should.exist(res.body.sessionId);
        res.body.value.should.eql(defaultCaps);
        res = yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'DELETE',
          json: true,
          simple: false,
          resolveWithFullResponse: true
        });
        res.statusCode.should.equal(200);
        res.body.status.should.equal(0);
        should.equal(d.sessionId, null);
      }));
    });
    it.skip('should throw NYI for commands not implemented', (0, _asyncToGenerator2.default)(function* () {}));
    describe('command timeouts', function () {
      function startTimeoutSession(timeout) {
        let caps = _lodash.default.clone(defaultCaps);

        caps.newCommandTimeout = timeout;
        return startSession(caps);
      }

      d.findElement = function () {
        return 'foo';
      }.bind(d);

      d.findElements = (0, _asyncToGenerator2.default)(function* () {
        yield _bluebird.default.delay(200);
        return ['foo'];
      }).bind(d);
      it('should set a default commandTimeout', (0, _asyncToGenerator2.default)(function* () {
        let newSession = yield startTimeoutSession();
        d.newCommandTimeoutMs.should.be.above(0);
        yield endSession(newSession.sessionId);
      }));
      it('should timeout on commands using commandTimeout cap', (0, _asyncToGenerator2.default)(function* () {
        let newSession = yield startTimeoutSession(0.25);
        yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/element`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        yield _bluebird.default.delay(400);
        let res = yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'GET',
          json: true,
          simple: false
        });
        res.status.should.equal(6);
        should.equal(d.sessionId, null);
        res = yield endSession(newSession.sessionId);
        res.status.should.equal(6);
      }));
      it('should not timeout with commandTimeout of false', (0, _asyncToGenerator2.default)(function* () {
        let newSession = yield startTimeoutSession(0.1);
        let start = Date.now();
        let res = yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/elements`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        (Date.now() - start).should.be.above(150);
        res.value.should.eql(['foo']);
        yield endSession(newSession.sessionId);
      }));
      it('should not timeout with commandTimeout of 0', (0, _asyncToGenerator2.default)(function* () {
        d.newCommandTimeoutMs = 2;
        let newSession = yield startTimeoutSession(0);
        yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/element`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        yield _bluebird.default.delay(400);
        let res = yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'GET',
          json: true,
          simple: false
        });
        res.status.should.equal(0);
        res = yield endSession(newSession.sessionId);
        res.status.should.equal(0);
        d.newCommandTimeoutMs = 60 * 1000;
      }));
      it('should not timeout if its just the command taking awhile', (0, _asyncToGenerator2.default)(function* () {
        let newSession = yield startTimeoutSession(0.25);
        yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}/element`,
          method: 'POST',
          json: {
            using: 'name',
            value: 'foo'
          }
        });
        yield _bluebird.default.delay(400);
        let res = yield (0, _requestPromise.default)({
          url: `http://localhost:8181/wd/hub/session/${d.sessionId}`,
          method: 'GET',
          json: true,
          simple: false
        });
        res.status.should.equal(6);
        should.equal(d.sessionId, null);
        res = yield endSession(newSession.sessionId);
        res.status.should.equal(6);
      }));
      it('should not have a timer running before or after a session', (0, _asyncToGenerator2.default)(function* () {
        should.not.exist(d.noCommandTimer);
        let newSession = yield startTimeoutSession(0.25);
        newSession.sessionId.should.equal(d.sessionId);
        should.exist(d.noCommandTimer);
        yield endSession(newSession.sessionId);
        should.not.exist(d.noCommandTimer);
      }));
    });
    describe('settings api', function () {
      before(function () {
        d.settings = new _2.DeviceSettings({
          ignoreUnimportantViews: false
        });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be.false;
      });
      it('should throw error when updateSettings method is not defined', (0, _asyncToGenerator2.default)(function* () {
        yield d.settings.update({
          ignoreUnimportantViews: true
        }).should.eventually.be.rejectedWith('onSettingsUpdate');
      }));
      it('should throw error for invalid update object', (0, _asyncToGenerator2.default)(function* () {
        yield d.settings.update('invalid json').should.eventually.be.rejectedWith('JSON');
      }));
    });
    describe('unexpected exits', function () {
      it('should reject a current command when the driver crashes', (0, _asyncToGenerator2.default)(function* () {
        d._oldGetStatus = d.getStatus;
        d.getStatus = (0, _asyncToGenerator2.default)(function* () {
          yield _bluebird.default.delay(5000);
        }).bind(d);
        let p = (0, _requestPromise.default)({
          url: 'http://localhost:8181/wd/hub/status',
          method: 'GET',
          json: true,
          simple: false
        });
        yield _bluebird.default.delay(100);
        d.startUnexpectedShutdown(new Error('Crashytimes'));
        let res = yield p;
        res.status.should.equal(13);
        res.value.message.should.contain('Crashytimes');
        yield d.onUnexpectedShutdown.should.be.rejectedWith('Crashytimes');
      }));
    });
    describe('event timings', function () {
      it('should not add timings if not using opt-in cap', (0, _asyncToGenerator2.default)(function* () {
        let session = yield startSession(defaultCaps);
        let res = yield getSession(session.sessionId);
        should.not.exist(res.events);
        yield endSession(session.sessionId);
      }));
      it('should add start session timings', (0, _asyncToGenerator2.default)(function* () {
        let caps = Object.assign({}, defaultCaps, {
          eventTimings: true
        });
        let session = yield startSession(caps);
        let res = (yield getSession(session.sessionId)).value;
        should.exist(res.events);
        should.exist(res.events.newSessionRequested);
        should.exist(res.events.newSessionStarted);
        res.events.newSessionRequested[0].should.be.a('number');
        res.events.newSessionStarted[0].should.be.a('number');
        yield endSession(session.sessionId);
      }));
    });
  });
}

var _default = baseDriverE2ETests;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
