"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _path = _interopRequireDefault(require("path"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _appiumSupport = require("appium-support");

var _helpers = require("../../lib/basedriver/helpers");

var _http = _interopRequireDefault(require("http"));

var _finalhandler = _interopRequireDefault(require("finalhandler"));

var _serveStatic = _interopRequireDefault(require("serve-static"));

var _contentDisposition = _interopRequireDefault(require("content-disposition"));

var _bluebird = _interopRequireDefault(require("bluebird"));

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

function getFixture(file) {
  return _path.default.resolve(__dirname, '..', '..', '..', 'test', 'basedriver', 'fixtures', file);
}

describe('app download and configuration', function () {
  describe('configureApp', function () {
    it('should get the path for a local .app', (0, _asyncToGenerator2.default)(function* () {
      let newAppPath = yield (0, _helpers.configureApp)(getFixture('FakeIOSApp.app'), '.app');
      newAppPath.should.contain('FakeIOSApp.app');
      let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
      contents.should.eql('this is not really an app\n');
    }));
    it('should get the path for a local .apk', (0, _asyncToGenerator2.default)(function* () {
      let newAppPath = yield (0, _helpers.configureApp)(getFixture('FakeAndroidApp.apk'), '.apk');
      newAppPath.should.contain('FakeAndroidApp.apk');
      let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
      contents.should.eql('this is not really an apk\n');
    }));
    it('should unzip and get the path for a local .app.zip', (0, _asyncToGenerator2.default)(function* () {
      let newAppPath = yield (0, _helpers.configureApp)(getFixture('FakeIOSApp.app.zip'), '.app');
      newAppPath.should.contain('FakeIOSApp.app');
      let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
      contents.should.eql('this is not really an app\n');
    }));
    it('should unzip and get the path for a local .ipa', (0, _asyncToGenerator2.default)(function* () {
      let newAppPath = yield (0, _helpers.configureApp)(getFixture('FakeIOSApp.ipa'), '.app');
      newAppPath.should.contain('FakeIOSApp.app');
      let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
      contents.should.eql('this is not really an app\n');
    }));
    it('should fail for a bad zip file', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _helpers.configureApp)(getFixture('BadZippedApp.zip'), '.app').should.be.rejectedWith(/PK/);
    }));
    it('should fail if extensions do not match', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _helpers.configureApp)(getFixture('FakeIOSApp.app'), '.wrong').should.be.rejectedWith(/did not have extension/);
    }));
    it('should fail if zip file does not contain an app whose extension matches', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _helpers.configureApp)(getFixture('FakeIOSApp.app.zip'), '.wrong').should.be.rejectedWith(/did not have extension/);
    }));
    describe('should download an app from the web', function () {
      const port = 8000;
      const serverUrl = `http://localhost:${port}`;
      describe('server not available', function () {
        it('should handle server not available', (0, _asyncToGenerator2.default)(function* () {
          yield (0, _helpers.configureApp)(`${serverUrl}/FakeIOSApp.app.zip`, '.app').should.eventually.be.rejectedWith(/ECONNREFUSED/);
        }));
      });
      describe('server available', function () {
        let server;
        before(function () {
          const dir = _path.default.resolve(__dirname, '..', '..', '..', 'test', 'basedriver', 'fixtures');

          const serve = (0, _serveStatic.default)(dir, {
            index: false,
            setHeaders: (res, path) => {
              res.setHeader('Content-Disposition', (0, _contentDisposition.default)(path));
            }
          });
          server = _http.default.createServer(function (req, res) {
            if (req.url.indexOf('missing') !== -1) {
              res.writeHead(404);
              res.end();
              return;
            }

            if (req.url.indexOf('mime-zip') !== -1) {
              res.setHeader('content-type', 'application/zip');
            } else if (req.url.indexOf('mime-bip') !== 1) {
              res.setHeader('content-type', 'application/bip');
            }

            serve(req, res, (0, _finalhandler.default)(req, res));
          });
          const close = server.close.bind(server);
          server.close = (0, _asyncToGenerator2.default)(function* () {
            yield _bluebird.default.delay(1000);
            return yield new _bluebird.default((resolve, reject) => {
              server.on('close', resolve);
              close(err => {
                if (err) reject(err);
              });
            });
          });
          server.listen(port);
        });
        after((0, _asyncToGenerator2.default)(function* () {
          yield server.close();
        }));
        it('should download zip file', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeIOSApp.app.zip`, '.app');
          newAppPath.should.contain('FakeIOSApp.app');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an app\n');
        }));
        it('should download zip file with query string', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeIOSApp.app.zip?sv=abc&sr=def`, '.app');
          newAppPath.should.contain('.app');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an app\n');
        }));
        it('should download an app file', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeIOSApp.app`, '.app');
          newAppPath.should.contain('.app');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an app\n');
        }));
        it('should accept multiple extensions', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeIOSApp.app.zip`, ['.app', '.aab']);
          newAppPath.should.contain('FakeIOSApp.app');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an app\n');
        }));
        it('should download an apk file', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeAndroidApp.apk`, '.apk');
          newAppPath.should.contain('.apk');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an apk\n');
        }));
        it('should handle zip file that cannot be downloaded', (0, _asyncToGenerator2.default)(function* () {
          yield (0, _helpers.configureApp)(`${serverUrl}/missing/FakeIOSApp.app.zip`, '.app').should.eventually.be.rejectedWith(/Problem downloading app from url/);
        }));
        it('should handle invalid protocol', (0, _asyncToGenerator2.default)(function* () {
          yield (0, _helpers.configureApp)('file://C:/missing/FakeIOSApp.app.zip', '.app').should.eventually.be.rejectedWith(/is not supported/);
          yield (0, _helpers.configureApp)('ftp://localhost:8000/missing/FakeIOSApp.app.zip', '.app').should.eventually.be.rejectedWith(/is not supported/);
        }));
        it('should handle missing file in Windows path format', (0, _asyncToGenerator2.default)(function* () {
          yield (0, _helpers.configureApp)('C:\\missing\\FakeIOSApp.app.zip', '.app').should.eventually.be.rejectedWith(/does not exist or is not accessible/);
        }));
        it('should recognize zip mime types and unzip the downloaded file', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeAndroidApp.asd?mime-zip`, '.apk');
          newAppPath.should.contain('FakeAndroidApp.apk');
          newAppPath.should.not.contain('.asd');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an apk\n');
        }));
        it('should recognize zip mime types and unzip the downloaded file with query string', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeAndroidApp.asd?mime-zip&sv=abc&sr=def`, '.apk');
          newAppPath.should.contain('FakeAndroidApp.apk');
          newAppPath.should.not.contain('.asd');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an apk\n');
        }));
        it('should treat an unknown mime type as an app', (0, _asyncToGenerator2.default)(function* () {
          let newAppPath = yield (0, _helpers.configureApp)(`${serverUrl}/FakeAndroidApp.apk?mime-bip`, '.apk');
          newAppPath.should.contain('.apk');
          let contents = yield _appiumSupport.fs.readFile(newAppPath, 'utf8');
          contents.should.eql('this is not really an apk\n');
        }));
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
