"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _2 = require("../..");

var _sinon = _interopRequireDefault(require("sinon"));

const should = _chai.default.should();

_chai.default.use(_chaiAsPromised.default);

function baseDriverUnitTests(DriverClass, defaultCaps = {}) {
  const w3cCaps = {
    alwaysMatch: Object.assign({}, defaultCaps, {
      platformName: 'Fake',
      deviceName: 'Commodore 64'
    }),
    firstMatch: [{}]
  };
  describe('BaseDriver', function () {
    let d;
    beforeEach(function () {
      d = new DriverClass();
    });
    afterEach((0, _asyncToGenerator2.default)(function* () {
      yield d.deleteSession();
    }));
    it('should return an empty status object', (0, _asyncToGenerator2.default)(function* () {
      let status = yield d.getStatus();
      status.should.eql({});
    }));
    it('should return a sessionId from createSession', (0, _asyncToGenerator2.default)(function* () {
      let _ref4 = yield d.createSession(defaultCaps),
          _ref5 = (0, _slicedToArray2.default)(_ref4, 1),
          sessId = _ref5[0];

      should.exist(sessId);
      sessId.should.be.a('string');
      sessId.length.should.be.above(5);
    }));
    it('should not be able to start two sessions without closing the first', (0, _asyncToGenerator2.default)(function* () {
      yield d.createSession(defaultCaps);
      yield d.createSession(defaultCaps).should.eventually.be.rejectedWith('session');
    }));
    it('should be able to delete a session', (0, _asyncToGenerator2.default)(function* () {
      let sessionId1 = yield d.createSession(defaultCaps);
      yield d.deleteSession();
      should.equal(d.sessionId, null);
      let sessionId2 = yield d.createSession(defaultCaps);
      sessionId1.should.not.eql(sessionId2);
    }));
    it('should get the current session', (0, _asyncToGenerator2.default)(function* () {
      let _ref9 = yield d.createSession(defaultCaps),
          _ref10 = (0, _slicedToArray2.default)(_ref9, 2),
          caps = _ref10[1];

      caps.should.equal((yield d.getSession()));
    }));
    it('should return sessions if no session exists', (0, _asyncToGenerator2.default)(function* () {
      let sessions = yield d.getSessions();
      sessions.length.should.equal(0);
    }));
    it('should return sessions', (0, _asyncToGenerator2.default)(function* () {
      let caps = _lodash.default.clone(defaultCaps);

      caps.a = 'cap';
      yield d.createSession(caps);
      let sessions = yield d.getSessions();
      sessions.length.should.equal(1);
      sessions[0].should.eql({
        id: d.sessionId,
        capabilities: caps
      });
    }));
    it('should fulfill an unexpected driver quit promise', (0, _asyncToGenerator2.default)(function* () {
      d.getStatus = (0, _asyncToGenerator2.default)(function* () {
        yield _bluebird.default.delay(100);
      }).bind(d);
      let cmdPromise = d.executeCommand('getStatus');
      yield _bluebird.default.delay(0);
      d.startUnexpectedShutdown(new Error('We crashed'));
      yield cmdPromise.should.be.rejectedWith(/We crashed/);
      yield d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/);
    }));
    it('should not allow commands in middle of unexpected shutdown', (0, _asyncToGenerator2.default)(function* () {
      d.oldDeleteSession = d.deleteSession;
      d.deleteSession = (0, _asyncToGenerator2.default)(function* () {
        yield _bluebird.default.delay(100);
        yield this.oldDeleteSession();
      }).bind(d);

      let caps = _lodash.default.clone(defaultCaps);

      yield d.createSession(caps);
      d.startUnexpectedShutdown(new Error('We crashed'));
      yield d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/);
      yield d.executeCommand('getSession').should.be.rejectedWith(/shut down/);
    }));
    it('should allow new commands after done shutting down', (0, _asyncToGenerator2.default)(function* () {
      d.oldDeleteSession = d.deleteSession;
      d.deleteSession = (0, _asyncToGenerator2.default)(function* () {
        yield _bluebird.default.delay(100);
        yield this.oldDeleteSession();
      }).bind(d);

      let caps = _lodash.default.clone(defaultCaps);

      yield d.createSession(caps);
      d.startUnexpectedShutdown(new Error('We crashed'));
      yield d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/);
      yield d.executeCommand('getSession').should.be.rejectedWith(/shut down/);
      yield _bluebird.default.delay(100);
      yield d.executeCommand('createSession', caps);
      yield d.deleteSession();
    }));
    it('should distinguish between W3C and JSONWP session', (0, _asyncToGenerator2.default)(function* () {
      yield d.executeCommand('createSession', Object.assign({}, defaultCaps, {
        platformName: 'Fake',
        deviceName: 'Commodore 64'
      }));
      d.protocol.should.equal('MJSONWP');
      yield d.executeCommand('deleteSession');
      yield d.executeCommand('createSession', null, null, {
        alwaysMatch: Object.assign({}, defaultCaps, {
          platformName: 'Fake',
          deviceName: 'Commodore 64'
        }),
        firstMatch: [{}]
      });
      d.protocol.should.equal('W3C');
    }));
    describe('protocol detection', function () {
      it('should use MJSONWP if only JSONWP caps are provided', (0, _asyncToGenerator2.default)(function* () {
        yield d.createSession(defaultCaps);
        d.protocol.should.equal('MJSONWP');
      }));
      it('should use W3C if only W3C caps are provided', (0, _asyncToGenerator2.default)(function* () {
        yield d.createSession(null, null, {
          alwaysMatch: defaultCaps,
          firstMatch: [{}]
        });
        d.protocol.should.equal('W3C');
      }));
    });
    it('should have a method to get driver for a session', (0, _asyncToGenerator2.default)(function* () {
      let _ref23 = yield d.createSession(defaultCaps),
          _ref24 = (0, _slicedToArray2.default)(_ref23, 1),
          sessId = _ref24[0];

      d.driverForSession(sessId).should.eql(d);
    }));
    describe('command queue', function () {
      let d = new DriverClass();
      let waitMs = 10;
      d.getStatus = (0, _asyncToGenerator2.default)(function* () {
        yield _bluebird.default.delay(waitMs);
        return Date.now();
      }).bind(d);
      d.getSessions = (0, _asyncToGenerator2.default)(function* () {
        yield _bluebird.default.delay(waitMs);
        throw new Error('multipass');
      }).bind(d);
      afterEach(function () {
        d.clearNewCommandTimeout();
      });
      it('should queue commands and.executeCommand/respond in the order received', (0, _asyncToGenerator2.default)(function* () {
        let numCmds = 10;
        let cmds = [];

        for (let i = 0; i < numCmds; i++) {
          cmds.push(d.executeCommand('getStatus'));
        }

        let results = yield _bluebird.default.all(cmds);

        for (let i = 1; i < numCmds; i++) {
          if (results[i] <= results[i - 1]) {
            throw new Error('Got result out of order');
          }
        }
      }));
      it('should handle errors correctly when queuing', (0, _asyncToGenerator2.default)(function* () {
        let numCmds = 10;
        let cmds = [];

        for (let i = 0; i < numCmds; i++) {
          if (i === 5) {
            cmds.push(d.executeCommand('getSessions'));
          } else {
            cmds.push(d.executeCommand('getStatus'));
          }
        }

        let results = yield _bluebird.default.settle(cmds);

        for (let i = 1; i < 5; i++) {
          if (results[i].value() <= results[i - 1].value()) {
            throw new Error('Got result out of order');
          }
        }

        results[5].reason().message.should.contain('multipass');

        for (let i = 7; i < numCmds; i++) {
          if (results[i].value() <= results[i - 1].value()) {
            throw new Error('Got result out of order');
          }
        }
      }));
      it('should not care if queue empties for a bit', (0, _asyncToGenerator2.default)(function* () {
        let numCmds = 10;
        let cmds = [];

        for (let i = 0; i < numCmds; i++) {
          cmds.push(d.executeCommand('getStatus'));
        }

        let results = yield _bluebird.default.all(cmds);
        cmds = [];

        for (let i = 0; i < numCmds; i++) {
          cmds.push(d.executeCommand('getStatus'));
        }

        results = yield _bluebird.default.all(cmds);

        for (let i = 1; i < numCmds; i++) {
          if (results[i] <= results[i - 1]) {
            throw new Error('Got result out of order');
          }
        }
      }));
    });
    describe('timeouts', function () {
      before((0, _asyncToGenerator2.default)(function* () {
        yield d.createSession(defaultCaps);
      }));
      describe('command', function () {
        it('should exist by default', function () {
          d.newCommandTimeoutMs.should.equal(60000);
        });
        it('should be settable through `timeouts`', (0, _asyncToGenerator2.default)(function* () {
          yield d.timeouts('command', 20);
          d.newCommandTimeoutMs.should.equal(20);
        }));
      });
      describe('implicit', function () {
        it('should not exist by default', function () {
          d.implicitWaitMs.should.equal(0);
        });
        it('should be settable through `timeouts`', (0, _asyncToGenerator2.default)(function* () {
          yield d.timeouts('implicit', 20);
          d.implicitWaitMs.should.equal(20);
        }));
      });
    });
    describe('timeouts (W3C)', function () {
      beforeEach((0, _asyncToGenerator2.default)(function* () {
        yield d.createSession(null, null, w3cCaps);
      }));
      afterEach((0, _asyncToGenerator2.default)(function* () {
        yield d.deleteSession();
      }));
      it('should get timeouts that we set', (0, _asyncToGenerator2.default)(function* () {
        yield d.timeouts(undefined, undefined, undefined, undefined, 1000);
        yield d.getTimeouts().should.eventually.have.property('implicit', 1000);
        yield d.timeouts('command', 2000);
        yield d.getTimeouts().should.eventually.deep.equal({
          implicit: 1000,
          command: 2000
        });
        yield d.timeouts(undefined, undefined, undefined, undefined, 3000);
        yield d.getTimeouts().should.eventually.deep.equal({
          implicit: 3000,
          command: 2000
        });
      }));
    });
    describe('reset compatibility', function () {
      it('should not allow both fullReset and noReset to be true', (0, _asyncToGenerator2.default)(function* () {
        let newCaps = Object.assign({}, defaultCaps, {
          fullReset: true,
          noReset: true
        });
        yield d.createSession(newCaps).should.eventually.be.rejectedWith(/noReset.+fullReset/);
      }));
    });
    describe('proxying', function () {
      let sessId;
      beforeEach((0, _asyncToGenerator2.default)(function* () {
        var _ref38 = yield d.createSession(defaultCaps);

        var _ref39 = (0, _slicedToArray2.default)(_ref38, 1);

        sessId = _ref39[0];
      }));
      describe('#proxyActive', function () {
        it('should exist', function () {
          d.proxyActive.should.be.an.instanceof(Function);
        });
        it('should return false', function () {
          d.proxyActive(sessId).should.be.false;
        });
        it('should throw an error when sessionId is wrong', function () {
          (() => {
            d.proxyActive('aaa');
          }).should.throw;
        });
      });
      describe('#getProxyAvoidList', function () {
        it('should exist', function () {
          d.getProxyAvoidList.should.be.an.instanceof(Function);
        });
        it('should return an array', function () {
          d.getProxyAvoidList(sessId).should.be.an.instanceof(Array);
        });
        it('should throw an error when sessionId is wrong', function () {
          (() => {
            d.getProxyAvoidList('aaa');
          }).should.throw;
        });
      });
      describe('#canProxy', function () {
        it('should have a #canProxy method', function () {
          d.canProxy.should.be.an.instanceof(Function);
        });
        it('should return false from #canProxy', function () {
          d.canProxy(sessId).should.be.false;
        });
        it('should throw an error when sessionId is wrong', function () {
          (() => {
            d.canProxy();
          }).should.throw;
        });
      });
      describe('#proxyRouteIsAvoided', function () {
        it('should validate form of avoidance list', function () {
          const avoidStub = _sinon.default.stub(d, 'getProxyAvoidList');

          avoidStub.returns([['POST', /\/foo/], ['GET']]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.returns([['POST', /\/foo/], ['GET', /^foo/, 'bar']]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.restore();
        });
        it('should reject bad http methods', function () {
          const avoidStub = _sinon.default.stub(d, 'getProxyAvoidList');

          avoidStub.returns([['POST', /^foo/], ['BAZETE', /^bar/]]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.restore();
        });
        it('should reject non-regex routes', function () {
          const avoidStub = _sinon.default.stub(d, 'getProxyAvoidList');

          avoidStub.returns([['POST', /^foo/], ['GET', '/bar']]);
          (() => {
            d.proxyRouteIsAvoided();
          }).should.throw;
          avoidStub.restore();
        });
        it('should return true for routes in the avoid list', function () {
          const avoidStub = _sinon.default.stub(d, 'getProxyAvoidList');

          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'POST', '/foo/bar').should.be.true;
          avoidStub.restore();
        });
        it('should strip away any wd/hub prefix', function () {
          const avoidStub = _sinon.default.stub(d, 'getProxyAvoidList');

          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'POST', '/wd/hub/foo/bar').should.be.true;
          avoidStub.restore();
        });
        it('should return false for routes not in the avoid list', function () {
          const avoidStub = _sinon.default.stub(d, 'getProxyAvoidList');

          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'GET', '/foo/bar').should.be.false;
          d.proxyRouteIsAvoided(null, 'POST', '/boo').should.be.false;
          avoidStub.restore();
        });
      });
    });
    describe('event timing framework', function () {
      let beforeStartTime;
      beforeEach((0, _asyncToGenerator2.default)(function* () {
        beforeStartTime = Date.now();
        d.shouldValidateCaps = false;
        yield d.executeCommand('createSession', defaultCaps);
      }));
      describe('#eventHistory', function () {
        it('should have an eventHistory property', function () {
          should.exist(d.eventHistory);
          should.exist(d.eventHistory.commands);
        });
        it('should have a session start timing after session start', function () {
          let _d$eventHistory = d.eventHistory,
              newSessionRequested = _d$eventHistory.newSessionRequested,
              newSessionStarted = _d$eventHistory.newSessionStarted;
          newSessionRequested.should.have.length(1);
          newSessionStarted.should.have.length(1);
          newSessionRequested[0].should.be.a('number');
          newSessionStarted[0].should.be.a('number');
          (newSessionRequested[0] >= beforeStartTime).should.be.true;
          (newSessionStarted[0] >= newSessionRequested[0]).should.be.true;
        });
        it('should include a commands list', (0, _asyncToGenerator2.default)(function* () {
          yield d.executeCommand('getStatus', []);
          d.eventHistory.commands.length.should.equal(2);
          d.eventHistory.commands[1].cmd.should.equal('getStatus');
          d.eventHistory.commands[1].startTime.should.be.a('number');
          d.eventHistory.commands[1].endTime.should.be.a('number');
        }));
      });
      describe('#logEvent', function () {
        it('should allow logging arbitrary events', function () {
          d.logEvent('foo');
          d.eventHistory.foo[0].should.be.a('number');
          (d.eventHistory.foo[0] >= beforeStartTime).should.be.true;
        });
        it('should not allow reserved or oddly formed event names', function () {
          (() => {
            d.logEvent('commands');
          }).should.throw();
          (() => {
            d.logEvent(1);
          }).should.throw();
          (() => {
            d.logEvent({});
          }).should.throw();
        });
      });
      it('should allow logging the same event multiple times', function () {
        d.logEvent('bar');
        d.logEvent('bar');
        d.eventHistory.bar.should.have.length(2);
        d.eventHistory.bar[1].should.be.a('number');
        (d.eventHistory.bar[1] >= d.eventHistory.bar[0]).should.be.true;
      });
      describe('getSession decoration', function () {
        it('should decorate getSession response if opt-in cap is provided', (0, _asyncToGenerator2.default)(function* () {
          let res = yield d.getSession();
          should.not.exist(res.events);
          d.caps.eventTimings = true;
          res = yield d.getSession();
          should.exist(res.events);
          should.exist(res.events.newSessionRequested);
          res.events.newSessionRequested[0].should.be.a('number');
        }));
      });
    });
    describe('.reset', function () {
      it('should reset as W3C if the original session was W3C', (0, _asyncToGenerator2.default)(function* () {
        const caps = {
          alwaysMatch: Object.assign({}, {
            app: 'Fake',
            deviceName: 'Fake',
            automationName: 'Fake',
            platformName: 'Fake'
          }, defaultCaps),
          firstMatch: [{}]
        };
        yield d.createSession(undefined, undefined, caps);
        d.protocol.should.equal('W3C');
        yield d.reset();
        d.protocol.should.equal('W3C');
      }));
      it('should reset as MJSONWP if the original session was MJSONWP', (0, _asyncToGenerator2.default)(function* () {
        const caps = Object.assign({}, {
          app: 'Fake',
          deviceName: 'Fake',
          automationName: 'Fake',
          platformName: 'Fake'
        }, defaultCaps);
        yield d.createSession(caps);
        d.protocol.should.equal('MJSONWP');
        yield d.reset();
        d.protocol.should.equal('MJSONWP');
      }));
    });
  });
  describe('DeviceSettings', function () {
    it('should not hold on to reference of defaults in constructor', function () {
      let obj = {
        foo: 'bar'
      };
      let d1 = new _2.DeviceSettings(obj);
      let d2 = new _2.DeviceSettings(obj);
      d1._settings.foo = 'baz';

      d1._settings.should.not.eql(d2._settings);
    });
  });
}

var _default = baseDriverUnitTests;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9kcml2ZXItdGVzdHMuanMiXSwibmFtZXMiOlsic2hvdWxkIiwiY2hhaSIsInVzZSIsImNoYWlBc1Byb21pc2VkIiwiYmFzZURyaXZlclVuaXRUZXN0cyIsIkRyaXZlckNsYXNzIiwiZGVmYXVsdENhcHMiLCJ3M2NDYXBzIiwiYWx3YXlzTWF0Y2giLCJPYmplY3QiLCJhc3NpZ24iLCJwbGF0Zm9ybU5hbWUiLCJkZXZpY2VOYW1lIiwiZmlyc3RNYXRjaCIsImRlc2NyaWJlIiwiZCIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJkZWxldGVTZXNzaW9uIiwiaXQiLCJzdGF0dXMiLCJnZXRTdGF0dXMiLCJlcWwiLCJjcmVhdGVTZXNzaW9uIiwic2Vzc0lkIiwiZXhpc3QiLCJiZSIsImEiLCJsZW5ndGgiLCJhYm92ZSIsImV2ZW50dWFsbHkiLCJyZWplY3RlZFdpdGgiLCJzZXNzaW9uSWQxIiwiZXF1YWwiLCJzZXNzaW9uSWQiLCJzZXNzaW9uSWQyIiwibm90IiwiY2FwcyIsImdldFNlc3Npb24iLCJzZXNzaW9ucyIsImdldFNlc3Npb25zIiwiXyIsImNsb25lIiwiaWQiLCJjYXBhYmlsaXRpZXMiLCJCIiwiZGVsYXkiLCJiaW5kIiwiY21kUHJvbWlzZSIsImV4ZWN1dGVDb21tYW5kIiwic3RhcnRVbmV4cGVjdGVkU2h1dGRvd24iLCJFcnJvciIsIm9uVW5leHBlY3RlZFNodXRkb3duIiwib2xkRGVsZXRlU2Vzc2lvbiIsInByb3RvY29sIiwiZHJpdmVyRm9yU2Vzc2lvbiIsIndhaXRNcyIsIkRhdGUiLCJub3ciLCJjbGVhck5ld0NvbW1hbmRUaW1lb3V0IiwibnVtQ21kcyIsImNtZHMiLCJpIiwicHVzaCIsInJlc3VsdHMiLCJhbGwiLCJzZXR0bGUiLCJ2YWx1ZSIsInJlYXNvbiIsIm1lc3NhZ2UiLCJjb250YWluIiwiYmVmb3JlIiwibmV3Q29tbWFuZFRpbWVvdXRNcyIsInRpbWVvdXRzIiwiaW1wbGljaXRXYWl0TXMiLCJ1bmRlZmluZWQiLCJnZXRUaW1lb3V0cyIsImhhdmUiLCJwcm9wZXJ0eSIsImRlZXAiLCJpbXBsaWNpdCIsImNvbW1hbmQiLCJuZXdDYXBzIiwiZnVsbFJlc2V0Iiwibm9SZXNldCIsInByb3h5QWN0aXZlIiwiYW4iLCJpbnN0YW5jZW9mIiwiRnVuY3Rpb24iLCJmYWxzZSIsInRocm93IiwiZ2V0UHJveHlBdm9pZExpc3QiLCJBcnJheSIsImNhblByb3h5IiwiYXZvaWRTdHViIiwic2lub24iLCJzdHViIiwicmV0dXJucyIsInByb3h5Um91dGVJc0F2b2lkZWQiLCJyZXN0b3JlIiwidHJ1ZSIsImJlZm9yZVN0YXJ0VGltZSIsInNob3VsZFZhbGlkYXRlQ2FwcyIsImV2ZW50SGlzdG9yeSIsImNvbW1hbmRzIiwibmV3U2Vzc2lvblJlcXVlc3RlZCIsIm5ld1Nlc3Npb25TdGFydGVkIiwiY21kIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsImxvZ0V2ZW50IiwiZm9vIiwiYmFyIiwicmVzIiwiZXZlbnRzIiwiZXZlbnRUaW1pbmdzIiwiYXBwIiwiYXV0b21hdGlvbk5hbWUiLCJyZXNldCIsIm9iaiIsImQxIiwiRGV2aWNlU2V0dGluZ3MiLCJkMiIsIl9zZXR0aW5ncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLE1BQU0sR0FBR0MsY0FBS0QsTUFBTCxFQUFmOztBQUNBQyxjQUFLQyxHQUFMLENBQVNDLHVCQUFUOztBQUlBLFNBQVNDLG1CQUFULENBQThCQyxXQUE5QixFQUEyQ0MsV0FBVyxHQUFHLEVBQXpELEVBQTZEO0FBQzNELFFBQU1DLE9BQU8sR0FBRztBQUNkQyxJQUFBQSxXQUFXLEVBQUVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLFdBQWxCLEVBQStCO0FBQzFDSyxNQUFBQSxZQUFZLEVBQUUsTUFENEI7QUFFMUNDLE1BQUFBLFVBQVUsRUFBRTtBQUY4QixLQUEvQixDQURDO0FBS2RDLElBQUFBLFVB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RUFBRjtBQVlELEtBNUJPLENBQVI7QUE2QkQsR0F2Y08sQ0FBUjtBQXljQW5CLEVBQUFBLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFZO0FBQ3JDSyxJQUFBQSxFQUFFLENBQUMsNERBQUQsRUFBK0QsWUFBWTtBQUMzRSxVQUFJb0csR0FBRyxHQUFHO0FBQUNSLFFBQUFBLEdBQUcsRUFBRTtBQUFOLE9BQVY7QUFDQSxVQUFJUyxFQUFFLEdBQUcsSUFBSUMsaUJBQUosQ0FBbUJGLEdBQW5CLENBQVQ7QUFDQSxVQUFJRyxFQUFFLEdBQUcsSUFBSUQsaUJBQUosQ0FBbUJGLEdBQW5CLENBQVQ7QUFDQUMsTUFBQUEsRUFBRSxDQUFDRyxTQUFILENBQWFaLEdBQWIsR0FBbUIsS0FBbkI7O0FBQ0FTLE1BQUFBLEVBQUUsQ0FBQ0csU0FBSCxDQUFhM0gsTUFBYixDQUFvQm9DLEdBQXBCLENBQXdCZCxHQUF4QixDQUE0Qm9HLEVBQUUsQ0FBQ0MsU0FBL0I7QUFDRCxLQU5DLENBQUY7QUFPRCxHQVJPLENBQVI7QUFTRDs7ZUFFY3ZILG1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgRGV2aWNlU2V0dGluZ3MgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbi8vIHdyYXAgdGhlc2UgdGVzdHMgaW4gYSBmdW5jdGlvbiBzbyB3ZSBjYW4gZXhwb3J0IHRoZSB0ZXN0cyBhbmQgcmUtdXNlIHRoZW1cbi8vIGZvciBhY3R1YWwgZHJpdmVyIGltcGxlbWVudGF0aW9uc1xuZnVuY3Rpb24gYmFzZURyaXZlclVuaXRUZXN0cyAoRHJpdmVyQ2xhc3MsIGRlZmF1bHRDYXBzID0ge30pIHtcbiAgY29uc3QgdzNjQ2FwcyA9IHtcbiAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENhcHMsIHtcbiAgICAgIHBsYXRmb3JtTmFtZTogJ0Zha2UnLFxuICAgICAgZGV2aWNlTmFtZTogJ0NvbW1vZG9yZSA2NCcsXG4gICAgfSksXG4gICAgZmlyc3RNYXRjaDogW3t9XSxcbiAgfTtcblxuICBkZXNjcmliZSgnQmFzZURyaXZlcicsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZDtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGQgPSBuZXcgRHJpdmVyQ2xhc3MoKTtcbiAgICB9KTtcbiAgICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBzdGF0dXMgb2JqZWN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHN0YXR1cyA9IGF3YWl0IGQuZ2V0U3RhdHVzKCk7XG4gICAgICBzdGF0dXMuc2hvdWxkLmVxbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHNlc3Npb25JZCBmcm9tIGNyZWF0ZVNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgc2hvdWxkLmV4aXN0KHNlc3NJZCk7XG4gICAgICBzZXNzSWQuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgc2Vzc0lkLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoNSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBiZSBhYmxlIHRvIHN0YXJ0IHR3byBzZXNzaW9ucyB3aXRob3V0IGNsb3NpbmcgdGhlIGZpcnN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKCdzZXNzaW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZGVsZXRlIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZXNzaW9uSWQxID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgIGxldCBzZXNzaW9uSWQyID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIHNlc3Npb25JZDEuc2hvdWxkLm5vdC5lcWwoc2Vzc2lvbklkMik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgY3VycmVudCBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IFssIGNhcHNdID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGNhcHMuc2hvdWxkLmVxdWFsKGF3YWl0IGQuZ2V0U2Vzc2lvbigpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlc3Npb25zIGlmIG5vIHNlc3Npb24gZXhpc3RzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlc3Npb25zID0gYXdhaXQgZC5nZXRTZXNzaW9ucygpO1xuICAgICAgc2Vzc2lvbnMubGVuZ3RoLnNob3VsZC5lcXVhbCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlc3Npb25zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGNhcHMgPSBfLmNsb25lKGRlZmF1bHRDYXBzKTtcbiAgICAgIGNhcHMuYSA9ICdjYXAnO1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGNhcHMpO1xuICAgICAgbGV0IHNlc3Npb25zID0gYXdhaXQgZC5nZXRTZXNzaW9ucygpO1xuXG4gICAgICBzZXNzaW9ucy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgc2Vzc2lvbnNbMF0uc2hvdWxkLmVxbCh7XG4gICAgICAgIGlkOiBkLnNlc3Npb25JZCxcbiAgICAgICAgY2FwYWJpbGl0aWVzOiBjYXBzXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZnVsZmlsbCBhbiB1bmV4cGVjdGVkIGRyaXZlciBxdWl0IHByb21pc2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBtYWtlIGEgY29tbWFuZCB0aGF0IHdpbGwgd2FpdCBhIGJpdCBzbyB3ZSBjYW4gY3Jhc2ggd2hpbGUgaXQncyBydW5uaW5nXG4gICAgICBkLmdldFN0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgfS5iaW5kKGQpO1xuICAgICAgbGV0IGNtZFByb21pc2UgPSBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoMCk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IGNtZFByb21pc2Uuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvV2UgY3Jhc2hlZC8pO1xuICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9XZSBjcmFzaGVkLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyBjb21tYW5kcyBpbiBtaWRkbGUgb2YgdW5leHBlY3RlZCBzaHV0ZG93bicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIG1ha2UgYSBjb21tYW5kIHRoYXQgd2lsbCB3YWl0IGEgYml0IHNvIHdlIGNhbiBjcmFzaCB3aGlsZSBpdCdzIHJ1bm5pbmdcbiAgICAgIGQub2xkRGVsZXRlU2Vzc2lvbiA9IGQuZGVsZXRlU2Vzc2lvbjtcbiAgICAgIGQuZGVsZXRlU2Vzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgICBhd2FpdCB0aGlzLm9sZERlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0uYmluZChkKTtcbiAgICAgIGxldCBjYXBzID0gXy5jbG9uZShkZWZhdWx0Q2Fwcyk7XG4gICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IGQub25VbmV4cGVjdGVkU2h1dGRvd24uc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvV2UgY3Jhc2hlZC8pO1xuICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnZ2V0U2Vzc2lvbicpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL3NodXQgZG93bi8pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBuZXcgY29tbWFuZHMgYWZ0ZXIgZG9uZSBzaHV0dGluZyBkb3duJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gbWFrZSBhIGNvbW1hbmQgdGhhdCB3aWxsIHdhaXQgYSBiaXQgc28gd2UgY2FuIGNyYXNoIHdoaWxlIGl0J3MgcnVubmluZ1xuICAgICAgZC5vbGREZWxldGVTZXNzaW9uID0gZC5kZWxldGVTZXNzaW9uO1xuICAgICAgZC5kZWxldGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICAgIGF3YWl0IHRoaXMub2xkRGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfS5iaW5kKGQpO1xuICAgICAgbGV0IGNhcHMgPSBfLmNsb25lKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihjYXBzKTtcbiAgICAgIGQuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24obmV3IEVycm9yKCdXZSBjcmFzaGVkJykpO1xuICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9XZSBjcmFzaGVkLyk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTZXNzaW9uJykuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvc2h1dCBkb3duLyk7XG4gICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgY2Fwcyk7XG4gICAgICBhd2FpdCBkLmRlbGV0ZVNlc3Npb24oKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGlzdGluZ3Vpc2ggYmV0d2VlbiBXM0MgYW5kIEpTT05XUCBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVGVzdCBKU09OV1BcbiAgICAgIGF3YWl0IGQuZXhlY3V0ZUNvbW1hbmQoJ2NyZWF0ZVNlc3Npb24nLCBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q2Fwcywge1xuICAgICAgICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ0NvbW1vZG9yZSA2NCcsXG4gICAgICB9KSk7XG5cbiAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdNSlNPTldQJyk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdkZWxldGVTZXNzaW9uJyk7XG5cbiAgICAgIC8vIFRlc3QgVzNDIChsZWF2ZSBmaXJzdCAyIGFyZ3MgbnVsbCBiZWNhdXNlIHRob3NlIGFyZSB0aGUgSlNPTldQIGFyZ3MpXG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgbnVsbCwgbnVsbCwge1xuICAgICAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENhcHMsIHtcbiAgICAgICAgICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgICAgICAgICBkZXZpY2VOYW1lOiAnQ29tbW9kb3JlIDY0JyxcbiAgICAgICAgfSksXG4gICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICB9KTtcblxuICAgICAgZC5wcm90b2NvbC5zaG91bGQuZXF1YWwoJ1czQycpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Byb3RvY29sIGRldGVjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgdXNlIE1KU09OV1AgaWYgb25seSBKU09OV1AgY2FwcyBhcmUgcHJvdmlkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdNSlNPTldQJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB1c2UgVzNDIGlmIG9ubHkgVzNDIGNhcHMgYXJlIHByb3ZpZGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwge2Fsd2F5c01hdGNoOiBkZWZhdWx0Q2FwcywgZmlyc3RNYXRjaDogW3t9XX0pO1xuICAgICAgICBkLnByb3RvY29sLnNob3VsZC5lcXVhbCgnVzNDJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBhIG1ldGhvZCB0byBnZXQgZHJpdmVyIGZvciBhIHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgZC5kcml2ZXJGb3JTZXNzaW9uKHNlc3NJZCkuc2hvdWxkLmVxbChkKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjb21tYW5kIHF1ZXVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGQgPSBuZXcgRHJpdmVyQ2xhc3MoKTtcblxuICAgICAgbGV0IHdhaXRNcyA9IDEwO1xuICAgICAgZC5nZXRTdGF0dXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkod2FpdE1zKTtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICB9LmJpbmQoZCk7XG5cbiAgICAgIGQuZ2V0U2Vzc2lvbnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkod2FpdE1zKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdWx0aXBhc3MnKTtcbiAgICAgIH0uYmluZChkKTtcblxuICAgICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBxdWV1ZSBjb21tYW5kcyBhbmQuZXhlY3V0ZUNvbW1hbmQvcmVzcG9uZCBpbiB0aGUgb3JkZXIgcmVjZWl2ZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBudW1DbWRzID0gMTA7XG4gICAgICAgIGxldCBjbWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgY21kcy5wdXNoKGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFN0YXR1cycpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IEIuYWxsKGNtZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRzW2ldIDw9IHJlc3VsdHNbaSAtIDFdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIGNvcnJlY3RseSB3aGVuIHF1ZXVpbmcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBudW1DbWRzID0gMTA7XG4gICAgICAgIGxldCBjbWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgPT09IDUpIHtcbiAgICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTZXNzaW9ucycpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY21kcy5wdXNoKGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFN0YXR1cycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLnNldHRsZShjbWRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXS52YWx1ZSgpIDw9IHJlc3VsdHNbaSAtIDFdLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR290IHJlc3VsdCBvdXQgb2Ygb3JkZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0c1s1XS5yZWFzb24oKS5tZXNzYWdlLnNob3VsZC5jb250YWluKCdtdWx0aXBhc3MnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDc7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXS52YWx1ZSgpIDw9IHJlc3VsdHNbaSAtIDFdLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR290IHJlc3VsdCBvdXQgb2Ygb3JkZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIG5vdCBjYXJlIGlmIHF1ZXVlIGVtcHRpZXMgZm9yIGEgYml0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbnVtQ21kcyA9IDEwO1xuICAgICAgICBsZXQgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLmFsbChjbWRzKTtcbiAgICAgICAgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cyA9IGF3YWl0IEIuYWxsKGNtZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRzW2ldIDw9IHJlc3VsdHNbaSAtIDFdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd0aW1lb3V0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdjb21tYW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGV4aXN0IGJ5IGRlZmF1bHQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zLnNob3VsZC5lcXVhbCg2MDAwMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJlIHNldHRhYmxlIHRocm91Z2ggYHRpbWVvdXRzYCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjApO1xuICAgICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJ2ltcGxpY2l0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIG5vdCBleGlzdCBieSBkZWZhdWx0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQuaW1wbGljaXRXYWl0TXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBzZXR0YWJsZSB0aHJvdWdoIGB0aW1lb3V0c2AnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXdhaXQgZC50aW1lb3V0cygnaW1wbGljaXQnLCAyMCk7XG4gICAgICAgICAgZC5pbXBsaWNpdFdhaXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3RpbWVvdXRzIChXM0MpJywgZnVuY3Rpb24gKCkge1xuICAgICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB3M2NDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZ2V0IHRpbWVvdXRzIHRoYXQgd2Ugc2V0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgMTAwMCk7XG4gICAgICAgIGF3YWl0IGQuZ2V0VGltZW91dHMoKS5zaG91bGQuZXZlbnR1YWxseS5oYXZlLnByb3BlcnR5KCdpbXBsaWNpdCcsIDEwMDApO1xuICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjAwMCk7XG4gICAgICAgIGF3YWl0IGQuZ2V0VGltZW91dHMoKS5zaG91bGQuZXZlbnR1YWxseS5kZWVwLmVxdWFsKHtcbiAgICAgICAgICBpbXBsaWNpdDogMTAwMCxcbiAgICAgICAgICBjb21tYW5kOiAyMDAwLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgZC50aW1lb3V0cyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIDMwMDApO1xuICAgICAgICBhd2FpdCBkLmdldFRpbWVvdXRzKCkuc2hvdWxkLmV2ZW50dWFsbHkuZGVlcC5lcXVhbCh7XG4gICAgICAgICAgaW1wbGljaXQ6IDMwMDAsXG4gICAgICAgICAgY29tbWFuZDogMjAwMCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZXNldCBjb21wYXRpYmlsaXR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgYm90aCBmdWxsUmVzZXQgYW5kIG5vUmVzZXQgdG8gYmUgdHJ1ZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG5ld0NhcHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q2Fwcywge1xuICAgICAgICAgIGZ1bGxSZXNldDogdHJ1ZSxcbiAgICAgICAgICBub1Jlc2V0OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obmV3Q2Fwcykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKFxuICAgICAgICAgICAgL25vUmVzZXQuK2Z1bGxSZXNldC8pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgncHJveHlpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc2Vzc0lkO1xuICAgICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFtzZXNzSWRdID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJyNwcm94eUFjdGl2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBleGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLnByb3h5QWN0aXZlLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQucHJveHlBY3RpdmUoc2Vzc0lkKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gc2Vzc2lvbklkIGlzIHdyb25nJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlBY3RpdmUoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCcjZ2V0UHJveHlBdm9pZExpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5nZXRQcm94eUF2b2lkTGlzdC5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBhcnJheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLmdldFByb3h5QXZvaWRMaXN0KHNlc3NJZCkuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHNlc3Npb25JZCBpcyB3cm9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAoKCkgPT4geyBkLmdldFByb3h5QXZvaWRMaXN0KCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnI2NhblByb3h5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYSAjY2FuUHJveHkgbWV0aG9kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQuY2FuUHJveHkuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZnJvbSAjY2FuUHJveHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5jYW5Qcm94eShzZXNzSWQpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBzZXNzaW9uSWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgKCgpID0+IHsgZC5jYW5Qcm94eSgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCcjcHJveHlSb3V0ZUlzQXZvaWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBmb3JtIG9mIGF2b2lkYW5jZSBsaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IGF2b2lkU3R1YiA9IHNpbm9uLnN0dWIoZCwgJ2dldFByb3h5QXZvaWRMaXN0Jyk7XG4gICAgICAgICAgYXZvaWRTdHViLnJldHVybnMoW1snUE9TVCcsIC9cXC9mb28vXSwgWydHRVQnXV0pO1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlSb3V0ZUlzQXZvaWRlZCgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgICAgYXZvaWRTdHViLnJldHVybnMoW1snUE9TVCcsIC9cXC9mb28vXSwgWydHRVQnLCAvXmZvby8sICdiYXInXV0pO1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlSb3V0ZUlzQXZvaWRlZCgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgICAgYXZvaWRTdHViLnJlc3RvcmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmVqZWN0IGJhZCBodHRwIG1ldGhvZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15mb28vXSwgWydCQVpFVEUnLCAvXmJhci9dXSk7XG4gICAgICAgICAgKCgpID0+IHsgZC5wcm94eVJvdXRlSXNBdm9pZGVkKCk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgICBhdm9pZFN0dWIucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZWplY3Qgbm9uLXJlZ2V4IHJvdXRlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBhdm9pZFN0dWIgPSBzaW5vbi5zdHViKGQsICdnZXRQcm94eUF2b2lkTGlzdCcpO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXR1cm5zKFtbJ1BPU1QnLCAvXmZvby9dLCBbJ0dFVCcsICcvYmFyJ11dKTtcbiAgICAgICAgICAoKCkgPT4geyBkLnByb3h5Um91dGVJc0F2b2lkZWQoKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciByb3V0ZXMgaW4gdGhlIGF2b2lkIGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15cXC9mb28vXV0pO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnUE9TVCcsICcvZm9vL2JhcicpLnNob3VsZC5iZS50cnVlO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHN0cmlwIGF3YXkgYW55IHdkL2h1YiBwcmVmaXgnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15cXC9mb28vXV0pO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnUE9TVCcsICcvd2QvaHViL2Zvby9iYXInKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgICBhdm9pZFN0dWIucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIHJvdXRlcyBub3QgaW4gdGhlIGF2b2lkIGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15cXC9mb28vXV0pO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnR0VUJywgJy9mb28vYmFyJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnUE9TVCcsICcvYm9vJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZXZlbnQgdGltaW5nIGZyYW1ld29yaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBiZWZvcmVTdGFydFRpbWU7XG4gICAgICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZC5zaG91bGRWYWxpZGF0ZUNhcHMgPSBmYWxzZTtcbiAgICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnY3JlYXRlU2Vzc2lvbicsIGRlZmF1bHRDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJyNldmVudEhpc3RvcnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgaGF2ZSBhbiBldmVudEhpc3RvcnkgcHJvcGVydHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KGQuZXZlbnRIaXN0b3J5KTtcbiAgICAgICAgICBzaG91bGQuZXhpc3QoZC5ldmVudEhpc3RvcnkuY29tbWFuZHMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYSBzZXNzaW9uIHN0YXJ0IHRpbWluZyBhZnRlciBzZXNzaW9uIHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCB7bmV3U2Vzc2lvblJlcXVlc3RlZCwgbmV3U2Vzc2lvblN0YXJ0ZWR9ID0gZC5ldmVudEhpc3Rvcnk7XG4gICAgICAgICAgbmV3U2Vzc2lvblJlcXVlc3RlZC5zaG91bGQuaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgICAgbmV3U2Vzc2lvblN0YXJ0ZWQuc2hvdWxkLmhhdmUubGVuZ3RoKDEpO1xuICAgICAgICAgIG5ld1Nlc3Npb25SZXF1ZXN0ZWRbMF0uc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICAgIG5ld1Nlc3Npb25TdGFydGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICAobmV3U2Vzc2lvblJlcXVlc3RlZFswXSA+PSBiZWZvcmVTdGFydFRpbWUpLnNob3VsZC5iZS50cnVlO1xuICAgICAgICAgIChuZXdTZXNzaW9uU3RhcnRlZFswXSA+PSBuZXdTZXNzaW9uUmVxdWVzdGVkWzBdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbmNsdWRlIGEgY29tbWFuZHMgbGlzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnLCBbXSk7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuY29tbWFuZHMubGVuZ3RoLnNob3VsZC5lcXVhbCgyKTtcbiAgICAgICAgICBkLmV2ZW50SGlzdG9yeS5jb21tYW5kc1sxXS5jbWQuc2hvdWxkLmVxdWFsKCdnZXRTdGF0dXMnKTtcbiAgICAgICAgICBkLmV2ZW50SGlzdG9yeS5jb21tYW5kc1sxXS5zdGFydFRpbWUuc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICAgIGQuZXZlbnRIaXN0b3J5LmNvbW1hbmRzWzFdLmVuZFRpbWUuc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJyNsb2dFdmVudCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBsb2dnaW5nIGFyYml0cmFyeSBldmVudHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5sb2dFdmVudCgnZm9vJyk7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuZm9vWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICAoZC5ldmVudEhpc3RvcnkuZm9vWzBdID49IGJlZm9yZVN0YXJ0VGltZSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyByZXNlcnZlZCBvciBvZGRseSBmb3JtZWQgZXZlbnQgbmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIGQubG9nRXZlbnQoJ2NvbW1hbmRzJyk7XG4gICAgICAgICAgfSkuc2hvdWxkLnRocm93KCk7XG4gICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIGQubG9nRXZlbnQoMSk7XG4gICAgICAgICAgfSkuc2hvdWxkLnRocm93KCk7XG4gICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIGQubG9nRXZlbnQoe30pO1xuICAgICAgICAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBsb2dnaW5nIHRoZSBzYW1lIGV2ZW50IG11bHRpcGxlIHRpbWVzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLmxvZ0V2ZW50KCdiYXInKTtcbiAgICAgICAgZC5sb2dFdmVudCgnYmFyJyk7XG4gICAgICAgIGQuZXZlbnRIaXN0b3J5LmJhci5zaG91bGQuaGF2ZS5sZW5ndGgoMik7XG4gICAgICAgIGQuZXZlbnRIaXN0b3J5LmJhclsxXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgIChkLmV2ZW50SGlzdG9yeS5iYXJbMV0gPj0gZC5ldmVudEhpc3RvcnkuYmFyWzBdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJ2dldFNlc3Npb24gZGVjb3JhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBkZWNvcmF0ZSBnZXRTZXNzaW9uIHJlc3BvbnNlIGlmIG9wdC1pbiBjYXAgaXMgcHJvdmlkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGQuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgIHNob3VsZC5ub3QuZXhpc3QocmVzLmV2ZW50cyk7XG5cbiAgICAgICAgICBkLmNhcHMuZXZlbnRUaW1pbmdzID0gdHJ1ZTtcbiAgICAgICAgICByZXMgPSBhd2FpdCBkLmdldFNlc3Npb24oKTtcbiAgICAgICAgICBzaG91bGQuZXhpc3QocmVzLmV2ZW50cyk7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMubmV3U2Vzc2lvblJlcXVlc3RlZCk7XG4gICAgICAgICAgcmVzLmV2ZW50cy5uZXdTZXNzaW9uUmVxdWVzdGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnLnJlc2V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCByZXNldCBhcyBXM0MgaWYgdGhlIG9yaWdpbmFsIHNlc3Npb24gd2FzIFczQycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY2FwcyA9IHtcbiAgICAgICAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgYXBwOiAnRmFrZScsXG4gICAgICAgICAgICBkZXZpY2VOYW1lOiAnRmFrZScsXG4gICAgICAgICAgICBhdXRvbWF0aW9uTmFtZTogJ0Zha2UnLFxuICAgICAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZScsXG4gICAgICAgICAgfSwgZGVmYXVsdENhcHMpLFxuICAgICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbih1bmRlZmluZWQsIHVuZGVmaW5lZCwgY2Fwcyk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdXM0MnKTtcbiAgICAgICAgYXdhaXQgZC5yZXNldCgpO1xuICAgICAgICBkLnByb3RvY29sLnNob3VsZC5lcXVhbCgnVzNDJyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmVzZXQgYXMgTUpTT05XUCBpZiB0aGUgb3JpZ2luYWwgc2Vzc2lvbiB3YXMgTUpTT05XUCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICBhcHA6ICdGYWtlJyxcbiAgICAgICAgICBkZXZpY2VOYW1lOiAnRmFrZScsXG4gICAgICAgICAgYXV0b21hdGlvbk5hbWU6ICdGYWtlJyxcbiAgICAgICAgICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgICAgICAgfSwgZGVmYXVsdENhcHMpO1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdNSlNPTldQJyk7XG4gICAgICAgIGF3YWl0IGQucmVzZXQoKTtcbiAgICAgICAgZC5wcm90b2NvbC5zaG91bGQuZXF1YWwoJ01KU09OV1AnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRGV2aWNlU2V0dGluZ3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBub3QgaG9sZCBvbiB0byByZWZlcmVuY2Ugb2YgZGVmYXVsdHMgaW4gY29uc3RydWN0b3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgb2JqID0ge2ZvbzogJ2Jhcid9O1xuICAgICAgbGV0IGQxID0gbmV3IERldmljZVNldHRpbmdzKG9iaik7XG4gICAgICBsZXQgZDIgPSBuZXcgRGV2aWNlU2V0dGluZ3Mob2JqKTtcbiAgICAgIGQxLl9zZXR0aW5ncy5mb28gPSAnYmF6JztcbiAgICAgIGQxLl9zZXR0aW5ncy5zaG91bGQubm90LmVxbChkMi5fc2V0dGluZ3MpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZURyaXZlclVuaXRUZXN0cztcbiJdLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2RyaXZlci10ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
