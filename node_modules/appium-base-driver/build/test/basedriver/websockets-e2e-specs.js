"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _fakeDriver = require("../protocol/fake-driver");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _ws = _interopRequireDefault(require("ws"));

var _bluebird = _interopRequireDefault(require("bluebird"));

_chai.default.use(_chaiAsPromised.default);

describe('Websockets (e2e)', function () {
  let baseServer;
  let driver;
  const SESSION_ID = 'foo';
  const WS_DATA = 'Hello';
  const PORT = 8181;
  before((0, _asyncToGenerator2.default)(function* () {
    driver = new _fakeDriver.FakeDriver();
    driver.sessionId = SESSION_ID;
    baseServer = yield (0, _2.server)((0, _2.routeConfiguringFunction)(driver), PORT);
  }));
  after((0, _asyncToGenerator2.default)(function* () {
    yield baseServer.close();
  }));
  describe('web sockets support', function () {
    it('should be able to add websocket handler and remove it', (0, _asyncToGenerator2.default)(function* () {
      const wss = new _ws.default.Server({
        noServer: true
      });
      wss.on('connection', ws => {
        if (ws && ws.readyState === _ws.default.OPEN) {
          ws.send(WS_DATA);
        }
      });
      const previousListenerCount = baseServer.listenerCount('upgrade');
      const endpoint = `${_2.DEFAULT_WS_PATHNAME_PREFIX}/hello`;
      const timeout = 5000;
      yield baseServer.addWebSocketHandler(endpoint, wss);
      baseServer.listenerCount('upgrade').should.be.above(previousListenerCount);

      _lodash.default.keys((yield baseServer.getWebSocketHandlers())).length.should.eql(1);

      yield new _bluebird.default((resolve, reject) => {
        const client = new _ws.default(`ws://localhost:${PORT}${endpoint}`);
        client.on('connection', (ws, req) => {
          ws.should.not.be.empty;
          req.connection.remoteAddress.should.not.be.empty;
        });
        client.on('message', data => {
          data.should.eql(WS_DATA);
          resolve();
        });
        client.on('error', reject);
        setTimeout(() => reject(new Error('No websocket messages have been received after the timeout')), timeout);
      });
      (yield baseServer.removeWebSocketHandler(endpoint)).should.be.true;

      _lodash.default.keys((yield baseServer.getWebSocketHandlers())).length.should.eql(0);

      yield new _bluebird.default((resolve, reject) => {
        const client = new _ws.default(`ws://localhost:${PORT}${endpoint}`);
        client.on('message', data => reject(new Error(`No websocket messages are expected after the handler ` + `has been removed. '${data}' is received instead. `)));
        client.on('error', resolve);
        setTimeout(resolve, timeout);
      });
      baseServer.listenerCount('upgrade').should.be.above(previousListenerCount);
    }));
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
