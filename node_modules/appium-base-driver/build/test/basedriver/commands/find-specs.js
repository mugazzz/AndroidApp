"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _chai = _interopRequireDefault(require("chai"));

var _path = _interopRequireDefault(require("path"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _sinon = _interopRequireDefault(require("sinon"));

var _ = require("../../..");

var _find = require("../../../lib/basedriver/commands/find");

var _appiumSupport = require("appium-support");

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

class TestDriver extends _.BaseDriver {
  getWindowSize() {
    return (0, _asyncToGenerator2.default)(function* () {})();
  }

  getScreenshot() {
    return (0, _asyncToGenerator2.default)(function* () {})();
  }

}

const CUSTOM_FIND_MODULE = _path.default.resolve(__dirname, "..", "..", "..", "..", "test", "basedriver", "fixtures", "custom-element-finder");

const BAD_CUSTOM_FIND_MODULE = _path.default.resolve(__dirname, "..", "..", "..", "..", "test", "basedriver", "fixtures", "custom-element-finder-bad");

const TINY_PNG = "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAECAIAAAAmkwkpAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTQwIDc5LjE2MDQ1MSwgMjAxNy8wNS8wNi0wMTowODoyMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTggKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0NDMDM4MDM4N0U2MTFFOEEzMzhGMTRFNUUwNzIwNUIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0NDMDM4MDQ4N0U2MTFFOEEzMzhGMTRFNUUwNzIwNUIiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3Q0MwMzgwMTg3RTYxMUU4QTMzOEYxNEU1RTA3MjA1QiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3Q0MwMzgwMjg3RTYxMUU4QTMzOEYxNEU1RTA3MjA1QiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PpdvJjQAAAAlSURBVHjaJInBEQAACIKw/Xe2Ul5wYBtwmJqkk4+zfvUQVoABAEg0EfrZwc0hAAAAAElFTkSuQmCC";
const TINY_PNG_DIMS = [4, 4];
describe('finding elements by image', function () {
  describe('findElement', function () {
    it('should use a different special method to find element by image', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'findByImage').returns(true);

      _sinon.default.stub(d, 'findElOrElsWithProcessing').returns(false);

      yield d.findElement(_find.IMAGE_STRATEGY, 'foo').should.eventually.be.true;
      yield d.findElements(_find.IMAGE_STRATEGY, 'foo').should.eventually.be.true;
    }));
    it('should not be able to find image element from any other element', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      yield d.findElementFromElement(_find.IMAGE_STRATEGY, 'foo', 'elId').should.eventually.be.rejectedWith(/Locator Strategy.+is not supported/);
      yield d.findElementsFromElement(_find.IMAGE_STRATEGY, 'foo', 'elId').should.eventually.be.rejectedWith(/Locator Strategy.+is not supported/);
    }));
  });
  describe('findByImage', function () {
    const rect = {
      x: 10,
      y: 20,
      width: 30,
      height: 40
    };
    const size = {
      width: 100,
      height: 200
    };
    const screenshot = 'iVBORfoo';
    const template = 'iVBORbar';

    function basicStub(driver) {
      const sizeStub = _sinon.default.stub(driver, 'getWindowSize').returns(size);

      const screenStub = _sinon.default.stub(driver, 'getScreenshotForImageFind').returns(screenshot);

      const compareStub = _sinon.default.stub(driver, 'compareImages').returns({
        rect
      });

      return {
        sizeStub,
        screenStub,
        compareStub
      };
    }

    function basicImgElVerify(imgElProto, driver) {
      const imgElId = imgElProto.ELEMENT;
      driver._imgElCache.has(imgElId).should.be.true;

      const imgEl = driver._imgElCache.get(imgElId);

      (imgEl instanceof _.ImageElement).should.be.true;
      imgEl.rect.should.eql(rect);
      return imgEl;
    }

    it('should find an image element happypath', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      basicStub(d);
      const imgElProto = yield d.findByImage(template, {
        multiple: false
      });
      basicImgElVerify(imgElProto, d);
    }));
    it('should find image elements happypath', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      basicStub(d);
      const els = yield d.findByImage(template, {
        multiple: true
      });
      els.should.have.length(1);
      basicImgElVerify(els[0], d);
    }));
    it('should fail if driver does not support getWindowSize', (0, _asyncToGenerator2.default)(function* () {
      const d = new _.BaseDriver();
      yield d.findByImage(template, {
        multiple: false
      }).should.eventually.be.rejectedWith(/driver does not support/);
    }));
    it('should fix template size if requested', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      const newTemplate = 'iVBORbaz';

      const _basicStub = basicStub(d),
            compareStub = _basicStub.compareStub;

      yield d.settings.update({
        fixImageTemplateSize: true
      });

      _sinon.default.stub(d, 'ensureTemplateSize').returns(newTemplate);

      const imgElProto = yield d.findByImage(template, {
        multiple: false
      });
      const imgEl = basicImgElVerify(imgElProto, d);
      imgEl.template.should.eql(newTemplate);
      compareStub.args[0][2].should.eql(newTemplate);
    }));
    it('should throw an error if template match fails', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      const _basicStub2 = basicStub(d),
            compareStub = _basicStub2.compareStub;

      compareStub.throws(new Error('Cannot find any occurrences'));
      yield d.findByImage(template, {
        multiple: false
      }).should.eventually.be.rejectedWith(/element could not be located/);
    }));
    it('should return empty array for multiple elements if template match fails', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      const _basicStub3 = basicStub(d),
            compareStub = _basicStub3.compareStub;

      compareStub.throws(new Error('Cannot find any occurrences'));
      yield d.findByImage(template, {
        multiple: true
      }).should.eventually.eql([]);
    }));
    it('should respect implicit wait', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      d.setImplicitWait(10);

      const _basicStub4 = basicStub(d),
            compareStub = _basicStub4.compareStub;

      compareStub.onCall(0).throws(new Error('Cannot find any occurrences'));
      const imgElProto = yield d.findByImage(template, {
        multiple: false
      });
      basicImgElVerify(imgElProto, d);
      compareStub.callCount.should.eql(2);
    }));
    it('should not add element to cache and return it directly when checking staleness', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      basicStub(d);
      const imgEl = yield d.findByImage(template, {
        multiple: false,
        shouldCheckStaleness: true
      });
      (imgEl instanceof _.ImageElement).should.be.true;
      d._imgElCache.has(imgEl.id).should.be.false;
      imgEl.rect.should.eql(rect);
    }));
  });
  describe('ensureTemplateSize', function () {
    it('should not resize the template if it is smaller than the screen', (0, _asyncToGenerator2.default)(function* () {
      const screen = TINY_PNG_DIMS.map(n => n * 2);
      const d = new TestDriver();
      yield d.ensureTemplateSize(TINY_PNG, ...screen).should.eventually.eql(TINY_PNG);
    }));
    it('should not resize the template if it is the same size as the screen', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      yield d.ensureTemplateSize(TINY_PNG, ...TINY_PNG_DIMS).should.eventually.eql(TINY_PNG);
    }));
    it('should resize the template if it is bigger than the screen', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();
      const screen = TINY_PNG_DIMS.map(n => n / 2);
      const newTemplate = yield d.ensureTemplateSize(TINY_PNG, ...screen);
      newTemplate.should.not.eql(TINY_PNG);
      newTemplate.length.should.be.below(TINY_PNG.length);
    }));
  });
  describe('getScreenshotForImageFind', function () {
    it('should fail if driver does not support getScreenshot', (0, _asyncToGenerator2.default)(function* () {
      const d = new _.BaseDriver();
      yield d.getScreenshotForImageFind().should.eventually.be.rejectedWith(/driver does not support/);
    }));
    it('should not adjust or verify screenshot if asked not to by settings', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      d.settings.update({
        fixImageFindScreenshotDims: false
      });
      const screen = TINY_PNG_DIMS.map(n => n + 1);
      yield d.getScreenshotForImageFind(...screen).should.eventually.eql(TINY_PNG);
    }));
    it('should return screenshot without adjustment if it matches screen size', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      yield d.getScreenshotForImageFind(...TINY_PNG_DIMS).should.eventually.eql(TINY_PNG);
    }));
    it('should return scaled screenshot with same aspect ratio if matching screen aspect ratio', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      const screen = TINY_PNG_DIMS.map(n => n * 1.5);
      const newScreenshot = yield d.getScreenshotForImageFind(...screen);
      newScreenshot.should.not.eql(TINY_PNG);
      const screenshotObj = yield _appiumSupport.imageUtil.getJimpImage(newScreenshot);
      screenshotObj.bitmap.width.should.eql(screen[0]);
      screenshotObj.bitmap.height.should.eql(screen[1]);
    }));
    it('should return scaled screenshot with different aspect ratio if not matching screen aspect ratio', (0, _asyncToGenerator2.default)(function* () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      let screen = [TINY_PNG_DIMS[0] * 2, TINY_PNG_DIMS[1] * 3];
      let newScreenshot = yield d.getScreenshotForImageFind(...screen);
      newScreenshot.should.not.eql(TINY_PNG);
      let screenshotObj = yield _appiumSupport.imageUtil.getJimpImage(newScreenshot);
      screenshotObj.bitmap.width.should.eql(screen[0]);
      screenshotObj.bitmap.height.should.eql(screen[1]);
      screen = [TINY_PNG_DIMS[0] * 3, TINY_PNG_DIMS[1] * 2];
      newScreenshot = yield d.getScreenshotForImageFind(...screen);
      newScreenshot.should.not.eql(TINY_PNG);
      screenshotObj = yield _appiumSupport.imageUtil.getJimpImage(newScreenshot);
      screenshotObj.bitmap.width.should.eql(screen[0]);
      screenshotObj.bitmap.height.should.eql(screen[1]);
    }));
  });
});
describe('custom element finding plugins', function () {
  it('should find a single element using a custom finder', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foo").should.eventually.eql("bar");
  }));
  it('should not require selector prefix if only one find plugin is registered', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "foo").should.eventually.eql("bar");
  }));
  it('should find multiple elements using a custom finder', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    yield d.findElements(_find.CUSTOM_STRATEGY, "f:foos").should.eventually.eql(["baz1", "baz2"]);
  }));
  it('should give a hint to the plugin about whether multiple are requested', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foos").should.eventually.eql("bar1");
  }));
  it('should be able to use multiple find modules', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE,
      g: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foo").should.eventually.eql("bar");
    yield d.findElement(_find.CUSTOM_STRATEGY, "g:foo").should.eventually.eql("bar");
  }));
  it('should throw an error if customFindModules is not set', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foo").should.eventually.be.rejectedWith(/customFindModules/);
  }));
  it('should throw an error if customFindModules is the wrong shape', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = CUSTOM_FIND_MODULE;
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foo").should.eventually.be.rejectedWith(/customFindModules/);
  }));
  it('should throw an error if customFindModules is size > 1 and no selector prefix is used', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE,
      g: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "foo").should.eventually.be.rejectedWith(/multiple element finding/i);
  }));
  it('should throw an error in attempt to use unregistered plugin', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE,
      g: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "z:foo").should.eventually.be.rejectedWith(/was not registered/);
  }));
  it('should throw an error if plugin cannot be loaded', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: "./foo.js"
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foo").should.eventually.be.rejectedWith(/could not load/i);
  }));
  it('should throw an error if plugin is not the right shape', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: BAD_CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:foo").should.eventually.be.rejectedWith(/constructed correctly/i);
  }));
  it('should pass on an error thrown by the finder itself', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:error").should.eventually.be.rejectedWith(/plugin error/i);
  }));
  it('should throw no such element error if element not found', (0, _asyncToGenerator2.default)(function* () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    yield d.findElement(_find.CUSTOM_STRATEGY, "f:nope").should.eventually.be.rejectedWith(/could not be located/);
  }));
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
