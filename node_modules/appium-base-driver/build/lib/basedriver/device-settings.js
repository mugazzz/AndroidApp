"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BASEDRIVER_HANDLED_SETTINGS = exports.DeviceSettings = exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _images = require("./commands/images");

var _imageElement = require("./image-element");

const GLOBAL_DEFAULT_SETTINGS = {
  imageMatchThreshold: _images.DEFAULT_MATCH_THRESHOLD,
  fixImageFindScreenshotDims: true,
  fixImageTemplateSize: false,
  checkForImageElementStaleness: true,
  autoUpdateImageElementPosition: false,
  imageElementTapStrategy: _imageElement.IMAGE_EL_TAP_STRATEGY_W3C
};
const BASEDRIVER_HANDLED_SETTINGS = ['imageMatchThreshold', 'fixImageFindScreenshotDims', 'fixImageTemplateSize', 'checkForImageElementStaleness', 'autoUpdateImageElementPosition', 'imageElementTapStrategy'];
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;

class DeviceSettings {
  constructor(defaultSettings = {}, onSettingsUpdate = null) {
    this._settings = Object.assign({}, GLOBAL_DEFAULT_SETTINGS, defaultSettings);
    this.onSettingsUpdate = onSettingsUpdate;
  }

  update(newSettings) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_lodash.default.isObject(newSettings)) {
        throw new Error('Settings update should be called with valid JSON');
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.keys(newSettings)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let prop = _step.value;

          if (_lodash.default.isUndefined(_this._settings[prop])) {
            _logger.default.warn(`Didn't know about setting '${prop}'. Are you sure you ` + `spelled it correctly? Proceeding anyway. Valid settings: ${_lodash.default.keys(_this._settings)}`);
          }

          if (_this._settings[prop] !== newSettings[prop]) {
            if (_this.onSettingsUpdate) {
              yield _this.onSettingsUpdate(prop, newSettings[prop], _this._settings[prop]);
              _this._settings[prop] = newSettings[prop];
            } else {
              _logger.default.errorAndThrow('Unable to update settings; onSettingsUpdate method not found');
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    })();
  }

  getSettings() {
    return this._settings;
  }

}

exports.DeviceSettings = DeviceSettings;
var _default = DeviceSettings;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJHTE9CQUxfREVGQVVMVF9TRVRUSU5HUyIsImltYWdlTWF0Y2hUaHJlc2hvbGQiLCJERUZBVUxUX01BVENIX1RIUkVTSE9MRCIsImZpeEltYWdlRmluZFNjcmVlbnNob3REaW1zIiwiZml4SW1hZ2VUZW1wbGF0ZVNpemUiLCJjaGVja0ZvckltYWdlRWxlbWVudFN0YWxlbmVzcyIsImF1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbiIsImltYWdlRWxlbWVudFRhcFN0cmF0ZWd5IiwiSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyIsIkJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyIsIkRldmljZVNldHRpbmdzIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0U2V0dGluZ3MiLCJvblNldHRpbmdzVXBkYXRlIiwiX3NldHRpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwidXBkYXRlIiwibmV3U2V0dGluZ3MiLCJfIiwiaXNPYmplY3QiLCJFcnJvciIsImtleXMiLCJwcm9wIiwiaXNVbmRlZmluZWQiLCJsb2ciLCJ3YXJuIiwiZXJyb3JBbmRUaHJvdyIsImdldFNldHRpbmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLHVCQUF1QixHQUFHO0FBRzlCQyxFQUFBQSxtQkFBbUIsRUFBRUMsK0JBSFM7QUFPOUJDLEVBQUFBLDBCQUEwQixFQUFFLElBUEU7QUFZOUJDLEVBQUFBLG9CQUFvQixFQUFFLEtBWlE7QUFnQjlCQyxFQUFBQSw2QkFBNkIsRUFBRSxJQWhCRDtBQW9COUJDLEVBQUFBLDhCQUE4QixFQUFFLEtBcEJGO0FBd0I5QkMsRUFBQUEsdUJBQXVCLEVBQUVDO0FBeEJLLENBQWhDO0FBNkJBLE1BQU1DLDJCQUEyQixHQUFHLENBQ2xDLHFCQURrQyxFQUVsQyw0QkFGa0MsRUFHbEMsc0JBSGtDLEVBSWxDLCtCQUprQyxFQUtsQyxnQ0FMa0MsRUFNbEMseUJBTmtDLENBQXBDOzs7QUFTQSxNQUFNQyxjQUFOLENBQXFCO0FBRW5CQyxFQUFBQSxXQUFXLENBQUVDLGVBQWUsR0FBRyxFQUFwQixFQUF3QkMsZ0JBQWdCLEdBQUcsSUFBM0MsRUFBaUQ7QUFDMUQsU0FBS0MsU0FBTCxHQUFpQkMsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQmhCLHVCQUFsQixFQUEyQ1ksZUFBM0MsQ0FBakI7QUFDQSxTQUFLQyxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0Q7O0FBR0tJLEVBQUFBLE1BQU4sQ0FBY0MsV0FBZCxFQUEyQjtBQUFBOztBQUFBO0FBQ3pCLFVBQUksQ0FBQ0MsZ0JBQUVDLFFBQUYsQ0FBV0YsV0FBWCxDQUFMLEVBQThCO0FBQzVCLGNBQU0sSUFBSUcsS0FBSixDQUFVLGtEQUFWLENBQU47QUFDRDs7QUFId0I7QUFBQTtBQUFBOztBQUFBO0FBSXpCLDZCQUFpQkYsZ0JBQUVHLElBQUYsQ0FBT0osV0FBUCxDQUFqQiw4SEFBc0M7QUFBQSxjQUE3QkssSUFBNkI7O0FBQ3BDLGNBQUlKLGdCQUFFSyxXQUFGLENBQWMsS0FBSSxDQUFDVixTQUFMLENBQWVTLElBQWYsQ0FBZCxDQUFKLEVBQXlDO0FBQ3ZDRSw0QkFBSUMsSUFBSixDQUFVLDhCQUE2QkgsSUFBSyxzQkFBbkMsR0FDQyw0REFBMkRKLGdCQUFFRyxJQUFGLENBQU8sS0FBSSxDQUFDUixTQUFaLENBQXVCLEVBRDVGO0FBRUQ7O0FBQ0QsY0FBSSxLQUFJLENBQUNBLFNBQUwsQ0FBZVMsSUFBZixNQUF5QkwsV0FBVyxDQUFDSyxJQUFELENBQXhDLEVBQWdEO0FBRTlDLGdCQUFJLEtBQUksQ0FBQ1YsZ0JBQVQsRUFBMkI7QUFDekIsb0JBQU0sS0FBSSxDQUFDQSxnQkFBTCxDQUFzQlUsSUFBdEIsRUFBNEJMLFdBQVcsQ0FBQ0ssSUFBRCxDQUF2QyxFQUErQyxLQUFJLENBQUNULFNBQUwsQ0FBZVMsSUFBZixDQUEvQyxDQUFOO0FBQ0EsY0FBQSxLQUFJLENBQUNULFNBQUwsQ0FBZVMsSUFBZixJQUF1QkwsV0FBVyxDQUFDSyxJQUFELENBQWxDO0FBQ0QsYUFIRCxNQUdPO0FBQ0xFLDhCQUFJRSxhQUFKLENBQWtCLDhEQUFsQjtBQUNEO0FBQ0Y7QUFDRjtBQWxCd0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBbUIxQjs7QUFFREMsRUFBQUEsV0FBVyxHQUFJO0FBQ2IsV0FBTyxLQUFLZCxTQUFaO0FBQ0Q7O0FBL0JrQjs7O2VBa0NOSixjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgREVGQVVMVF9NQVRDSF9USFJFU0hPTEQgfSBmcm9tICcuL2NvbW1hbmRzL2ltYWdlcyc7XG5pbXBvcnQgeyBJTUFHRV9FTF9UQVBfU1RSQVRFR1lfVzNDIH0gZnJvbSAnLi9pbWFnZS1lbGVtZW50JztcblxuY29uc3QgR0xPQkFMX0RFRkFVTFRfU0VUVElOR1MgPSB7XG4gIC8vIHZhbHVlIGJldHdlZW4gMCBhbmQgMSByZXByZXNlbnRpbmcgbWF0Y2ggc3RyZW5ndGgsIGJlbG93IHdoaWNoIGFuIGltYWdlXG4gIC8vIGVsZW1lbnQgd2lsbCBub3QgYmUgZm91bmRcbiAgaW1hZ2VNYXRjaFRocmVzaG9sZDogREVGQVVMVF9NQVRDSF9USFJFU0hPTEQsXG5cbiAgLy8gaWYgdGhlIGltYWdlIHJldHVybmVkIGJ5IGdldFNjcmVlbnNob3QgZGlmZmVycyBpbiBzaXplIG9yIGFzcGVjdCByYXRpb1xuICAvLyBmcm9tIHRoZSBzY3JlZW4sIGF0dGVtcHQgdG8gZml4IGl0IGF1dG9tYXRpY2FsbHlcbiAgZml4SW1hZ2VGaW5kU2NyZWVuc2hvdERpbXM6IHRydWUsXG5cbiAgLy8gd2hldGhlciBBcHBpdW0gc2hvdWxkIGVuc3VyZSB0aGF0IGFuIGltYWdlIHRlbXBsYXRlIHNlbnQgaW4gZHVyaW5nIGltYWdlXG4gIC8vIGVsZW1lbnQgZmluZCBzaG91bGQgaGF2ZSBpdHMgc2l6ZSBhZGp1c3RlZCBzbyB0aGUgbWF0Y2ggYWxnb3JpdGhtIHdpbGwgbm90XG4gIC8vIGNvbXBsYWluXG4gIGZpeEltYWdlVGVtcGxhdGVTaXplOiBmYWxzZSxcblxuICAvLyB3aGV0aGVyIEFwcGl1bSBzaG91bGQgcmUtY2hlY2sgdGhhdCBhbiBpbWFnZSBlbGVtZW50IGNhbiBiZSBtYXRjaGVkXG4gIC8vIGFnYWluc3QgdGhlIGN1cnJlbnQgc2NyZWVuc2hvdCBiZWZvcmUgY2xpY2tpbmcgaXRcbiAgY2hlY2tGb3JJbWFnZUVsZW1lbnRTdGFsZW5lc3M6IHRydWUsXG5cbiAgLy8gd2hldGhlciBiZWZvcmUgY2xpY2tpbmcgb24gYW4gaW1hZ2UgZWxlbWVudCBBcHBpdW0gc2hvdWxkIHJlLWRldGVybWluZSB0aGVcbiAgLy8gcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgb24gc2NyZWVuXG4gIGF1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbjogZmFsc2UsXG5cbiAgLy8gd2hpY2ggbWV0aG9kIHRvIHVzZSBmb3IgdGFwcGluZyBieSBjb29yZGluYXRlIGZvciBpbWFnZSBlbGVtZW50cy4gdGhlXG4gIC8vIG9wdGlvbnMgYXJlICd3M2MnIG9yICdtanNvbndwJ1xuICBpbWFnZUVsZW1lbnRUYXBTdHJhdGVneTogSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyxcbn07XG5cbi8vIGRlY2xhcmUgc2V0dGluZ3MgdGhhdCBhcmUgcmVhbGx5IGhhbmRsZWQgb25seSBieSBiYXNlZHJpdmVyLCBzbyBkb3duc3RyZWFtXG4vLyBkcml2ZXJzIGNhbiBjaG9vc2UgdG8gaWdub3JlIHRoZW0gZm9yIHRoZWlyIG93biBzZXR0aW5ncyB2YWxpZGF0aW9uLCBldGMuLi5cbmNvbnN0IEJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyA9IFtcbiAgJ2ltYWdlTWF0Y2hUaHJlc2hvbGQnLFxuICAnZml4SW1hZ2VGaW5kU2NyZWVuc2hvdERpbXMnLFxuICAnZml4SW1hZ2VUZW1wbGF0ZVNpemUnLFxuICAnY2hlY2tGb3JJbWFnZUVsZW1lbnRTdGFsZW5lc3MnLFxuICAnYXV0b1VwZGF0ZUltYWdlRWxlbWVudFBvc2l0aW9uJyxcbiAgJ2ltYWdlRWxlbWVudFRhcFN0cmF0ZWd5Jyxcbl07XG5cbmNsYXNzIERldmljZVNldHRpbmdzIHtcblxuICBjb25zdHJ1Y3RvciAoZGVmYXVsdFNldHRpbmdzID0ge30sIG9uU2V0dGluZ3NVcGRhdGUgPSBudWxsKSB7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBHTE9CQUxfREVGQVVMVF9TRVRUSU5HUywgZGVmYXVsdFNldHRpbmdzKTtcbiAgICB0aGlzLm9uU2V0dGluZ3NVcGRhdGUgPSBvblNldHRpbmdzVXBkYXRlO1xuICB9XG5cbiAgLy8gY2FsbHMgdXBkYXRlU2V0dGluZ3MgZnJvbSBpbXBsZW1lbnRpbmcgZHJpdmVyIGV2ZXJ5IHRpbWUgYSBzZXR0aW5nIGlzIGNoYW5nZWQuXG4gIGFzeW5jIHVwZGF0ZSAobmV3U2V0dGluZ3MpIHtcbiAgICBpZiAoIV8uaXNPYmplY3QobmV3U2V0dGluZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NldHRpbmdzIHVwZGF0ZSBzaG91bGQgYmUgY2FsbGVkIHdpdGggdmFsaWQgSlNPTicpO1xuICAgIH1cbiAgICBmb3IgKGxldCBwcm9wIG9mIF8ua2V5cyhuZXdTZXR0aW5ncykpIHtcbiAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHRoaXMuX3NldHRpbmdzW3Byb3BdKSkge1xuICAgICAgICBsb2cud2FybihgRGlkbid0IGtub3cgYWJvdXQgc2V0dGluZyAnJHtwcm9wfScuIEFyZSB5b3Ugc3VyZSB5b3UgYCArXG4gICAgICAgICAgICAgICAgIGBzcGVsbGVkIGl0IGNvcnJlY3RseT8gUHJvY2VlZGluZyBhbnl3YXkuIFZhbGlkIHNldHRpbmdzOiAke18ua2V5cyh0aGlzLl9zZXR0aW5ncyl9YCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc2V0dGluZ3NbcHJvcF0gIT09IG5ld1NldHRpbmdzW3Byb3BdKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBzZXR0aW5nIG9ubHkgd2hlbiB0aGVyZSBpcyB1cGRhdGVTZXR0aW5ncyBkZWZpbmVkLlxuICAgICAgICBpZiAodGhpcy5vblNldHRpbmdzVXBkYXRlKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5vblNldHRpbmdzVXBkYXRlKHByb3AsIG5ld1NldHRpbmdzW3Byb3BdLCB0aGlzLl9zZXR0aW5nc1twcm9wXSk7XG4gICAgICAgICAgdGhpcy5fc2V0dGluZ3NbcHJvcF0gPSBuZXdTZXR0aW5nc1twcm9wXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdygnVW5hYmxlIHRvIHVwZGF0ZSBzZXR0aW5nczsgb25TZXR0aW5nc1VwZGF0ZSBtZXRob2Qgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRTZXR0aW5ncyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERldmljZVNldHRpbmdzO1xuZXhwb3J0IHsgRGV2aWNlU2V0dGluZ3MsIEJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyB9O1xuIl0sImZpbGUiOiJsaWIvYmFzZWRyaXZlci9kZXZpY2Utc2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
