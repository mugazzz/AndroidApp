"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _protocol = require("../../protocol");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MIN_TIMEOUT = 0;

commands.timeouts = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (type, ms, script, pageLoad, implicit) {
    if (_appiumSupport.util.hasValue(type) && _appiumSupport.util.hasValue(ms)) {
      _logger.default.debug(`MJSONWP timeout arguments: ${JSON.stringify({
        type,
        ms
      })}}`);

      switch (type) {
        case 'command':
          yield this.newCommandTimeout(ms);
          return;

        case 'implicit':
          yield this.implicitWaitMJSONWP(ms);
          return;

        case 'page load':
          yield this.pageLoadTimeoutMJSONWP(ms);
          return;

        case 'script':
          yield this.scriptTimeoutMJSONWP(ms);
          return;

        default:
          throw new Error(`'${type}' type is not supported for MJSONWP timeout`);
      }
    }

    _logger.default.debug(`W3C timeout argument: ${JSON.stringify({
      script,
      pageLoad,
      implicit
    })}}`);

    if (_appiumSupport.util.hasValue(script)) {
      yield this.scriptTimeoutW3C(script);
    }

    if (_appiumSupport.util.hasValue(pageLoad)) {
      yield this.pageLoadTimeoutW3C(pageLoad);
    }

    if (_appiumSupport.util.hasValue(implicit)) {
      yield this.implicitWaitW3C(implicit);
    }
  });

  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

commands.getTimeouts = (0, _asyncToGenerator2.default)(function* () {
  return {
    command: this.newCommandTimeoutMs,
    implicit: this.implicitWaitMs
  };
});

commands.implicitWaitW3C = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (ms) {
    yield this.implicitWait(ms);
  });

  return function (_x6) {
    return _ref3.apply(this, arguments);
  };
}();

commands.implicitWaitMJSONWP = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (ms) {
    yield this.implicitWait(ms);
  });

  return function (_x7) {
    return _ref4.apply(this, arguments);
  };
}();

commands.implicitWait = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (ms) {
    yield this.setImplicitWait(this.parseTimeoutArgument(ms));
  });

  return function (_x8) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.setImplicitWait = function (ms) {
  this.implicitWaitMs = ms;

  _logger.default.debug(`Set implicit wait to ${ms}ms`);

  if (this.managedDrivers && this.managedDrivers.length) {
    _logger.default.debug('Setting implicit wait on managed drivers');

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.managedDrivers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let driver = _step.value;

        if (_lodash.default.isFunction(driver.setImplicitWait)) {
          driver.setImplicitWait(ms);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
};

commands.pageLoadTimeoutW3C = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (ms) {
    throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
  });

  return function (_x9) {
    return _ref6.apply(this, arguments);
  };
}();

commands.pageLoadTimeoutMJSONWP = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (ms) {
    throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
  });

  return function (_x10) {
    return _ref7.apply(this, arguments);
  };
}();

commands.scriptTimeoutW3C = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (ms) {
    throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
  });

  return function (_x11) {
    return _ref8.apply(this, arguments);
  };
}();

commands.scriptTimeoutMJSONWP = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (ms) {
    throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
  });

  return function (_x12) {
    return _ref9.apply(this, arguments);
  };
}();

commands.newCommandTimeout = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (ms) {
    this.setNewCommandTimeout(this.parseTimeoutArgument(ms));
  });

  return function (_x13) {
    return _ref10.apply(this, arguments);
  };
}();

helpers.setNewCommandTimeout = function (ms) {
  this.newCommandTimeoutMs = ms;

  _logger.default.debug(`Set new command timeout to ${ms}ms`);

  if (this.managedDrivers && this.managedDrivers.length) {
    _logger.default.debug('Setting new command timeout on managed drivers');

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this.managedDrivers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let driver = _step2.value;

        if (_lodash.default.isFunction(driver.setNewCommandTimeout)) {
          driver.setNewCommandTimeout(ms);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function () {
  var _this = this;

  this.clearNewCommandTimeout();
  if (!this.newCommandTimeoutMs) return;
  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then((0, _asyncToGenerator2.default)(function* () {
    _logger.default.warn(`Shutting down because we waited ` + `${_this.newCommandTimeoutMs / 1000} seconds for a command`);

    let errorMessage = `New Command Timeout of ` + `${_this.newCommandTimeoutMs / 1000} seconds ` + `expired. Try customizing the timeout using the ` + `'newCommandTimeout' desired capability`;
    yield _this.startUnexpectedShutdown(new Error(errorMessage));
  })).catch(_bluebird.default.CancellationError, () => {});
};

helpers.implicitWaitForCondition = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (condFn) {
    var _this2 = this;

    _logger.default.debug(`Waiting up to ${this.implicitWaitMs} ms for condition`);

    let wrappedCondFn = function () {
      var _ref13 = (0, _asyncToGenerator2.default)(function* (...args) {
        _this2.clearNewCommandTimeout();

        return yield condFn(...args);
      });

      return function wrappedCondFn() {
        return _ref13.apply(this, arguments);
      };
    }();

    return yield (0, _asyncbox.waitForCondition)(wrappedCondFn, {
      waitMs: this.implicitWaitMs,
      intervalMs: 500,
      logger: _logger.default
    });
  });

  return function (_x14) {
    return _ref12.apply(this, arguments);
  };
}();

helpers.parseTimeoutArgument = function (ms) {
  let duration = parseInt(ms, 10);

  if (_lodash.default.isNaN(duration) || duration < MIN_TIMEOUT) {
    throw new _protocol.errors.UnknownError(`Invalid timeout value '${ms}'`);
  }

  return duration;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
