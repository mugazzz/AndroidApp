"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
extensions.supportedLogTypes = {};

commands.getLogTypes = function () {
  _logger.default.debug('Retrieving supported log types');

  return _lodash.default.keys(this.supportedLogTypes);
};

commands.getLog = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (logType) {
    _logger.default.debug(`Retrieving '${logType}' logs`);

    if (!this.getLogTypes().includes(logType)) {
      const logsTypesWithDescriptions = _lodash.default.reduce(this.supportedLogTypes, function (result, value, key) {
        result[key] = value.description;
        return result;
      }, {});

      throw new Error(`Unsupported log type '${logType}'. ` + `Supported types: ${JSON.stringify(logsTypesWithDescriptions)}`);
    }

    return yield this.supportedLogTypes[logType].getter(this);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJnZXRMb2dUeXBlcyIsImxvZyIsImRlYnVnIiwiXyIsImtleXMiLCJnZXRMb2ciLCJsb2dUeXBlIiwiaW5jbHVkZXMiLCJsb2dzVHlwZXNXaXRoRGVzY3JpcHRpb25zIiwicmVkdWNlIiwicmVzdWx0IiwidmFsdWUiLCJrZXkiLCJkZXNjcmlwdGlvbiIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldHRlciIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFBQSxNQUFxQkMsT0FBTyxHQUFHLEVBQS9CO0FBQUEsTUFBbUNDLFVBQVUsR0FBRyxFQUFoRDs7O0FBVUFBLFVBQVUsQ0FBQ0MsaUJBQVgsR0FBK0IsRUFBL0I7O0FBRUFILFFBQVEsQ0FBQ0ksV0FBVCxHQUF1QixZQUFZO0FBQ2pDQyxrQkFBSUMsS0FBSixDQUFVLGdDQUFWOztBQUNBLFNBQU9DLGdCQUFFQyxJQUFGLENBQU8sS0FBS0wsaUJBQVosQ0FBUDtBQUNELENBSEQ7O0FBS0FILFFBQVEsQ0FBQ1MsTUFBVDtBQUFBLDZDQUFrQixXQUFnQkMsT0FBaEIsRUFBeUI7QUFDekNMLG9CQUFJQyxLQUFKLENBQVcsZUFBY0ksT0FBUSxRQUFqQzs7QUFFQSxRQUFJLENBQUMsS0FBS04sV0FBTCxHQUFtQk8sUUFBbkIsQ0FBNEJELE9BQTVCLENBQUwsRUFBMkM7QUFDekMsWUFBTUUseUJBQXlCLEdBQUdMLGdCQUFFTSxNQUFGLENBQVMsS0FBS1YsaUJBQWQsRUFBaUMsVUFBVVcsTUFBVixFQUFrQkMsS0FBbEIsRUFBeUJDLEdBQXpCLEVBQThCO0FBQy9GRixRQUFBQSxNQUFNLENBQUNFLEdBQUQsQ0FBTixHQUFjRCxLQUFLLENBQUNFLFdBQXBCO0FBQ0EsZUFBT0gsTUFBUDtBQUNELE9BSGlDLEVBRy9CLEVBSCtCLENBQWxDOztBQUlBLFlBQU0sSUFBSUksS0FBSixDQUFXLHlCQUF3QlIsT0FBUSxLQUFqQyxHQUNiLG9CQUFtQlMsSUFBSSxDQUFDQyxTQUFMLENBQWVSLHlCQUFmLENBQTBDLEVBRDFELENBQU47QUFFRDs7QUFFRCxpQkFBYSxLQUFLVCxpQkFBTCxDQUF1Qk8sT0FBdkIsRUFBZ0NXLE1BQWhDLENBQXVDLElBQXZDLENBQWI7QUFDRCxHQWJEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWVBQyxNQUFNLENBQUNDLE1BQVAsQ0FBY3JCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuLy8gb3ZlcnJpZGUgaW4gc3ViLWNsYXNzZXMsIHdpdGggYXBwcm9wcmlhdGUgbG9nc1xuLy8gaW4gdGhlIGZvcm0gb2Zcbi8vICAge1xuLy8gICAgIHR5cGU6IHtcbi8vICAgICAgIGRlc2NyaXB0aW9uOiAnc29tZSB1c2VmdWwgdGV4dCcsXG4vLyAgICAgICBnZXR0ZXI6ICgpID0+IHt9LCAvLyBzb21lIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gZ2V0IHRoZSBsb2dzXG4vLyAgICAgfVxuLy8gICB9XG5leHRlbnNpb25zLnN1cHBvcnRlZExvZ1R5cGVzID0ge307XG5cbmNvbW1hbmRzLmdldExvZ1R5cGVzID0gZnVuY3Rpb24gKCkge1xuICBsb2cuZGVidWcoJ1JldHJpZXZpbmcgc3VwcG9ydGVkIGxvZyB0eXBlcycpO1xuICByZXR1cm4gXy5rZXlzKHRoaXMuc3VwcG9ydGVkTG9nVHlwZXMpO1xufTtcblxuY29tbWFuZHMuZ2V0TG9nID0gYXN5bmMgZnVuY3Rpb24gKGxvZ1R5cGUpIHtcbiAgbG9nLmRlYnVnKGBSZXRyaWV2aW5nICcke2xvZ1R5cGV9JyBsb2dzYCk7XG5cbiAgaWYgKCF0aGlzLmdldExvZ1R5cGVzKCkuaW5jbHVkZXMobG9nVHlwZSkpIHtcbiAgICBjb25zdCBsb2dzVHlwZXNXaXRoRGVzY3JpcHRpb25zID0gXy5yZWR1Y2UodGhpcy5zdXBwb3J0ZWRMb2dUeXBlcywgZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZS5kZXNjcmlwdGlvbjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwge30pO1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbG9nIHR5cGUgJyR7bG9nVHlwZX0nLiBgICtcbiAgICAgIGBTdXBwb3J0ZWQgdHlwZXM6ICR7SlNPTi5zdHJpbmdpZnkobG9nc1R5cGVzV2l0aERlc2NyaXB0aW9ucyl9YCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5zdXBwb3J0ZWRMb2dUeXBlc1tsb2dUeXBlXS5nZXR0ZXIodGhpcyk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
