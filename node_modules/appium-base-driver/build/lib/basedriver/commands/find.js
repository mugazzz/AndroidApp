"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CUSTOM_STRATEGY = exports.IMAGE_STRATEGY = exports.helpers = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../../..");

var _images = require("./images");

var _protocol = require("../../protocol/protocol");

var _imageElement = require("../image-element");

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const IMAGE_STRATEGY = "-image";
exports.IMAGE_STRATEGY = IMAGE_STRATEGY;
const CUSTOM_STRATEGY = "-custom";
exports.CUSTOM_STRATEGY = CUSTOM_STRATEGY;

helpers.findElOrElsWithProcessing = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, context) {
    this.validateLocatorStrategy(strategy);

    try {
      return yield this.findElOrEls(strategy, selector, mult, context);
    } catch (err) {
      if (this.opts.printPageSourceOnFindFailure) {
        const src = yield this.getPageSource();

        _logger.default.debug(`Error finding element${mult ? 's' : ''}: ${err.message}`);

        _logger.default.debug(`Page source requested through 'printPageSourceOnFindFailure':`);

        _logger.default.debug(src);
      }

      throw err;
    }
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

commands.findElement = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (strategy, selector) {
    if (strategy === IMAGE_STRATEGY) {
      return yield this.findByImage(selector, {
        multiple: false
      });
    } else if (strategy === CUSTOM_STRATEGY) {
      return yield this.findByCustom(selector, false);
    }

    return yield this.findElOrElsWithProcessing(strategy, selector, false);
  });

  return function (_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

commands.findElements = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (strategy, selector) {
    if (strategy === IMAGE_STRATEGY) {
      return yield this.findByImage(selector, {
        multiple: true
      });
    } else if (strategy === CUSTOM_STRATEGY) {
      return yield this.findByCustom(selector, true);
    }

    return yield this.findElOrElsWithProcessing(strategy, selector, true);
  });

  return function (_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();

commands.findElementFromElement = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (strategy, selector, elementId) {
    return yield this.findElOrElsWithProcessing(strategy, selector, false, elementId);
  });

  return function (_x9, _x10, _x11) {
    return _ref4.apply(this, arguments);
  };
}();

commands.findElementsFromElement = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (strategy, selector, elementId) {
    return yield this.findElOrElsWithProcessing(strategy, selector, true, elementId);
  });

  return function (_x12, _x13, _x14) {
    return _ref5.apply(this, arguments);
  };
}();

commands.findByCustom = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (selector, multiple) {
    var _this = this;

    const plugins = this.opts.customFindModules;

    if (!plugins) {
      throw new Error("Finding an element using a plugin is currently an " + "incubating feature. To use it you must manually install one or more " + "plugin modules in a way that they can be required by Appium, for " + "example installing them from the Appium directory, installing them " + "globally, or installing them elsewhere and passing an absolute path as " + "the capability. Then construct an object where the key is the shortcut " + "name for this plugin and the value is the module name or absolute path, " + "for example: {\"p1\": \"my-find-plugin\"}, and pass this in as the " + "'customFindModules' capability.");
    }

    if (!_lodash.default.isPlainObject(plugins)) {
      throw new Error("Invalid format for the 'customFindModules' capability. " + "It should be an object with keys corresponding to the short names and " + "values corresponding to the full names of the element finding plugins");
    }

    let _selector$split = selector.split(":"),
        _selector$split2 = (0, _slicedToArray2.default)(_selector$split, 2),
        plugin = _selector$split2[0],
        realSelector = _selector$split2[1];

    if (_lodash.default.size(plugins) > 1 && !realSelector) {
      throw new Error(`Multiple element finding plugins were registered ` + `(${_lodash.default.keys(plugins)}), but your selector did not indicate which plugin ` + `to use. Ensure you put the short name of the plugin followed by ':' as ` + `the initial part of the selector string.`);
    }

    if (_lodash.default.size(plugins) === 1 && !realSelector) {
      realSelector = plugin;
      plugin = _lodash.default.keys(plugins)[0];
    }

    if (!plugins[plugin]) {
      throw new Error(`Selector specified use of element finding plugin ` + `'${plugin}' but it was not registered in the 'customFindModules' ` + `capability.`);
    }

    let finder;

    try {
      _logger.default.debug(`Find plugin '${plugin}' requested; will attempt to use it ` + `from '${plugins[plugin]}'`);

      finder = require(plugins[plugin]);
    } catch (err) {
      throw new Error(`Could not load your custom find module '${plugin}'. Did ` + `you put it somewhere Appium can 'require' it? Original error: ${err}`);
    }

    if (!finder || !_lodash.default.isFunction(finder.find)) {
      throw new Error("Your custom find module did not appear to be constructed " + "correctly. It needs to export an object with a `find` method.");
    }

    const customFinderLog = _appiumSupport.logger.getLogger(plugin);

    let elements;

    const condition = function () {
      var _ref7 = (0, _asyncToGenerator2.default)(function* () {
        elements = yield finder.find(_this, customFinderLog, realSelector, multiple);

        if (!_lodash.default.isEmpty(elements) || multiple) {
          return true;
        }

        return false;
      });

      return function condition() {
        return _ref7.apply(this, arguments);
      };
    }();

    try {
      yield this.implicitWaitForCondition(condition);
    } catch (err) {
      if (err.message.match(/Condition unmet/)) {
        throw new _2.errors.NoSuchElementError();
      }

      throw err;
    }

    return multiple ? elements : elements[0];
  });

  return function (_x15, _x16) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.findByImage = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (b64Template, {
    shouldCheckStaleness = false,
    multiple = false
  }) {
    var _this2 = this;

    const _this$settings$getSet = this.settings.getSettings(),
          threshold = _this$settings$getSet.imageMatchThreshold,
          fixImageTemplateSize = _this$settings$getSet.fixImageTemplateSize;

    _logger.default.info(`Finding image element with match threshold ${threshold}`);

    if (!this.getWindowSize) {
      throw new Error("This driver does not support the required 'getWindowSize' command");
    }

    const _ref9 = yield this.getWindowSize(),
          screenWidth = _ref9.width,
          screenHeight = _ref9.height;

    if (fixImageTemplateSize) {
      b64Template = yield this.ensureTemplateSize(b64Template, screenWidth, screenHeight);
    }

    let rect = null;

    const condition = function () {
      var _ref10 = (0, _asyncToGenerator2.default)(function* () {
        try {
          let b64Screenshot = yield _this2.getScreenshotForImageFind(screenWidth, screenHeight);
          rect = (yield _this2.compareImages(_images.MATCH_TEMPLATE_MODE, b64Screenshot, b64Template, {
            threshold
          })).rect;
          return true;
        } catch (err) {
          if (err.message.match(/Cannot find any occurrences/)) {
            return false;
          }

          throw err;
        }
      });

      return function condition() {
        return _ref10.apply(this, arguments);
      };
    }();

    try {
      yield this.implicitWaitForCondition(condition);
    } catch (err) {
      if (!err.message.match(/Condition unmet/)) {
        throw err;
      }
    }

    if (!rect) {
      if (multiple) {
        return [];
      }

      throw new _2.errors.NoSuchElementError();
    }

    _logger.default.info(`Image template matched: ${JSON.stringify(rect)}`);

    const imgEl = new _imageElement.ImageElement(b64Template, rect);

    if (shouldCheckStaleness) {
      return imgEl;
    }

    this._imgElCache.set(imgEl.id, imgEl);

    const protoKey = this.isW3CProtocol() ? _protocol.W3C_ELEMENT_KEY : _protocol.MJSONWP_ELEMENT_KEY;
    const protocolEl = imgEl.asElement(protoKey);
    return multiple ? [protocolEl] : protocolEl;
  });

  return function (_x17, _x18) {
    return _ref8.apply(this, arguments);
  };
}();

helpers.ensureTemplateSize = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (b64Template, screenWidth, screenHeight) {
    let imgObj = yield _appiumSupport.imageUtil.getJimpImage(b64Template);
    let _imgObj$bitmap = imgObj.bitmap,
        tplWidth = _imgObj$bitmap.width,
        tplHeight = _imgObj$bitmap.height;

    if (tplWidth <= screenWidth && tplHeight <= screenHeight) {
      return b64Template;
    }

    imgObj = imgObj.scaleToFit(screenWidth, screenHeight);
    return (yield imgObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG)).toString('base64');
  });

  return function (_x19, _x20, _x21) {
    return _ref11.apply(this, arguments);
  };
}();

helpers.getScreenshotForImageFind = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (screenWidth, screenHeight) {
    if (!this.getScreenshot) {
      throw new Error("This driver does not support the required 'getScreenshot' command");
    }

    let b64Screenshot = yield this.getScreenshot();

    if (!this.settings.getSettings().fixImageFindScreenshotDims) {
      _logger.default.info(`Not verifying screenshot dimensions match screen`);

      return b64Screenshot;
    }

    _logger.default.info('Verifying screenshot size and aspect ratio');

    let imgObj = yield _appiumSupport.imageUtil.getJimpImage(b64Screenshot);
    let _imgObj$bitmap2 = imgObj.bitmap,
        shotWidth = _imgObj$bitmap2.width,
        shotHeight = _imgObj$bitmap2.height;

    if (screenWidth === shotWidth && screenHeight === shotHeight) {
      _logger.default.info('Screenshot size matched screen size');

      return b64Screenshot;
    }

    const screenAR = screenWidth / screenHeight;
    const shotAR = shotWidth / shotHeight;

    if (screenAR === shotAR) {
      _logger.default.info('Screenshot aspect ratio matched screen aspect ratio');
    } else {
      _logger.default.warn(`When trying to find an element, determined that the screen ` + `aspect ratio and screenshot aspect ratio are different. Screen ` + `is ${screenWidth}x${screenHeight} whereas screenshot is ` + `${shotWidth}x${shotHeight}.`);

      shotWidth = shotWidth / (shotAR / screenAR);

      _logger.default.warn(`Resizing screenshot to ${shotWidth}x${shotHeight} to match ` + `screen aspect ratio so that image element coordinates have a ` + `greater chance of being correct.`);

      imgObj = imgObj.resize(shotWidth, shotHeight);
    }

    if (screenWidth !== shotWidth) {
      _logger.default.info(`Scaling screenshot from ${shotWidth}x${shotHeight} to match ` + `screen at ${screenWidth}x${screenHeight}`);

      imgObj = imgObj.resize(screenWidth, screenHeight);
    }

    return (yield imgObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG)).toString('base64');
  });

  return function (_x22, _x23) {
    return _ref12.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
