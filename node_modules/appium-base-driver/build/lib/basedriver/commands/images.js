"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MATCH_TEMPLATE_MODE = exports.DEFAULT_MATCH_THRESHOLD = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _errors = require("../../protocol/errors");

var _appiumSupport = require("appium-support");

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MATCH_FEATURES_MODE = 'matchFeatures';
const GET_SIMILARITY_MODE = 'getSimilarity';
const MATCH_TEMPLATE_MODE = 'matchTemplate';
exports.MATCH_TEMPLATE_MODE = MATCH_TEMPLATE_MODE;
const DEFAULT_MATCH_THRESHOLD = 0.4;
exports.DEFAULT_MATCH_THRESHOLD = DEFAULT_MATCH_THRESHOLD;

commands.compareImages = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (mode, firstImage, secondImage, options = {}) {
    const img1 = Buffer.from(firstImage, 'base64');
    const img2 = Buffer.from(secondImage, 'base64');
    let result = {};

    switch (_lodash.default.toLower(mode)) {
      case MATCH_FEATURES_MODE.toLowerCase():
        result = yield _appiumSupport.imageUtil.getImagesMatches(img1, img2, options);
        break;

      case GET_SIMILARITY_MODE.toLowerCase():
        result = yield _appiumSupport.imageUtil.getImagesSimilarity(img1, img2, options);
        break;

      case MATCH_TEMPLATE_MODE.toLowerCase():
        result = yield _appiumSupport.imageUtil.getImageOccurrence(img1, img2, options);
        break;

      default:
        throw new _errors.errors.InvalidArgumentError(`'${mode}' images comparison mode is unknown. ` + `Only ${JSON.stringify([MATCH_FEATURES_MODE, GET_SIMILARITY_MODE, MATCH_TEMPLATE_MODE])} modes are supported.`);
    }

    if (!_lodash.default.isEmpty(result.visualization)) {
      result.visualization = result.visualization.toString('base64');
    }

    return result;
  });

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2ltYWdlcy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiTUFUQ0hfRkVBVFVSRVNfTU9ERSIsIkdFVF9TSU1JTEFSSVRZX01PREUiLCJNQVRDSF9URU1QTEFURV9NT0RFIiwiREVGQVVMVF9NQVRDSF9USFJFU0hPTEQiLCJjb21wYXJlSW1hZ2VzIiwibW9kZSIsImZpcnN0SW1hZ2UiLCJzZWNvbmRJbWFnZSIsIm9wdGlvbnMiLCJpbWcxIiwiQnVmZmVyIiwiZnJvbSIsImltZzIiLCJyZXN1bHQiLCJfIiwidG9Mb3dlciIsInRvTG93ZXJDYXNlIiwiaW1hZ2VVdGlsIiwiZ2V0SW1hZ2VzTWF0Y2hlcyIsImdldEltYWdlc1NpbWlsYXJpdHkiLCJnZXRJbWFnZU9jY3VycmVuY2UiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc0VtcHR5IiwidmlzdWFsaXphdGlvbiIsInRvU3RyaW5nIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjtBQUFBLE1BQXFCQyxPQUFPLEdBQUcsRUFBL0I7QUFBQSxNQUFtQ0MsVUFBVSxHQUFHLEVBQWhEOzs7QUFFQSxNQUFNQyxtQkFBbUIsR0FBRyxlQUE1QjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLGVBQTVCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsZUFBNUI7O0FBRUEsTUFBTUMsdUJBQXVCLEdBQUcsR0FBaEM7OztBQXVCQU4sUUFBUSxDQUFDTyxhQUFUO0FBQUEsNkNBQXlCLFdBQWdCQyxJQUFoQixFQUFzQkMsVUFBdEIsRUFBa0NDLFdBQWxDLEVBQStDQyxPQUFPLEdBQUcsRUFBekQsRUFBNkQ7QUFDcEYsVUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsVUFBWixFQUF3QixRQUF4QixDQUFiO0FBQ0EsVUFBTU0sSUFBSSxHQUFHRixNQUFNLENBQUNDLElBQVAsQ0FBWUosV0FBWixFQUF5QixRQUF6QixDQUFiO0FBQ0EsUUFBSU0sTUFBTSxHQUFHLEVBQWI7O0FBQ0EsWUFBUUMsZ0JBQUVDLE9BQUYsQ0FBVVYsSUFBVixDQUFSO0FBQ0UsV0FBS0wsbUJBQW1CLENBQUNnQixXQUFwQixFQUFMO0FBQ0VILFFBQUFBLE1BQU0sU0FBU0kseUJBQVVDLGdCQUFWLENBQTJCVCxJQUEzQixFQUFpQ0csSUFBakMsRUFBdUNKLE9BQXZDLENBQWY7QUFDQTs7QUFDRixXQUFLUCxtQkFBbUIsQ0FBQ2UsV0FBcEIsRUFBTDtBQUNFSCxRQUFBQSxNQUFNLFNBQVNJLHlCQUFVRSxtQkFBVixDQUE4QlYsSUFBOUIsRUFBb0NHLElBQXBDLEVBQTBDSixPQUExQyxDQUFmO0FBQ0E7O0FBQ0YsV0FBS04sbUJBQW1CLENBQUNjLFdBQXBCLEVBQUw7QUFFRUgsUUFBQUEsTUFBTSxTQUFTSSx5QkFBVUcsa0JBQVYsQ0FBNkJYLElBQTdCLEVBQW1DRyxJQUFuQyxFQUF5Q0osT0FBekMsQ0FBZjtBQUNBOztBQUNGO0FBQ0UsY0FBTSxJQUFJYSxlQUFPQyxvQkFBWCxDQUFpQyxJQUFHakIsSUFBSyx1Q0FBVCxHQUNuQyxRQUFPa0IsSUFBSSxDQUFDQyxTQUFMLENBQWUsQ0FBQ3hCLG1CQUFELEVBQXNCQyxtQkFBdEIsRUFBMkNDLG1CQUEzQyxDQUFmLENBQWdGLHVCQURwRixDQUFOO0FBWko7O0FBZUEsUUFBSSxDQUFDWSxnQkFBRVcsT0FBRixDQUFVWixNQUFNLENBQUNhLGFBQWpCLENBQUwsRUFBc0M7QUFDcENiLE1BQUFBLE1BQU0sQ0FBQ2EsYUFBUCxHQUF1QmIsTUFBTSxDQUFDYSxhQUFQLENBQXFCQyxRQUFyQixDQUE4QixRQUE5QixDQUF2QjtBQUNEOztBQUNELFdBQU9kLE1BQVA7QUFDRCxHQXZCRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUF5QkFlLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjOUIsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wvZXJyb3JzJztcbmltcG9ydCB7IGltYWdlVXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY29uc3QgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbnN0IE1BVENIX0ZFQVRVUkVTX01PREUgPSAnbWF0Y2hGZWF0dXJlcyc7XG5jb25zdCBHRVRfU0lNSUxBUklUWV9NT0RFID0gJ2dldFNpbWlsYXJpdHknO1xuY29uc3QgTUFUQ0hfVEVNUExBVEVfTU9ERSA9ICdtYXRjaFRlbXBsYXRlJztcblxuY29uc3QgREVGQVVMVF9NQVRDSF9USFJFU0hPTEQgPSAwLjQ7XG5cbi8qKlxuICogUGVyZm9ybXMgaW1hZ2VzIGNvbXBhcmlzb24gdXNpbmcgT3BlbkNWIGZyYW1ld29yayBmZWF0dXJlcy5cbiAqIEl0IGlzIGV4cGVjdGVkIHRoYXQgYm90aCBPcGVuQ1YgZnJhbWV3b3JrIGFuZCBvcGVuY3Y0bm9kZWpzXG4gKiBtb2R1bGUgYXJlIGluc3RhbGxlZCBvbiB0aGUgbWFjaGluZSB3aGVyZSBBcHBpdW0gc2VydmVyIGlzIHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgLSBPbmUgb2YgcG9zc2libGUgY29tcGFyaXNvbiBtb2RlczpcbiAqIG1hdGNoRmVhdHVyZXMsIGdldFNpbWlsYXJpdHksIG1hdGNoVGVtcGxhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaXJzdEltYWdlIC0gQmFzZTY0LWVuY29kZWQgaW1hZ2UgZmlsZS5cbiAqIEFsbCBpbWFnZSBmb3JtYXRzLCB0aGF0IE9wZW5DViBsaWJyYXJ5IGl0c2VsZiBhY2NlcHRzLCBhcmUgc3VwcG9ydGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlY29uZEltYWdlIC0gQmFzZTY0LWVuY29kZWQgaW1hZ2UgZmlsZS5cbiAqIEFsbCBpbWFnZSBmb3JtYXRzLCB0aGF0IE9wZW5DViBsaWJyYXJ5IGl0c2VsZiBhY2NlcHRzLCBhcmUgc3VwcG9ydGVkLlxuICogQHBhcmFtIHs/T2JqZWN0fSBvcHRpb25zIFt7fV0gLSBUaGUgY29udGVudCBvZiB0aGlzIGRpY3Rpb25hcnkgZGVwZW5kc1xuICogb24gdGhlIGFjdHVhbCBgbW9kZWAgdmFsdWUuIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBvbiBgYXBwaXVtLXN1cHBvcnRgXG4gKiBtb2R1bGUgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBjb250ZW50IG9mIHRoZSByZXN1bHRpbmcgZGljdGlvbmFyeSBkZXBlbmRzXG4gKiBvbiB0aGUgYWN0dWFsIGBtb2RlYCBhbmQgYG9wdGlvbnNgIHZhbHVlcy4gU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9uXG4gKiBgYXBwaXVtLXN1cHBvcnRgIG1vZHVsZSBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHRocm93cyB7RXJyb3J9IElmIHJlcXVpcmVkIE9wZW5DViBtb2R1bGVzIGFyZSBub3QgaW5zdGFsbGVkIG9yXG4gKiBpZiBgbW9kZWAgdmFsdWUgaXMgaW5jb3JyZWN0IG9yIGlmIHRoZXJlIHdhcyBhbiB1bmV4cGVjdGVkIGlzc3VlIHdoaWxlXG4gKiBtYXRjaGluZyB0aGUgaW1hZ2VzLlxuICovXG5jb21tYW5kcy5jb21wYXJlSW1hZ2VzID0gYXN5bmMgZnVuY3Rpb24gKG1vZGUsIGZpcnN0SW1hZ2UsIHNlY29uZEltYWdlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgaW1nMSA9IEJ1ZmZlci5mcm9tKGZpcnN0SW1hZ2UsICdiYXNlNjQnKTtcbiAgY29uc3QgaW1nMiA9IEJ1ZmZlci5mcm9tKHNlY29uZEltYWdlLCAnYmFzZTY0Jyk7XG4gIGxldCByZXN1bHQgPSB7fTtcbiAgc3dpdGNoIChfLnRvTG93ZXIobW9kZSkpIHtcbiAgICBjYXNlIE1BVENIX0ZFQVRVUkVTX01PREUudG9Mb3dlckNhc2UoKTpcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGltYWdlVXRpbC5nZXRJbWFnZXNNYXRjaGVzKGltZzEsIGltZzIsIG9wdGlvbnMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBHRVRfU0lNSUxBUklUWV9NT0RFLnRvTG93ZXJDYXNlKCk6XG4gICAgICByZXN1bHQgPSBhd2FpdCBpbWFnZVV0aWwuZ2V0SW1hZ2VzU2ltaWxhcml0eShpbWcxLCBpbWcyLCBvcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTUFUQ0hfVEVNUExBVEVfTU9ERS50b0xvd2VyQ2FzZSgpOlxuICAgICAgLy8gZmlyc3RJbWFnZS9pbWcxIGlzIHRoZSBmdWxsIGltYWdlIGFuZCBzZWNvbmRJbWFnZS9pbWcyIGlzIHRoZSBwYXJ0aWFsIG9uZVxuICAgICAgcmVzdWx0ID0gYXdhaXQgaW1hZ2VVdGlsLmdldEltYWdlT2NjdXJyZW5jZShpbWcxLCBpbWcyLCBvcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGAnJHttb2RlfScgaW1hZ2VzIGNvbXBhcmlzb24gbW9kZSBpcyB1bmtub3duLiBgICtcbiAgICAgICAgYE9ubHkgJHtKU09OLnN0cmluZ2lmeShbTUFUQ0hfRkVBVFVSRVNfTU9ERSwgR0VUX1NJTUlMQVJJVFlfTU9ERSwgTUFUQ0hfVEVNUExBVEVfTU9ERV0pfSBtb2RlcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIGlmICghXy5pc0VtcHR5KHJlc3VsdC52aXN1YWxpemF0aW9uKSkge1xuICAgIHJlc3VsdC52aXN1YWxpemF0aW9uID0gcmVzdWx0LnZpc3VhbGl6YXRpb24udG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzLCBERUZBVUxUX01BVENIX1RIUkVTSE9MRCwgTUFUQ0hfVEVNUExBVEVfTU9ERSB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvaW1hZ2VzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
