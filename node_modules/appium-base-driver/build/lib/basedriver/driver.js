"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BaseDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _protocol = require("../protocol");

var _os = _interopRequireDefault(require("os"));

var _commands = _interopRequireDefault(require("./commands"));

var helpers = _interopRequireWildcard(require("./helpers"));

var _logger = _interopRequireDefault(require("./logger"));

var _deviceSettings = _interopRequireDefault(require("./device-settings"));

var _desiredCaps = require("./desired-caps");

var _capabilities = require("./capabilities");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _imageElement = require("./image-element");

const NEW_COMMAND_TIMEOUT_MS = 60 * 1000;
const EVENT_SESSION_INIT = 'newSessionRequested';
const EVENT_SESSION_START = 'newSessionStarted';
const EVENT_SESSION_QUIT_START = 'quitSessionRequested';
const EVENT_SESSION_QUIT_DONE = 'quitSessionFinished';

class BaseDriver extends _protocol.Protocol {
  constructor(opts = {}, shouldValidateCaps = true) {
    super();
    this.sessionId = null;
    this.opts = opts;
    this.caps = null;
    this.helpers = helpers;
    this.newCommandTimeoutMs = NEW_COMMAND_TIMEOUT_MS;
    this.implicitWaitMs = 0;
    this._constraints = _lodash.default.cloneDeep(_desiredCaps.desiredCapabilityConstraints);
    this.locatorStrategies = [];
    this.webLocatorStrategies = [];
    this.opts.tmpDir = this.opts.tmpDir || process.env.APPIUM_TMP_DIR || _os.default.tmpdir();
    this.curCommand = new _bluebird.default(r => {
      r();
    });
    this.curCommandCancellable = new _bluebird.default(r => {
      r();
    });
    this.shutdownUnexpectedly = false;
    this.noCommandTimer = null;
    this.shouldValidateCaps = shouldValidateCaps;
    this.settings = new _deviceSettings.default({}, _lodash.default.noop);
    this.resetOnUnexpectedShutdown();
    this.initialOpts = _lodash.default.cloneDeep(this.opts);
    this.managedDrivers = [];
    this._eventHistory = {
      commands: []
    };
    this._imgElCache = (0, _imageElement.makeImageElementCache)();
    this.protocol = null;
  }

  get driverData() {
    return {};
  }

  get isCommandsQueueEnabled() {
    return true;
  }

  get eventHistory() {
    return _lodash.default.cloneDeep(this._eventHistory);
  }

  logEvent(eventName) {
    if (eventName === "commands") {
      throw new Error("Cannot log commands directly");
    }

    if (typeof eventName !== "string") {
      throw new Error(`Invalid eventName ${eventName}`);
    }

    if (!this._eventHistory[eventName]) {
      this._eventHistory[eventName] = [];
    }

    let ts = Date.now();
    let logTime = new Date(ts).toTimeString();

    this._eventHistory[eventName].push(ts);

    _logger.default.debug(`Event '${eventName}' logged at ${ts} (${logTime})`);
  }

  getStatus() {
    return (0, _asyncToGenerator2.default)(function* () {
      return {};
    })();
  }

  resetOnUnexpectedShutdown() {
    if (this.onUnexpectedShutdown && !this.onUnexpectedShutdown.isFulfilled()) {
      this.onUnexpectedShutdown.cancel();
    }

    this.onUnexpectedShutdown = new _bluebird.default((resolve, reject) => {
      this.unexpectedShutdownDeferred = {
        resolve,
        reject
      };
    }).cancellable();
    this.onUnexpectedShutdown.catch(() => {});
  }

  set desiredCapConstraints(constraints) {
    this._constraints = Object.assign(this._constraints, constraints);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.toPairs(this._constraints)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              value = _step$value[1];

        if (value && value.presence === true) {
          value.presence = {
            allowEmpty: false
          };
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  get desiredCapConstraints() {
    return this._constraints;
  }

  sessionExists(sessionId) {
    if (!sessionId) return false;
    return sessionId === this.sessionId;
  }

  driverForSession() {
    return this;
  }

  logExtraCaps(caps) {
    let extraCaps = _lodash.default.difference(_lodash.default.keys(caps), _lodash.default.keys(this._constraints));

    if (extraCaps.length) {
      _logger.default.warn(`The following capabilities were provided, but are not ` + `recognized by appium: ${extraCaps.join(', ')}.`);
    }
  }

  validateDesiredCaps(caps) {
    if (!this.shouldValidateCaps) {
      return true;
    }

    try {
      (0, _capabilities.validateCaps)(caps, this._constraints);
    } catch (e) {
      _logger.default.errorAndThrow(new _protocol.errors.SessionNotCreatedError(`The desiredCapabilities object was not valid for the ` + `following reason(s): ${e.message}`));
    }

    this.logExtraCaps(caps);
    return true;
  }

  isMjsonwpProtocol() {
    return this.protocol === BaseDriver.DRIVER_PROTOCOL.MJSONWP;
  }

  isW3CProtocol() {
    return this.protocol === BaseDriver.DRIVER_PROTOCOL.W3C;
  }

  setProtocolMJSONWP() {
    this.protocol = BaseDriver.DRIVER_PROTOCOL.MJSONWP;
  }

  setProtocolW3C() {
    this.protocol = BaseDriver.DRIVER_PROTOCOL.W3C;
  }

  static determineProtocol(desiredCapabilities, requiredCapabilities, capabilities) {
    return _lodash.default.isPlainObject(capabilities) ? BaseDriver.DRIVER_PROTOCOL.W3C : BaseDriver.DRIVER_PROTOCOL.MJSONWP;
  }

  executeCommand(cmd, ...args) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let startTime = Date.now();

      if (cmd === 'createSession') {
        _this.protocol = BaseDriver.determineProtocol(...args);

        _this.logEvent(EVENT_SESSION_INIT);
      } else if (cmd === 'deleteSession') {
        _this.logEvent(EVENT_SESSION_QUIT_START);
      }

      _this.clearNewCommandTimeout();

      const imgElId = (0, _imageElement.getImgElFromArgs)(args);

      if (!_this[cmd] && !imgElId) {
        throw new _protocol.errors.NotYetImplementedError();
      }

      let res;

      if (_this.isCommandsQueueEnabled) {
        let nextCommand = _this.curCommand.then(() => {
          if (_this.shutdownUnexpectedly) {
            return _bluebird.default.reject(new _protocol.errors.NoSuchDriverError('The driver was unexpectedly shut down!'));
          }

          _this.curCommandCancellable = _bluebird.default.resolve().then(() => {
            if (imgElId) {
              return _imageElement.ImageElement.execute(_this, cmd, imgElId);
            }

            return _this[cmd](...args);
          }).cancellable();
          return _this.curCommandCancellable;
        });

        _this.curCommand = nextCommand.catch(() => {});
        res = yield nextCommand;
      } else {
        if (_this.shutdownUnexpectedly) {
          throw new _protocol.errors.NoSuchDriverError('The driver was unexpectedly shut down!');
        }

        res = yield _this[cmd](...args);
      }

      if (cmd !== 'deleteSession') {
        _this.startNewCommandTimeout();
      }

      let endTime = Date.now();

      _this._eventHistory.commands.push({
        cmd,
        startTime,
        endTime
      });

      if (cmd === 'createSession') {
        _this.logEvent(EVENT_SESSION_START);
      } else if (cmd === 'deleteSession') {
        _this.logEvent(EVENT_SESSION_QUIT_DONE);
      }

      return res;
    })();
  }

  startUnexpectedShutdown(err = new _protocol.errors.NoSuchDriverError('The driver was unexpectedly shut down!')) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this2.unexpectedShutdownDeferred.reject(err);

      _this2.shutdownUnexpectedly = true;
      yield _this2.deleteSession(_this2.sessionId);
      _this2.shutdownUnexpectedly = false;

      _this2.curCommandCancellable.cancel(err);
    })();
  }

  validateLocatorStrategy(strategy, webContext = false) {
    let validStrategies = this.locatorStrategies;

    _logger.default.debug(`Valid locator strategies for this request: ${validStrategies.join(', ')}`);

    if (webContext) {
      validStrategies = validStrategies.concat(this.webLocatorStrategies);
    }

    if (!_lodash.default.includes(validStrategies, strategy)) {
      throw new _protocol.errors.InvalidSelectorError(`Locator Strategy '${strategy}' is not supported for this session`);
    }
  }

  reset() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Resetting app mid-session');

      _logger.default.debug('Running generic full reset');

      let currentConfig = {};
      var _arr = ['implicitWaitMs', 'newCommandTimeoutMs', 'sessionId', 'resetOnUnexpectedShutdown'];

      for (var _i = 0; _i < _arr.length; _i++) {
        let property = _arr[_i];
        currentConfig[property] = _this3[property];
      }

      _this3.resetOnUnexpectedShutdown = () => {};

      const args = _this3.protocol === BaseDriver.DRIVER_PROTOCOL.W3C ? [undefined, undefined, {
        alwaysMatch: _this3.caps,
        firstMatch: [{}]
      }] : [_this3.caps];

      try {
        yield _this3.deleteSession(_this3.sessionId);

        _logger.default.debug('Restarting app');

        yield _this3.createSession(...args);
      } finally {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _lodash.default.toPairs(currentConfig)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
                key = _step2$value[0],
                value = _step2$value[1];

            _this3[key] = value;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      _this3.clearNewCommandTimeout();
    })();
  }

  getSwipeOptions(gestures, touchCount = 1) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let startX = _this4.helpers.getCoordDefault(gestures[0].options.x),
          startY = _this4.helpers.getCoordDefault(gestures[0].options.y),
          endX = _this4.helpers.getCoordDefault(gestures[2].options.x),
          endY = _this4.helpers.getCoordDefault(gestures[2].options.y),
          duration = _this4.helpers.getSwipeTouchDuration(gestures[1]),
          element = gestures[0].options.element,
          destElement = gestures[2].options.element || gestures[0].options.element;

      if (_appiumSupport.util.hasValue(destElement)) {
        let locResult = yield _this4.getLocationInView(destElement);
        let sizeResult = yield _this4.getSize(destElement);
        let offsetX = Math.abs(endX) < 1 && Math.abs(endX) > 0 ? sizeResult.width * endX : endX;
        let offsetY = Math.abs(endY) < 1 && Math.abs(endY) > 0 ? sizeResult.height * endY : endY;
        endX = locResult.x + offsetX;
        endY = locResult.y + offsetY;

        if (_appiumSupport.util.hasValue(element)) {
          let firstElLocation = yield _this4.getLocationInView(element);
          endX -= firstElLocation.x;
          endY -= firstElLocation.y;
        }
      }

      return {
        startX,
        startY,
        endX,
        endY,
        duration,
        touchCount,
        element
      };
    })();
  }

  proxyActive() {
    return false;
  }

  getProxyAvoidList() {
    return [];
  }

  canProxy() {
    return false;
  }

  proxyRouteIsAvoided(sessionId, method, url) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = this.getProxyAvoidList(sessionId)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let avoidSchema = _step3.value;

        if (!_lodash.default.isArray(avoidSchema) || avoidSchema.length !== 2) {
          throw new Error('Proxy avoidance must be a list of pairs');
        }

        let _avoidSchema = (0, _slicedToArray2.default)(avoidSchema, 2),
            avoidMethod = _avoidSchema[0],
            avoidPathRegex = _avoidSchema[1];

        if (!_lodash.default.includes(['GET', 'POST', 'DELETE'], avoidMethod)) {
          throw new Error(`Unrecognized proxy avoidance method '${avoidMethod}'`);
        }

        if (!_lodash.default.isRegExp(avoidPathRegex)) {
          throw new Error('Proxy avoidance path must be a regular expression');
        }

        let normalizedUrl = url.replace(/^\/wd\/hub/, '');

        if (avoidMethod === method && avoidPathRegex.test(normalizedUrl)) {
          return true;
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return false;
  }

  addManagedDriver(driver) {
    this.managedDrivers.push(driver);
  }

  getManagedDrivers() {
    return this.managedDrivers;
  }

}

exports.BaseDriver = BaseDriver;
(0, _defineProperty2.default)(BaseDriver, "DRIVER_PROTOCOL", {
  W3C: 'W3C',
  MJSONWP: 'MJSONWP'
});
var _iteratorNormalCompletion4 = true;
var _didIteratorError4 = false;
var _iteratorError4 = undefined;

try {
  for (var _iterator4 = _lodash.default.toPairs(_commands.default)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
    let _step4$value = (0, _slicedToArray2.default)(_step4.value, 2),
        cmd = _step4$value[0],
        fn = _step4$value[1];

    BaseDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError4 = true;
  _iteratorError4 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
      _iterator4.return();
    }
  } finally {
    if (_didIteratorError4) {
      throw _iteratorError4;
    }
  }
}

var _default = BaseDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
