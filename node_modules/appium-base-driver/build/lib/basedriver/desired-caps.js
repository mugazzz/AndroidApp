"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "validator", {
  enumerable: true,
  get: function get() {
    return _validate.default;
  }
});
exports.desiredCapabilityConstraints = void 0;

var _logger = _interopRequireDefault(require("./logger"));

var _validate = _interopRequireDefault(require("validate.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

let desiredCapabilityConstraints = {
  platformName: {
    presence: true,
    isString: true
  },
  deviceName: {
    presence: true,
    isString: true
  },
  platformVersion: {},
  newCommandTimeout: {
    isNumber: true
  },
  automationName: {
    isString: true
  },
  autoLaunch: {
    isBoolean: true
  },
  udid: {
    isString: true
  },
  orientation: {
    inclusion: ['LANDSCAPE', 'PORTRAIT']
  },
  autoWebview: {
    isBoolean: true
  },
  noReset: {
    isBoolean: true
  },
  fullReset: {
    isBoolean: true
  },
  language: {
    isString: true
  },
  locale: {
    isString: true
  },
  eventTimings: {
    isBoolean: true
  },
  printPageSourceOnFindFailure: {
    isBoolean: true
  }
};
exports.desiredCapabilityConstraints = desiredCapabilityConstraints;

_validate.default.validators.isString = function (value) {
  if (typeof value === 'string') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type string';
};

_validate.default.validators.isNumber = function (value) {
  if (typeof value === 'number') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  if (typeof value === 'string' && !isNaN(value)) {
    _logger.default.warn('Number capability passed in as string. Functionality may be compromised.');

    return null;
  }

  return 'must be of type number';
};

_validate.default.validators.isBoolean = function (value) {
  if (typeof value === 'boolean') {
    return null;
  }

  if (typeof value === 'string' && ['true', 'false', ''].includes(value)) {
    _logger.default.warn('Boolean capability passed in as string. Functionality may be compromised.');

    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type boolean';
};

_validate.default.validators.isObject = function (value) {
  if (typeof value === 'object') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type object';
};

_validate.default.validators.deprecated = function (value, options, key) {
  if (options) {
    _logger.default.warn(`${key} is a deprecated capability`);
  }

  return null;
};

_validate.default.validators.inclusionCaseInsensitive = function (value, options) {
  if (typeof value === 'undefined') {
    return null;
  } else if (typeof value !== 'string') {
    return 'unrecognised';
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let option = _step.value;

      if (option.toLowerCase() === value.toLowerCase()) {
        return null;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return `${value} not part of ${options.toString()}`;
};

_validate.default.promise = _bluebird.default;

_validate.default.prettify = val => {
  return val;
};require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
