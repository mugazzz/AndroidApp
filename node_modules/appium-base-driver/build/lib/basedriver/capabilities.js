"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCaps = parseCaps;
exports.processCapabilities = processCapabilities;
exports.validateCaps = validateCaps;
exports.mergeCaps = mergeCaps;
exports.findNonPrefixedCaps = findNonPrefixedCaps;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash"));

var _desiredCaps = require("./desired-caps");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("./logger"));

var _errors = require("../protocol/errors");

function mergeCaps(primary = {}, secondary = {}) {
  let result = Object.assign({}, primary);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _lodash.default.toPairs(secondary)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          name = _step$value[0],
          value = _step$value[1];

      if (!_lodash.default.isUndefined(primary[name])) {
        throw new _errors.errors.InvalidArgumentError(`property '${name}' should not exist on both primary (${JSON.stringify(primary)}) and secondary (${JSON.stringify(secondary)}) object`);
      }

      result[name] = value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

function validateCaps(caps, constraints = {}, opts = {}) {
  let skipPresenceConstraint = opts.skipPresenceConstraint;

  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError(`must be a JSON object`);
  }

  constraints = _lodash.default.cloneDeep(constraints);

  if (skipPresenceConstraint) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.keys(constraints)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let key = _step2.value;
        delete constraints[key].presence;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  let validationErrors = _desiredCaps.validator.validate(_lodash.default.pickBy(caps, _appiumSupport.util.hasValue), constraints, {
    fullMessages: false
  });

  if (validationErrors) {
    let message = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _lodash.default.toPairs(validationErrors)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let _step3$value = (0, _slicedToArray2.default)(_step3.value, 2),
            attribute = _step3$value[0],
            reasons = _step3$value[1];

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = reasons[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            let reason = _step4.value;
            message.push(`'${attribute}' ${reason}`);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    throw new _errors.errors.InvalidArgumentError(message.join('; '));
  }

  return caps;
}

const STANDARD_CAPS = ['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior'];

function isStandardCap(cap) {
  return !!_lodash.default.find(STANDARD_CAPS, standardCap => standardCap.toLowerCase() === `${cap}`.toLowerCase());
}

function stripAppiumPrefixes(caps) {
  const prefix = 'appium:';

  const prefixedCaps = _lodash.default.filter(_lodash.default.keys(caps), cap => `${cap}`.startsWith(prefix));

  const badPrefixedCaps = [];
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = prefixedCaps[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      let prefixedCap = _step5.value;
      const strippedCapName = prefixedCap.substr(prefix.length);

      if (isStandardCap(strippedCapName)) {
        badPrefixedCaps.push(strippedCapName);
      }

      caps[strippedCapName] = caps[prefixedCap];
      delete caps[prefixedCap];
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  if (badPrefixedCaps.length > 0) {
    throw new _errors.errors.InvalidArgumentError(`The capabilities ${JSON.stringify(badPrefixedCaps)} are standard capabilities and should not have the "appium:" prefix`);
  }
}

function findNonPrefixedCaps({
  alwaysMatch = {},
  firstMatch = []
}) {
  return _lodash.default.chain([alwaysMatch, ...firstMatch]).reduce((unprefixedCaps, caps) => [...unprefixedCaps, ...(0, _lodash.default)(caps).keys().filter(cap => !cap.includes(':') && !isStandardCap(cap))], []).uniq().value();
}

function parseCaps(caps, constraints = {}, shouldValidateCaps = true) {
  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities argument was not valid for the following reason(s): "capabilities" must be a JSON object.');
  }

  let _caps$alwaysMatch = caps.alwaysMatch,
      requiredCaps = _caps$alwaysMatch === void 0 ? {} : _caps$alwaysMatch,
      _caps$firstMatch = caps.firstMatch,
      allFirstMatchCaps = _caps$firstMatch === void 0 ? [{}] : _caps$firstMatch;

  if (!_lodash.default.isArray(allFirstMatchCaps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities.firstMatch argument was not valid for the following reason(s): "capabilities.firstMatch" must be a JSON array or undefined');
  }

  if (allFirstMatchCaps.length === 0) {
    allFirstMatchCaps.push({});
  }

  let nonPrefixedCaps = findNonPrefixedCaps(caps);

  if (!_lodash.default.isEmpty(nonPrefixedCaps)) {
    _logger.default.warn(`The capabilities ${JSON.stringify(nonPrefixedCaps)} are not standard capabilities and should have an extension prefix`);
  }

  stripAppiumPrefixes(requiredCaps);
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = allFirstMatchCaps[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      let firstMatchCaps = _step6.value;
      stripAppiumPrefixes(firstMatchCaps);
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
        _iterator6.return();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  if (shouldValidateCaps) {
    requiredCaps = validateCaps(requiredCaps, constraints, {
      skipPresenceConstraint: true
    });
  }

  let filteredConstraints = (0, _objectSpread2.default)({}, constraints);

  let requiredCapsKeys = _lodash.default.keys(requiredCaps);

  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = _lodash.default.keys(filteredConstraints)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      let key = _step7.value;

      if (requiredCapsKeys.includes(key)) {
        delete filteredConstraints[key];
      }
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
        _iterator7.return();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }

  let validationErrors = [];
  let validatedFirstMatchCaps = allFirstMatchCaps.map(firstMatchCaps => {
    try {
      return shouldValidateCaps ? validateCaps(firstMatchCaps, filteredConstraints) : firstMatchCaps;
    } catch (e) {
      validationErrors.push(e.message);
      return null;
    }
  }).filter(caps => !_lodash.default.isNull(caps));
  let matchedCaps = null;
  var _iteratorNormalCompletion8 = true;
  var _didIteratorError8 = false;
  var _iteratorError8 = undefined;

  try {
    for (var _iterator8 = validatedFirstMatchCaps[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
      let firstMatchCaps = _step8.value;

      try {
        matchedCaps = mergeCaps(requiredCaps, firstMatchCaps);

        if (matchedCaps) {
          break;
        }
      } catch (err) {
        _logger.default.warn(err.message);
      }
    }
  } catch (err) {
    _didIteratorError8 = true;
    _iteratorError8 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
        _iterator8.return();
      }
    } finally {
      if (_didIteratorError8) {
        throw _iteratorError8;
      }
    }
  }

  return {
    requiredCaps,
    allFirstMatchCaps,
    validatedFirstMatchCaps,
    matchedCaps,
    validationErrors
  };
}

function processCapabilities(caps, constraints = {}, shouldValidateCaps = true) {
  const _parseCaps = parseCaps(caps, constraints, shouldValidateCaps),
        matchedCaps = _parseCaps.matchedCaps,
        validationErrors = _parseCaps.validationErrors;

  if (!_appiumSupport.util.hasValue(matchedCaps)) {
    if (_lodash.default.isArray(caps.firstMatch) && caps.firstMatch.length > 1) {
      throw new _errors.errors.InvalidArgumentError(`Could not find matching capabilities from ${JSON.stringify(caps)}:\n ${validationErrors.join('\n')}`);
    } else {
      throw new _errors.errors.InvalidArgumentError(validationErrors[0]);
    }
  }

  return matchedCaps;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
