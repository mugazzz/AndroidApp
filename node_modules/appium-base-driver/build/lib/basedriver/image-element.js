"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImgElFromArgs = getImgElFromArgs;
exports.makeImageElementCache = makeImageElementCache;
exports.IMAGE_EL_TAP_STRATEGY_W3C = exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = exports.ImageElement = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _protocol = require("../protocol/protocol");

var _logger = _interopRequireDefault(require("./logger"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

const MAX_CACHE_SIZE = 1024 * 1024 * 40;
const TAP_DURATION_MS = 125;
const IMAGE_EL_TAP_STRATEGY_W3C = 'w3cActions';
exports.IMAGE_EL_TAP_STRATEGY_W3C = IMAGE_EL_TAP_STRATEGY_W3C;
const IMAGE_EL_TAP_STRATEGY_MJSONWP = 'touchActions';
exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = IMAGE_EL_TAP_STRATEGY_MJSONWP;
const IMAGE_TAP_STRATEGIES = [IMAGE_EL_TAP_STRATEGY_MJSONWP, IMAGE_EL_TAP_STRATEGY_W3C];

class ImageElement {
  constructor(b64Template, rect) {
    this.template = b64Template;
    this.rect = rect;
    this.id = `${_protocol.IMAGE_ELEMENT_PREFIX}${_uuidJs.default.create().hex}`;
  }

  get size() {
    return {
      width: this.rect.width,
      height: this.rect.height
    };
  }

  get location() {
    return {
      x: this.rect.x,
      y: this.rect.y
    };
  }

  get center() {
    return {
      x: this.rect.x + this.rect.width / 2,
      y: this.rect.y + this.rect.height / 2
    };
  }

  asElement(protocolKey) {
    return {
      [protocolKey]: this.id
    };
  }

  equals(other) {
    return this.rect.x === other.rect.x && this.rect.y === other.rect.y && this.rect.width === other.rect.width && this.rect.height === other.rect.height;
  }

  click(driver) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let newImgEl;

      const _driver$settings$getS = driver.settings.getSettings(),
            updatePos = _driver$settings$getS.autoUpdateImageElementPosition,
            checkForImageElementStaleness = _driver$settings$getS.checkForImageElementStaleness,
            imageElementTapStrategy = _driver$settings$getS.imageElementTapStrategy;

      if (!IMAGE_TAP_STRATEGIES.includes(imageElementTapStrategy)) {
        throw new Error(`Incorrect imageElementTapStrategy setting ` + `'${imageElementTapStrategy}'. Must be one of ` + JSON.stringify(IMAGE_TAP_STRATEGIES));
      }

      if (checkForImageElementStaleness || updatePos) {
        _logger.default.info('Checking image element for staleness before clicking');

        try {
          newImgEl = yield driver.findByImage(_this.template, {
            shouldCheckStaleness: true
          });
        } catch (err) {
          throw new _2.errors.StaleElementReferenceError();
        }

        if (!_this.equals(newImgEl)) {
          _logger.default.warn(`When trying to click on an image element, the image changed ` + `position from where it was originally found. It is now at ` + `${JSON.stringify(newImgEl.rect)} and was originally at ` + `${JSON.stringify(_this.rect)}.`);

          if (updatePos) {
            _logger.default.warn('Click will proceed at new coordinates');

            _this.rect = _lodash.default.clone(newImgEl.rect);
          } else {
            _logger.default.warn("Click will take place at original coordinates. If you " + "would like Appium to automatically click the new " + "coordinates, set the 'autoUpdateImageElementPosition' " + "setting to true");
          }
        }
      }

      const _this$center = _this.center,
            x = _this$center.x,
            y = _this$center.y;

      _logger.default.info(`Will tap on image element at coordinate [${x}, ${y}]`);

      if (imageElementTapStrategy === IMAGE_EL_TAP_STRATEGY_W3C) {
        _logger.default.info('Will tap using W3C actions');

        const action = {
          type: 'pointer',
          id: 'mouse',
          parameters: {
            pointerType: 'touch'
          },
          actions: [{
            type: 'pointerMove',
            x,
            y,
            duration: 0
          }, {
            type: 'pointerDown'
          }, {
            type: 'pause',
            duration: TAP_DURATION_MS
          }, {
            type: 'pointerUp'
          }]
        };

        if (driver.performActions) {
          return yield driver.performActions([action]);
        }

        _logger.default.warn('Driver does not seem to implement W3C actions, falling back ' + 'to TouchActions');
      }

      _logger.default.info('Will tap using MJSONWP TouchActions');

      const action = {
        action: 'tap',
        options: {
          x,
          y
        }
      };

      if (driver.performTouch) {
        return yield driver.performTouch([action]);
      }

      throw new Error("Driver did not implement the 'performTouch' command. " + "For drivers to support finding image elements, they " + "should support 'performTouch' and 'performActions'");
    })();
  }

  static execute(driver, cmd, imgElId) {
    return (0, _asyncToGenerator2.default)(function* () {
      if (!driver._imgElCache.has(imgElId)) {
        throw new _2.errors.NoSuchElementError();
      }

      const imgEl = driver._imgElCache.get(imgElId);

      switch (cmd) {
        case 'click':
          return yield imgEl.click(driver);

        case 'elementDisplayed':
          return true;

        case 'getSize':
          return imgEl.size;

        case 'getLocation':
        case 'getLocationInView':
          return imgEl.location;

        case 'getElementRect':
          return imgEl.rect;

        default:
          throw new _2.errors.NotYetImplementedError();
      }
    })();
  }

}

exports.ImageElement = ImageElement;

function makeImageElementCache(max = MAX_CACHE_SIZE) {
  return (0, _lruCache.default)({
    max,
    length: el => el.template.length
  });
}

function getImgElFromArgs(args) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let arg = _step.value;

      if (_lodash.default.isString(arg) && arg.startsWith(_protocol.IMAGE_ELEMENT_PREFIX)) {
        return arg;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
