"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addWebSocketHandler = addWebSocketHandler;
exports.removeWebSocketHandler = removeWebSocketHandler;
exports.removeAllWebSocketHandlers = removeAllWebSocketHandlers;
exports.getWebSocketHandlers = getWebSocketHandlers;
exports.DEFAULT_WS_PATHNAME_PREFIX = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

const DEFAULT_WS_PATHNAME_PREFIX = '/ws';
exports.DEFAULT_WS_PATHNAME_PREFIX = DEFAULT_WS_PATHNAME_PREFIX;

function addWebSocketHandler(_x, _x2) {
  return _addWebSocketHandler.apply(this, arguments);
}

function _addWebSocketHandler() {
  _addWebSocketHandler = (0, _asyncToGenerator2.default)(function* (handlerPathname, handlerServer) {
    let isUpgradeListenerAssigned = true;

    if (_lodash.default.isUndefined(this.webSocketsMapping)) {
      this.webSocketsMapping = {};
      isUpgradeListenerAssigned = false;
    }

    this.webSocketsMapping[handlerPathname] = handlerServer;

    if (isUpgradeListenerAssigned) {
      return;
    }

    this.on('upgrade', (request, socket, head) => {
      const currentPathname = _url.default.parse(request.url).pathname;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.toPairs(this.webSocketsMapping)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
                pathname = _step$value[0],
                wsServer = _step$value[1];

          if (currentPathname === pathname) {
            wsServer.handleUpgrade(request, socket, head, ws => {
              wsServer.emit('connection', ws, request);
            });
            return;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      socket.destroy();
    });
  });
  return _addWebSocketHandler.apply(this, arguments);
}

function getWebSocketHandlers() {
  return _getWebSocketHandlers.apply(this, arguments);
}

function _getWebSocketHandlers() {
  _getWebSocketHandlers = (0, _asyncToGenerator2.default)(function* (keysFilter = null) {
    if (_lodash.default.isEmpty(this.webSocketsMapping)) {
      return {};
    }

    let result = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.toPairs(this.webSocketsMapping)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
              pathname = _step2$value[0],
              wsServer = _step2$value[1];

        if (!_lodash.default.isString(keysFilter) || pathname.includes(keysFilter)) {
          result[pathname] = wsServer;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return result;
  });
  return _getWebSocketHandlers.apply(this, arguments);
}

function removeWebSocketHandler(_x3) {
  return _removeWebSocketHandler.apply(this, arguments);
}

function _removeWebSocketHandler() {
  _removeWebSocketHandler = (0, _asyncToGenerator2.default)(function* (handlerPathname) {
    if (!this.webSocketsMapping || !this.webSocketsMapping[handlerPathname]) {
      return false;
    }

    try {
      this.webSocketsMapping[handlerPathname].close();
      return true;
    } catch (ign) {} finally {
      delete this.webSocketsMapping[handlerPathname];
    }

    return false;
  });
  return _removeWebSocketHandler.apply(this, arguments);
}

function removeAllWebSocketHandlers() {
  return _removeAllWebSocketHandlers.apply(this, arguments);
}

function _removeAllWebSocketHandlers() {
  _removeAllWebSocketHandlers = (0, _asyncToGenerator2.default)(function* () {
    if (_lodash.default.isEmpty(this.webSocketsMapping)) {
      return false;
    }

    let result = false;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _lodash.default.keys(this.webSocketsMapping)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        const pathname = _step3.value;
        result = result || (yield this.removeWebSocketHandler(pathname));
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return result;
  });
  return _removeAllWebSocketHandlers.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
