"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startLogFormatter = exports.endLogFormatter = void 0;

require("colors");

var _morgan = _interopRequireDefault(require("morgan"));

var _logger = _interopRequireDefault(require("./logger"));

function compile(fmt) {
  fmt = fmt.replace(/"/g, '\\"');
  fmt = fmt.replace(/:([-\w]{2,})(?:\[([^\]]+)\])?/g, function (_, name, arg) {
    return `"\n    + (tokens["${name}"](req, res, "${arg}") || "-") + "`;
  });
  let js = `  return "${fmt}";`;
  return new Function('tokens, req, res', js);
}

function requestEndLoggingFormat(tokens, req, res) {
  let status = res.statusCode;
  let statusStr = ':status';

  if (status >= 500) {
    statusStr = statusStr.red;
  } else if (status >= 400) {
    statusStr = statusStr.yellow;
  } else if (status >= 300) {
    statusStr = statusStr.cyan;
  } else {
    statusStr = statusStr.green;
  }

  let fn = compile(`${'<-- :method :url '.white}${statusStr} ${':response-time ms - :res[content-length]'.grey}`);
  return fn(tokens, req, res);
}

const endLogFormatter = (0, _morgan.default)((tokens, req, res) => {
  _logger.default.info(requestEndLoggingFormat(tokens, req, res), (res.jsonResp || '').grey);
});
exports.endLogFormatter = endLogFormatter;
const requestStartLoggingFormat = compile(`${'-->'.white} ${':method'.white} ${':url'.white}`);
const startLogFormatter = (0, _morgan.default)((tokens, req, res) => {
  let data = '';

  try {
    if (req.body) {
      data = JSON.stringify(req.body).substring(0, 1000);
    }
  } catch (ign) {}

  _logger.default.info(requestStartLoggingFormat(tokens, req, res), data.grey);
}, {
  immediate: true
});
exports.startLogFormatter = startLogFormatter;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL2V4cHJlc3MtbG9nZ2luZy5qcyJdLCJuYW1lcyI6WyJjb21waWxlIiwiZm10IiwicmVwbGFjZSIsIl8iLCJuYW1lIiwiYXJnIiwianMiLCJGdW5jdGlvbiIsInJlcXVlc3RFbmRMb2dnaW5nRm9ybWF0IiwidG9rZW5zIiwicmVxIiwicmVzIiwic3RhdHVzIiwic3RhdHVzQ29kZSIsInN0YXR1c1N0ciIsInJlZCIsInllbGxvdyIsImN5YW4iLCJncmVlbiIsImZuIiwid2hpdGUiLCJncmV5IiwiZW5kTG9nRm9ybWF0dGVyIiwibG9nIiwiaW5mbyIsImpzb25SZXNwIiwicmVxdWVzdFN0YXJ0TG9nZ2luZ0Zvcm1hdCIsInN0YXJ0TG9nRm9ybWF0dGVyIiwiZGF0YSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwic3Vic3RyaW5nIiwiaWduIiwiaW1tZWRpYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFLQSxTQUFTQSxPQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUVyQkEsRUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNDLE9BQUosQ0FBWSxJQUFaLEVBQWtCLEtBQWxCLENBQU47QUFDQUQsRUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNDLE9BQUosQ0FBWSxnQ0FBWixFQUNKLFVBQVVDLENBQVYsRUFBYUMsSUFBYixFQUFtQkMsR0FBbkIsRUFBd0I7QUFDdEIsV0FBUSxxQkFBb0JELElBQUssaUJBQWdCQyxHQUFJLGdCQUFyRDtBQUNELEdBSEcsQ0FBTjtBQUlBLE1BQUlDLEVBQUUsR0FBSSxhQUFZTCxHQUFJLElBQTFCO0FBQ0EsU0FBTyxJQUFJTSxRQUFKLENBQWEsa0JBQWIsRUFBaUNELEVBQWpDLENBQVA7QUFDRDs7QUFFRCxTQUFTRSx1QkFBVCxDQUFrQ0MsTUFBbEMsRUFBMENDLEdBQTFDLEVBQStDQyxHQUEvQyxFQUFvRDtBQUNsRCxNQUFJQyxNQUFNLEdBQUdELEdBQUcsQ0FBQ0UsVUFBakI7QUFDQSxNQUFJQyxTQUFTLEdBQUcsU0FBaEI7O0FBQ0EsTUFBSUYsTUFBTSxJQUFJLEdBQWQsRUFBbUI7QUFDakJFLElBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDQyxHQUF0QjtBQUNELEdBRkQsTUFFTyxJQUFJSCxNQUFNLElBQUksR0FBZCxFQUFtQjtBQUN4QkUsSUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNFLE1BQXRCO0FBQ0QsR0FGTSxNQUVBLElBQUlKLE1BQU0sSUFBSSxHQUFkLEVBQW1CO0FBQ3hCRSxJQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FBQ0csSUFBdEI7QUFDRCxHQUZNLE1BRUE7QUFDTEgsSUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNJLEtBQXRCO0FBQ0Q7O0FBQ0QsTUFBSUMsRUFBRSxHQUFHbkIsT0FBTyxDQUFFLEdBQUUsb0JBQW9Cb0IsS0FBTSxHQUFFTixTQUFVLElBQUcsMkNBQTJDTyxJQUFLLEVBQTdGLENBQWhCO0FBQ0EsU0FBT0YsRUFBRSxDQUFDVixNQUFELEVBQVNDLEdBQVQsRUFBY0MsR0FBZCxDQUFUO0FBQ0Q7O0FBRUQsTUFBTVcsZUFBZSxHQUFHLHFCQUFPLENBQUNiLE1BQUQsRUFBU0MsR0FBVCxFQUFjQyxHQUFkLEtBQXNCO0FBQ25EWSxrQkFBSUMsSUFBSixDQUFTaEIsdUJBQXVCLENBQUNDLE1BQUQsRUFBU0MsR0FBVCxFQUFjQyxHQUFkLENBQWhDLEVBQ0UsQ0FBQ0EsR0FBRyxDQUFDYyxRQUFKLElBQWdCLEVBQWpCLEVBQXFCSixJQUR2QjtBQUVELENBSHVCLENBQXhCOztBQUtBLE1BQU1LLHlCQUF5QixHQUFHMUIsT0FBTyxDQUFFLEdBQUUsTUFBTW9CLEtBQU0sSUFBRyxVQUFVQSxLQUFNLElBQUcsT0FBT0EsS0FBTSxFQUFuRCxDQUF6QztBQUVBLE1BQU1PLGlCQUFpQixHQUFHLHFCQUFPLENBQUNsQixNQUFELEVBQVNDLEdBQVQsRUFBY0MsR0FBZCxLQUFzQjtBQUVyRCxNQUFJaUIsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsTUFBSTtBQUNGLFFBQUlsQixHQUFHLENBQUNtQixJQUFSLEVBQWM7QUFDWkQsTUFBQUEsSUFBSSxHQUFHRSxJQUFJLENBQUNDLFNBQUwsQ0FBZXJCLEdBQUcsQ0FBQ21CLElBQW5CLEVBQXlCRyxTQUF6QixDQUFtQyxDQUFuQyxFQUFzQyxJQUF0QyxDQUFQO0FBQ0Q7QUFDRixHQUpELENBSUUsT0FBT0MsR0FBUCxFQUFZLENBQUU7O0FBQ2hCVixrQkFBSUMsSUFBSixDQUFTRSx5QkFBeUIsQ0FBQ2pCLE1BQUQsRUFBU0MsR0FBVCxFQUFjQyxHQUFkLENBQWxDLEVBQXNEaUIsSUFBSSxDQUFDUCxJQUEzRDtBQUNELENBVHlCLEVBU3ZCO0FBQUNhLEVBQUFBLFNBQVMsRUFBRTtBQUFaLENBVHVCLENBQTFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdjb2xvcnMnO1xuaW1wb3J0IG1vcmdhbiBmcm9tICdtb3JnYW4nO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cblxuLy8gQ29waWVkIHRoZSBtb3JnYW4gY29tcGlsZSBmdW5jdGlvbiBvdmVyIHNvIHRoYXQgY29vbGVyIGZvcm1hdHNcbi8vIG1heSBiZSBjb25maWd1cmVkXG5mdW5jdGlvbiBjb21waWxlIChmbXQpIHtcbiAgLy8gZXNjYXBlIHF1b3Rlc1xuICBmbXQgPSBmbXQucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpO1xuICBmbXQgPSBmbXQucmVwbGFjZSgvOihbLVxcd117Mix9KSg/OlxcWyhbXlxcXV0rKVxcXSk/L2csXG4gICAgZnVuY3Rpb24gKF8sIG5hbWUsIGFyZykge1xuICAgICAgcmV0dXJuIGBcIlxcbiAgICArICh0b2tlbnNbXCIke25hbWV9XCJdKHJlcSwgcmVzLCBcIiR7YXJnfVwiKSB8fCBcIi1cIikgKyBcImA7XG4gICAgfSk7XG4gIGxldCBqcyA9IGAgIHJldHVybiBcIiR7Zm10fVwiO2A7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ3Rva2VucywgcmVxLCByZXMnLCBqcyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RFbmRMb2dnaW5nRm9ybWF0ICh0b2tlbnMsIHJlcSwgcmVzKSB7XG4gIGxldCBzdGF0dXMgPSByZXMuc3RhdHVzQ29kZTtcbiAgbGV0IHN0YXR1c1N0ciA9ICc6c3RhdHVzJztcbiAgaWYgKHN0YXR1cyA+PSA1MDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIucmVkO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA+PSA0MDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIueWVsbG93O1xuICB9IGVsc2UgaWYgKHN0YXR1cyA+PSAzMDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIuY3lhbjtcbiAgfSBlbHNlIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIuZ3JlZW47XG4gIH1cbiAgbGV0IGZuID0gY29tcGlsZShgJHsnPC0tIDptZXRob2QgOnVybCAnLndoaXRlfSR7c3RhdHVzU3RyfSAkeyc6cmVzcG9uc2UtdGltZSBtcyAtIDpyZXNbY29udGVudC1sZW5ndGhdJy5ncmV5fWApO1xuICByZXR1cm4gZm4odG9rZW5zLCByZXEsIHJlcyk7XG59XG5cbmNvbnN0IGVuZExvZ0Zvcm1hdHRlciA9IG1vcmdhbigodG9rZW5zLCByZXEsIHJlcykgPT4ge1xuICBsb2cuaW5mbyhyZXF1ZXN0RW5kTG9nZ2luZ0Zvcm1hdCh0b2tlbnMsIHJlcSwgcmVzKSxcbiAgICAocmVzLmpzb25SZXNwIHx8ICcnKS5ncmV5KTtcbn0pO1xuXG5jb25zdCByZXF1ZXN0U3RhcnRMb2dnaW5nRm9ybWF0ID0gY29tcGlsZShgJHsnLS0+Jy53aGl0ZX0gJHsnOm1ldGhvZCcud2hpdGV9ICR7Jzp1cmwnLndoaXRlfWApO1xuXG5jb25zdCBzdGFydExvZ0Zvcm1hdHRlciA9IG1vcmdhbigodG9rZW5zLCByZXEsIHJlcykgPT4ge1xuICAvLyBtb3JnYW4gb3V0cHV0IGlzIHJlZGlyZWN0ZWQgc3RyYWlnaHQgdG8gd2luc3RvblxuICBsZXQgZGF0YSA9ICcnO1xuICB0cnkge1xuICAgIGlmIChyZXEuYm9keSkge1xuICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5KS5zdWJzdHJpbmcoMCwgMTAwMCk7XG4gICAgfVxuICB9IGNhdGNoIChpZ24pIHt9XG4gIGxvZy5pbmZvKHJlcXVlc3RTdGFydExvZ2dpbmdGb3JtYXQodG9rZW5zLCByZXEsIHJlcyksIGRhdGEuZ3JleSk7XG59LCB7aW1tZWRpYXRlOiB0cnVlfSk7XG5cbmV4cG9ydCB7IGVuZExvZ0Zvcm1hdHRlciwgc3RhcnRMb2dGb3JtYXR0ZXIgfTtcbiJdLCJmaWxlIjoibGliL2V4cHJlc3MvZXhwcmVzcy1sb2dnaW5nLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
