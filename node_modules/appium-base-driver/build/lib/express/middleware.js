"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allowCrossDomain = allowCrossDomain;
exports.fixPythonContentType = fixPythonContentType;
exports.defaultToJSONContentType = defaultToJSONContentType;
exports.catchAllHandler = catchAllHandler;
exports.catch404Handler = catch404Handler;
exports.catch4XXHandler = catch4XXHandler;

var _logger = _interopRequireDefault(require("./logger"));

var _protocol = require("../protocol");

function allowCrossDomain(req, res, next) {
  try {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,POST,PUT,OPTIONS,DELETE');
    res.header('Access-Control-Allow-Headers', 'origin, content-type, accept');

    if ('OPTIONS' === req.method) {
      res.sendStatus(200);
    } else {
      next();
    }
  } catch (err) {
    _logger.default.error(`Unexpected error: ${err.stack}`);

    next();
  }
}

function fixPythonContentType(req, res, next) {
  if (/^\/wd/.test(req.path) && /^Python/.test(req.headers['user-agent'])) {
    if (req.headers['content-type'] === 'application/x-www-form-urlencoded') {
      req.headers['content-type'] = 'application/json; charset=utf-8';
    }
  }

  next();
}

function defaultToJSONContentType(req, res, next) {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/json; charset=utf-8';
  }

  next();
}

function catchAllHandler(err, req, res, next) {
  _logger.default.error(`Uncaught error: ${err.message}`);

  _logger.default.error('Sending generic error response');

  try {
    res.status(500).send({
      status: _protocol.errors.UnknownError.code(),
      value: `ERROR running Appium command: ${err.message}`
    });

    _logger.default.error(err);
  } catch (ign) {
    next(ign);
  }
}

function catch4XXHandler(err, req, res, next) {
  if (err.status >= 400 && err.status < 500) {
    _logger.default.debug(`Setting content type to 'text/plain' for HTTP status '${err.status}'`);

    res.set('content-type', 'text/plain');
    res.status(err.status).send(`Unable to process request: ${err.message}`);
  } else {
    next(err);
  }
}

function catch404Handler(req, res) {
  _logger.default.debug('No route found. Setting content type to \'text/plain\'');

  res.set('content-type', 'text/plain');
  res.status(404).send(`The URL '${req.originalUrl}' did not map to a valid resource`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL21pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiYWxsb3dDcm9zc0RvbWFpbiIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXIiLCJtZXRob2QiLCJzZW5kU3RhdHVzIiwiZXJyIiwibG9nIiwiZXJyb3IiLCJzdGFjayIsImZpeFB5dGhvbkNvbnRlbnRUeXBlIiwidGVzdCIsInBhdGgiLCJoZWFkZXJzIiwiZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlIiwiY2F0Y2hBbGxIYW5kbGVyIiwibWVzc2FnZSIsInN0YXR1cyIsInNlbmQiLCJlcnJvcnMiLCJVbmtub3duRXJyb3IiLCJjb2RlIiwidmFsdWUiLCJpZ24iLCJjYXRjaDRYWEhhbmRsZXIiLCJkZWJ1ZyIsInNldCIsImNhdGNoNDA0SGFuZGxlciIsIm9yaWdpbmFsVXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBLFNBQVNBLGdCQUFULENBQTJCQyxHQUEzQixFQUFnQ0MsR0FBaEMsRUFBcUNDLElBQXJDLEVBQTJDO0FBQ3pDLE1BQUk7QUFDRkQsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsNkJBQVgsRUFBMEMsR0FBMUM7QUFDQUYsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsNkJBQTNDO0FBQ0FGLElBQUFBLEdBQUcsQ0FBQ0UsTUFBSixDQUFXLDhCQUFYLEVBQTJDLDhCQUEzQzs7QUFHQSxRQUFJLGNBQWNILEdBQUcsQ0FBQ0ksTUFBdEIsRUFBOEI7QUFDNUJILE1BQUFBLEdBQUcsQ0FBQ0ksVUFBSixDQUFlLEdBQWY7QUFDRCxLQUZELE1BRU87QUFDTEgsTUFBQUEsSUFBSTtBQUNMO0FBQ0YsR0FYRCxDQVdFLE9BQU9JLEdBQVAsRUFBWTtBQUNaQyxvQkFBSUMsS0FBSixDQUFXLHFCQUFvQkYsR0FBRyxDQUFDRyxLQUFNLEVBQXpDOztBQUNBUCxJQUFBQSxJQUFJO0FBQ0w7QUFDRjs7QUFFRCxTQUFTUSxvQkFBVCxDQUErQlYsR0FBL0IsRUFBb0NDLEdBQXBDLEVBQXlDQyxJQUF6QyxFQUErQztBQUU3QyxNQUFJLFFBQVFTLElBQVIsQ0FBYVgsR0FBRyxDQUFDWSxJQUFqQixLQUEwQixVQUFVRCxJQUFWLENBQWVYLEdBQUcsQ0FBQ2EsT0FBSixDQUFZLFlBQVosQ0FBZixDQUE5QixFQUF5RTtBQUN2RSxRQUFJYixHQUFHLENBQUNhLE9BQUosQ0FBWSxjQUFaLE1BQWdDLG1DQUFwQyxFQUF5RTtBQUN2RWIsTUFBQUEsR0FBRyxDQUFDYSxPQUFKLENBQVksY0FBWixJQUE4QixpQ0FBOUI7QUFDRDtBQUNGOztBQUNEWCxFQUFBQSxJQUFJO0FBQ0w7O0FBRUQsU0FBU1ksd0JBQVQsQ0FBbUNkLEdBQW5DLEVBQXdDQyxHQUF4QyxFQUE2Q0MsSUFBN0MsRUFBbUQ7QUFDakQsTUFBSSxDQUFDRixHQUFHLENBQUNhLE9BQUosQ0FBWSxjQUFaLENBQUwsRUFBa0M7QUFDaENiLElBQUFBLEdBQUcsQ0FBQ2EsT0FBSixDQUFZLGNBQVosSUFBOEIsaUNBQTlCO0FBQ0Q7O0FBQ0RYLEVBQUFBLElBQUk7QUFDTDs7QUFFRCxTQUFTYSxlQUFULENBQTBCVCxHQUExQixFQUErQk4sR0FBL0IsRUFBb0NDLEdBQXBDLEVBQXlDQyxJQUF6QyxFQUErQztBQUM3Q0ssa0JBQUlDLEtBQUosQ0FBVyxtQkFBa0JGLEdBQUcsQ0FBQ1UsT0FBUSxFQUF6Qzs7QUFDQVQsa0JBQUlDLEtBQUosQ0FBVSxnQ0FBVjs7QUFDQSxNQUFJO0FBQ0ZQLElBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUNuQkQsTUFBQUEsTUFBTSxFQUFFRSxpQkFBT0MsWUFBUCxDQUFvQkMsSUFBcEIsRUFEVztBQUVuQkMsTUFBQUEsS0FBSyxFQUFHLGlDQUFnQ2hCLEdBQUcsQ0FBQ1UsT0FBUTtBQUZqQyxLQUFyQjs7QUFJQVQsb0JBQUlDLEtBQUosQ0FBVUYsR0FBVjtBQUNELEdBTkQsQ0FNRSxPQUFPaUIsR0FBUCxFQUFZO0FBQ1pyQixJQUFBQSxJQUFJLENBQUNxQixHQUFELENBQUo7QUFDRDtBQUNGOztBQUVELFNBQVNDLGVBQVQsQ0FBMEJsQixHQUExQixFQUErQk4sR0FBL0IsRUFBb0NDLEdBQXBDLEVBQXlDQyxJQUF6QyxFQUErQztBQUM3QyxNQUFJSSxHQUFHLENBQUNXLE1BQUosSUFBYyxHQUFkLElBQXFCWCxHQUFHLENBQUNXLE1BQUosR0FBYSxHQUF0QyxFQUEyQztBQUd6Q1Ysb0JBQUlrQixLQUFKLENBQVcseURBQXdEbkIsR0FBRyxDQUFDVyxNQUFPLEdBQTlFOztBQUNBaEIsSUFBQUEsR0FBRyxDQUFDeUIsR0FBSixDQUFRLGNBQVIsRUFBd0IsWUFBeEI7QUFDQXpCLElBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBV1gsR0FBRyxDQUFDVyxNQUFmLEVBQXVCQyxJQUF2QixDQUE2Qiw4QkFBNkJaLEdBQUcsQ0FBQ1UsT0FBUSxFQUF0RTtBQUNELEdBTkQsTUFNTztBQUNMZCxJQUFBQSxJQUFJLENBQUNJLEdBQUQsQ0FBSjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU3FCLGVBQVQsQ0FBMEIzQixHQUExQixFQUErQkMsR0FBL0IsRUFBb0M7QUFHbENNLGtCQUFJa0IsS0FBSixDQUFVLHdEQUFWOztBQUNBeEIsRUFBQUEsR0FBRyxDQUFDeUIsR0FBSixDQUFRLGNBQVIsRUFBd0IsWUFBeEI7QUFDQXpCLEVBQUFBLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFzQixZQUFXbEIsR0FBRyxDQUFDNEIsV0FBWSxtQ0FBakQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vcHJvdG9jb2wnO1xuXG5cbmZ1bmN0aW9uIGFsbG93Q3Jvc3NEb21haW4gKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHRyeSB7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICByZXMuaGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ0dFVCxQT1NULFBVVCxPUFRJT05TLERFTEVURScpO1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMnLCAnb3JpZ2luLCBjb250ZW50LXR5cGUsIGFjY2VwdCcpO1xuXG4gICAgLy8gbmVlZCB0byByZXNwb25kIDIwMCB0byBPUFRJT05TXG4gICAgaWYgKCdPUFRJT05TJyA9PT0gcmVxLm1ldGhvZCkge1xuICAgICAgcmVzLnNlbmRTdGF0dXMoMjAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKGBVbmV4cGVjdGVkIGVycm9yOiAke2Vyci5zdGFja31gKTtcbiAgICBuZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZml4UHl0aG9uQ29udGVudFR5cGUgKHJlcSwgcmVzLCBuZXh0KSB7XG4gIC8vIGhhY2sgYmVjYXVzZSBweXRob24gY2xpZW50IGxpYnJhcnkgZ2l2ZXMgdXMgd3JvbmcgY29udGVudC10eXBlXG4gIGlmICgvXlxcL3dkLy50ZXN0KHJlcS5wYXRoKSAmJiAvXlB5dGhvbi8udGVzdChyZXEuaGVhZGVyc1sndXNlci1hZ2VudCddKSkge1xuICAgIGlmIChyZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10gPT09ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSB7XG4gICAgICByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCc7XG4gICAgfVxuICB9XG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlIChyZXEsIHJlcywgbmV4dCkge1xuICBpZiAoIXJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSkge1xuICAgIHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04JztcbiAgfVxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGNhdGNoQWxsSGFuZGxlciAoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICBsb2cuZXJyb3IoYFVuY2F1Z2h0IGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICBsb2cuZXJyb3IoJ1NlbmRpbmcgZ2VuZXJpYyBlcnJvciByZXNwb25zZScpO1xuICB0cnkge1xuICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHtcbiAgICAgIHN0YXR1czogZXJyb3JzLlVua25vd25FcnJvci5jb2RlKCksXG4gICAgICB2YWx1ZTogYEVSUk9SIHJ1bm5pbmcgQXBwaXVtIGNvbW1hbmQ6ICR7ZXJyLm1lc3NhZ2V9YFxuICAgIH0pO1xuICAgIGxvZy5lcnJvcihlcnIpO1xuICB9IGNhdGNoIChpZ24pIHtcbiAgICBuZXh0KGlnbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2F0Y2g0WFhIYW5kbGVyIChlcnIsIHJlcSwgcmVzLCBuZXh0KSB7XG4gIGlmIChlcnIuc3RhdHVzID49IDQwMCAmJiBlcnIuc3RhdHVzIDwgNTAwKSB7XG4gICAgLy8gc2V0IHRoZSBjb250ZW50IHR5cGUgdG8gYHRleHQvcGxhaW5gXG4gICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9zZWxlbml1bS93aWtpL0pzb25XaXJlUHJvdG9jb2wjUmVzcG9uc2VzXG4gICAgbG9nLmRlYnVnKGBTZXR0aW5nIGNvbnRlbnQgdHlwZSB0byAndGV4dC9wbGFpbicgZm9yIEhUVFAgc3RhdHVzICcke2Vyci5zdGF0dXN9J2ApO1xuICAgIHJlcy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluJyk7XG4gICAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzKS5zZW5kKGBVbmFibGUgdG8gcHJvY2VzcyByZXF1ZXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9IGVsc2Uge1xuICAgIG5leHQoZXJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXRjaDQwNEhhbmRsZXIgKHJlcSwgcmVzKSB7XG4gIC8vIHNldCB0aGUgY29udGVudCB0eXBlIHRvIGB0ZXh0L3BsYWluYFxuICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3NlbGVuaXVtL3dpa2kvSnNvbldpcmVQcm90b2NvbCNSZXNwb25zZXNcbiAgbG9nLmRlYnVnKCdObyByb3V0ZSBmb3VuZC4gU2V0dGluZyBjb250ZW50IHR5cGUgdG8gXFwndGV4dC9wbGFpblxcJycpO1xuICByZXMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbicpO1xuICByZXMuc3RhdHVzKDQwNCkuc2VuZChgVGhlIFVSTCAnJHtyZXEub3JpZ2luYWxVcmx9JyBkaWQgbm90IG1hcCB0byBhIHZhbGlkIHJlc291cmNlYCk7XG59XG5cbmV4cG9ydCB7IGFsbG93Q3Jvc3NEb21haW4sIGZpeFB5dGhvbkNvbnRlbnRUeXBlLCBkZWZhdWx0VG9KU09OQ29udGVudFR5cGUsIGNhdGNoQWxsSGFuZGxlciwgY2F0Y2g0MDRIYW5kbGVyLCBjYXRjaDRYWEhhbmRsZXIgfTtcbiJdLCJmaWxlIjoibGliL2V4cHJlc3MvbWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
