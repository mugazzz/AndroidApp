"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.isSessionCommand = isSessionCommand;
exports.driverShouldDoJwpProxy = driverShouldDoJwpProxy;
exports.IMAGE_ELEMENT_PREFIX = exports.W3C_ELEMENT_KEY = exports.MJSONWP_ELEMENT_KEY = exports.Protocol = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _validators = require("./validators");

var _errors = require("./errors");

var _routes = require("./routes");

var _helpers = require("../basedriver/helpers");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

const GENERIC_PROTOCOL = 'GENERIC';

const mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');

const w3cLog = _appiumSupport.logger.getLogger('W3C');

const genericProtocolLog = _appiumSupport.logger.getLogger(GENERIC_PROTOCOL);

const JSONWP_SUCCESS_STATUS_CODE = 0;
const LOG_OBJ_LENGTH = 1024;
const MJSONWP_ELEMENT_KEY = 'ELEMENT';
exports.MJSONWP_ELEMENT_KEY = MJSONWP_ELEMENT_KEY;
const W3C_ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf';
exports.W3C_ELEMENT_KEY = W3C_ELEMENT_KEY;
const IMAGE_ELEMENT_PREFIX = 'appium-image-element-';
exports.IMAGE_ELEMENT_PREFIX = IMAGE_ELEMENT_PREFIX;
const CREATE_SESSION_COMMAND = 'createSession';
const DELETE_SESSION_COMMAND = 'deleteSession';
const IMG_EL_BODY_RE = new RegExp(`"(${W3C_ELEMENT_KEY}|${MJSONWP_ELEMENT_KEY})":\s*` + `"${IMAGE_ELEMENT_PREFIX}[^"]+"`);
const IMG_EL_URL_RE = new RegExp(`/(element|screenshot)` + `/${IMAGE_ELEMENT_PREFIX}[^/]+`);

class Protocol {}

exports.Protocol = Protocol;

class SessionsCache {
  constructor(max) {
    this._cache = new _lruCache.default({
      max
    });
  }

  getLogger(sessionId, protocol) {
    if (sessionId) {
      if (this._cache.has(sessionId)) {
        const value = this._cache.get(sessionId);

        if (value.logger) {
          return value.logger;
        }

        protocol = protocol || value.protocol;
      }

      return _appiumSupport.logger.getLogger(`${protocol || GENERIC_PROTOCOL} ` + `(${sessionId.substring(0, Math.min(sessionId.length, 8))})`);
    }

    switch (protocol) {
      case _driver.default.DRIVER_PROTOCOL.W3C:
        return w3cLog;

      case _driver.default.DRIVER_PROTOCOL.MJSONWP:
        return mjsonwpLog;

      default:
        return genericProtocolLog;
    }
  }

  getProtocol(sessionId) {
    return (this._cache.get(sessionId) || {}).protocol;
  }

  putSession(sessionId, value) {
    if (sessionId && value) {
      this._cache.set(sessionId, {
        protocol: value,
        logger: this.getLogger(sessionId, value)
      });
    }

    return value;
  }

  resetLogger(sessionId) {
    if (this._cache.has(sessionId)) {
      this._cache.get(sessionId).logger = null;
    }
  }

}

const SESSIONS_CACHE = new SessionsCache(100);

function extractProtocol(driver, sessionId = null) {
  const dstDriver = _lodash.default.isFunction(driver.driverForSession) ? driver.driverForSession(sessionId) : driver;

  if (dstDriver === driver) {
    return driver.protocol;
  }

  return dstDriver ? dstDriver.protocol : SESSIONS_CACHE.getProtocol(sessionId);
}

function isSessionCommand(command) {
  return !_lodash.default.includes(_routes.NO_SESSION_ID_COMMANDS, command);
}

function wrapParams(paramSets, jsonObj) {
  let res = jsonObj;

  if (_lodash.default.isArray(jsonObj) || !_lodash.default.isObject(jsonObj)) {
    res = {};
    res[paramSets.wrap] = jsonObj;
  }

  return res;
}

function unwrapParams(paramSets, jsonObj) {
  let res = jsonObj;

  if (_lodash.default.isObject(jsonObj)) {
    if (jsonObj[paramSets.unwrap]) {
      res = jsonObj[paramSets.unwrap];
    }
  }

  return res;
}

function checkParams(paramSets, jsonObj, protocol) {
  let requiredParams = [];
  let optionalParams = [];

  let receivedParams = _lodash.default.keys(jsonObj);

  if (paramSets) {
    if (paramSets.required) {
      if (!_lodash.default.isArray(_lodash.default.first(paramSets.required))) {
        requiredParams = [paramSets.required];
      } else {
        requiredParams = paramSets.required;
      }
    }

    if (paramSets.optional) {
      optionalParams = paramSets.optional;
    }

    if (paramSets.validate) {
      let message = paramSets.validate(jsonObj, protocol);

      if (message) {
        throw new _errors.errors.BadParametersError(message, jsonObj);
      }
    }
  }

  if (requiredParams.length === 0) {
    return;
  }

  if (optionalParams.indexOf('sessionId') === -1) {
    optionalParams.push('sessionId');
  }

  if (optionalParams.indexOf('id') === -1) {
    optionalParams.push('id');
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = requiredParams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let params = _step.value;

      if (_lodash.default.difference(receivedParams, params, optionalParams).length === 0 && _lodash.default.difference(params, receivedParams).length === 0) {
        return;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  throw new _errors.errors.BadParametersError(paramSets, receivedParams);
}

function makeArgs(requestParams, jsonObj, payloadParams, protocol) {
  let urlParams = _lodash.default.keys(requestParams).reverse();

  let requiredParams = payloadParams.required;

  if (_lodash.default.isArray(_lodash.default.first(payloadParams.required))) {
    let keys = _lodash.default.keys(jsonObj);

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = payloadParams.required[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let params = _step2.value;

        if (_lodash.default.without(params, ...keys).length === 0) {
          requiredParams = params;
          break;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  let args;

  if (_lodash.default.isFunction(payloadParams.makeArgs)) {
    args = payloadParams.makeArgs(jsonObj, protocol);
  } else {
    args = _lodash.default.flatten(requiredParams).map(p => jsonObj[p]);

    if (payloadParams.optional) {
      args = args.concat(_lodash.default.flatten(payloadParams.optional).map(p => jsonObj[p]));
    }
  }

  args = args.concat(urlParams.map(u => requestParams[u]));
  return args;
}

function routeConfiguringFunction(driver) {
  if (!driver.sessionExists) {
    throw new Error('Drivers used with MJSONWP must implement `sessionExists`');
  }

  if (!(driver.executeCommand || driver.execute)) {
    throw new Error('Drivers used with MJSONWP must implement `executeCommand` or `execute`');
  }

  return function (app) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _lodash.default.toPairs(_routes.METHOD_MAP)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let _step3$value = (0, _slicedToArray2.default)(_step3.value, 2),
            path = _step3$value[0],
            methods = _step3$value[1];

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _lodash.default.toPairs(methods)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            let _step4$value = (0, _slicedToArray2.default)(_step4.value, 2),
                method = _step4$value[0],
                spec = _step4$value[1];

            buildHandler(app, method, path, spec, driver, isSessionCommand(spec.command));
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  };
}

function buildHandler(app, method, path, spec, driver, isSessCmd) {
  let asyncHandler = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (req, res) {
      let jsonObj = req.body;
      let httpResBody = {};
      let httpStatus = 200;
      let newSessionId;
      let currentProtocol = extractProtocol(driver, req.params.sessionId);

      try {
        if (isSessCmd && !driver.sessionExists(req.params.sessionId)) {
          throw new _errors.errors.NoSuchDriverError();
        }

        if (isSessCmd && driverShouldDoJwpProxy(driver, req, spec.command)) {
          yield doJwpProxy(driver, req, res);
          return;
        }

        if (!spec.command) {
          throw new _errors.errors.NotImplementedError();
        }

        if (spec.payloadParams && spec.payloadParams.wrap) {
          jsonObj = wrapParams(spec.payloadParams, jsonObj);
        }

        if (spec.payloadParams && spec.payloadParams.unwrap) {
          jsonObj = unwrapParams(spec.payloadParams, jsonObj);
        }

        if (spec.command === CREATE_SESSION_COMMAND) {
          currentProtocol = _driver.default.determineProtocol(...makeArgs(req.params, jsonObj, spec.payloadParams || {}));
        }

        checkParams(spec.payloadParams, jsonObj, currentProtocol);
        let args = makeArgs(req.params, jsonObj, spec.payloadParams || {}, currentProtocol);
        let driverRes;

        if (_validators.validators[spec.command]) {
          _validators.validators[spec.command](...args);
        }

        SESSIONS_CACHE.getLogger(req.params.sessionId, currentProtocol).debug(`Calling ` + `${driver.constructor.name}.${spec.command}() with args: ` + _lodash.default.truncate(JSON.stringify(args), {
          length: LOG_OBJ_LENGTH
        }));

        if (driver.executeCommand) {
          driverRes = yield driver.executeCommand(spec.command, ...args);
        } else {
          driverRes = yield driver.execute(spec.command, ...args);
        }

        currentProtocol = extractProtocol(driver, req.params.sessionId) || currentProtocol;

        if (_lodash.default.isPlainObject(driverRes) && _lodash.default.has(driverRes, 'protocol')) {
          currentProtocol = driverRes.protocol || currentProtocol;

          if (driverRes.error) {
            throw driverRes.error;
          }

          driverRes = driverRes.value;
        }

        if (spec.command === CREATE_SESSION_COMMAND) {
          newSessionId = driverRes[0];
          SESSIONS_CACHE.putSession(newSessionId, currentProtocol);
          SESSIONS_CACHE.getLogger(newSessionId, currentProtocol).debug(`Cached the protocol value '${currentProtocol}' for the new session ${newSessionId}`);

          if (currentProtocol === _driver.default.DRIVER_PROTOCOL.MJSONWP) {
            driverRes = driverRes[1];
          } else if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
            driverRes = {
              capabilities: driverRes[1]
            };
          }
        }

        if (driverRes) {
          if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
            driverRes = (0, _helpers.renameKey)(driverRes, MJSONWP_ELEMENT_KEY, W3C_ELEMENT_KEY);
          } else {
            driverRes = (0, _helpers.renameKey)(driverRes, W3C_ELEMENT_KEY, MJSONWP_ELEMENT_KEY);
          }
        }

        if (_lodash.default.isUndefined(driverRes)) {
          driverRes = null;
        }

        if (spec.command === DELETE_SESSION_COMMAND) {
          SESSIONS_CACHE.getLogger(req.params.sessionId, currentProtocol).debug(`Received response: ${_lodash.default.truncate(JSON.stringify(driverRes), {
            length: LOG_OBJ_LENGTH
          })}`);
          SESSIONS_CACHE.getLogger(req.params.sessionId, currentProtocol).debug('But deleting session, so not returning');
          driverRes = null;
        }

        if (_appiumSupport.util.hasValue(driverRes)) {
          if (_appiumSupport.util.hasValue(driverRes.status) && !isNaN(driverRes.status) && parseInt(driverRes.status, 10) !== 0) {
            throw (0, _errors.errorFromMJSONWPStatusCode)(driverRes.status, driverRes.value);
          } else if (_lodash.default.isPlainObject(driverRes.value) && driverRes.value.error) {
            throw (0, _errors.errorFromW3CJsonCode)(driverRes.value.error, driverRes.value.message, driverRes.value.stacktrace);
          }
        }

        if (currentProtocol !== _driver.default.DRIVER_PROTOCOL.W3C) {
          httpResBody.status = _lodash.default.isNil(driverRes) || _lodash.default.isUndefined(driverRes.status) ? JSONWP_SUCCESS_STATUS_CODE : driverRes.status;
        }

        httpResBody.value = driverRes;
        SESSIONS_CACHE.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Responding ` + `to client with driver.${spec.command}() result: ${_lodash.default.truncate(JSON.stringify(driverRes), {
          length: LOG_OBJ_LENGTH
        })}`);

        if (spec.command === DELETE_SESSION_COMMAND) {
          SESSIONS_CACHE.resetLogger(req.params.sessionId);
        }
      } catch (err) {
        let actualErr = err;
        currentProtocol = currentProtocol || extractProtocol(driver, req.params.sessionId || newSessionId);
        let errMsg = err.stacktrace || err.stack;

        if (!_lodash.default.includes(errMsg, err.message)) {
          errMsg = `${err.message}${errMsg ? '\n' + errMsg : ''}`;
        }

        SESSIONS_CACHE.getLogger(req.params.sessionId || newSessionId, currentProtocol).debug(`Encountered ` + `internal error running command: ${errMsg}`);

        if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
          actualErr = err.getActualError();
        }

        if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
          var _getResponseForW3CErr = (0, _errors.getResponseForW3CError)(actualErr);

          var _getResponseForW3CErr2 = (0, _slicedToArray2.default)(_getResponseForW3CErr, 2);

          httpStatus = _getResponseForW3CErr2[0];
          httpResBody = _getResponseForW3CErr2[1];
        } else if (currentProtocol === _driver.default.DRIVER_PROTOCOL.MJSONWP) {
          var _getResponseForJsonwp = (0, _errors.getResponseForJsonwpError)(actualErr);

          var _getResponseForJsonwp2 = (0, _slicedToArray2.default)(_getResponseForJsonwp, 2);

          httpStatus = _getResponseForJsonwp2[0];
          httpResBody = _getResponseForJsonwp2[1];
        } else {
          let jsonwpRes = (0, _errors.getResponseForJsonwpError)(actualErr);
          let w3cRes = (0, _errors.getResponseForW3CError)(actualErr);
          httpResBody = (0, _objectSpread2.default)({}, jsonwpRes[1], w3cRes[1]);
          httpStatus = jsonwpRes[0];
        }
      }

      if (_lodash.default.isString(httpResBody)) {
        res.status(httpStatus).send(httpResBody);
      } else {
        if (newSessionId) {
          if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
            httpResBody.value.sessionId = newSessionId;
          } else {
            httpResBody.sessionId = newSessionId;
          }
        } else {
          httpResBody.sessionId = req.params.sessionId || null;
        }

        if (currentProtocol === _driver.default.DRIVER_PROTOCOL.W3C) {
          delete httpResBody.sessionId;
        }

        res.status(httpStatus).json(httpResBody);
      }
    });

    return function asyncHandler(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  app[method.toLowerCase()](path, (req, res) => {
    _bluebird.default.resolve(asyncHandler(req, res)).done();
  });
}

function driverShouldDoJwpProxy(driver, req, command) {
  if (!driver.proxyActive(req.params.sessionId)) {
    return false;
  }

  if (command === 'deleteSession') {
    return false;
  }

  if (driver.proxyRouteIsAvoided(req.params.sessionId, req.method, req.originalUrl)) {
    return false;
  }

  if (IMG_EL_URL_RE.test(req.originalUrl)) {
    return false;
  }

  const stringBody = JSON.stringify(req.body);

  if (stringBody && IMG_EL_BODY_RE.test(stringBody)) {
    return false;
  }

  return true;
}

function doJwpProxy(_x3, _x4, _x5) {
  return _doJwpProxy.apply(this, arguments);
}

function _doJwpProxy() {
  _doJwpProxy = (0, _asyncToGenerator2.default)(function* (driver, req, res) {
    SESSIONS_CACHE.getLogger(req.params.sessionId, extractProtocol(driver, req.params.sessionId)).info('Driver proxy active, passing request on via HTTP proxy');

    if (!driver.canProxy(req.params.sessionId)) {
      throw new Error('Trying to proxy to a JSONWP server but driver is unable to proxy');
    }

    try {
      const proxiedRes = yield driver.executeCommand('proxyReqRes', req, res, req.params.sessionId);
      if (proxiedRes && proxiedRes.error) throw proxiedRes.error;
    } catch (err) {
      if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
        throw err;
      } else {
        throw new Error(`Could not proxy. Proxy error: ${err.message}`);
      }
    }
  });
  return _doJwpProxy.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
