"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.JWProxy = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _status = require("../jsonwp-status/status");

var _errors = require("../protocol/errors");

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _routes = require("../protocol/routes");

var _protocolConverter = _interopRequireDefault(require("./protocol-converter"));

const log = _appiumSupport.logger.getLogger('JSONWP Proxy');

const LOG_OBJ_LENGTH = 1024;
const DEFAULT_REQUEST_TIMEOUT = 240000;
const _BaseDriver$DRIVER_PR = _driver.default.DRIVER_PROTOCOL,
      MJSONWP = _BaseDriver$DRIVER_PR.MJSONWP,
      W3C = _BaseDriver$DRIVER_PR.W3C;

class JWProxy {
  constructor(opts = {}) {
    Object.assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      timeout: DEFAULT_REQUEST_TIMEOUT
    }, opts);
    this.scheme = this.scheme.toLowerCase();
    this._activeRequests = [];
    this._downstreamProtocol = null;
    this.protocolConverter = new _protocolConverter.default(this.proxy.bind(this));
  }

  request(...args) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const currentRequest = (0, _requestPromise.default)(...args);

      _this._activeRequests.push(currentRequest);

      return yield currentRequest.finally(() => _lodash.default.pull(_this._activeRequests, currentRequest));
    })();
  }

  getActiveRequestsCount() {
    return this._activeRequests.length;
  }

  cancelActiveRequests() {
    try {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._activeRequests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let r = _step.value;
          r.cancel();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } finally {
      this._activeRequests = [];
    }
  }

  endpointRequiresSessionId(endpoint) {
    return !_lodash.default.includes(['/session', '/sessions', '/status'], endpoint);
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
    this.protocolConverter.downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getUrlForProxy(url) {
    if (url === '') {
      url = '/';
    }

    const proxyBase = `${this.scheme}://${this.server}:${this.port}${this.base}`;
    const endpointRe = '(/(session|status))';
    let remainingUrl = '';

    if (/^http/.test(url)) {
      const first = new RegExp(`(https?://.+)${endpointRe}`).exec(url);

      if (!first) {
        throw new Error('Got a complete url but could not extract JWP endpoint');
      }

      remainingUrl = url.replace(first[1], '');
    } else if (new RegExp('^/').test(url)) {
      remainingUrl = url;
    } else {
      throw new Error(`Did not know what to do with url '${url}'`);
    }

    const stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');

    if (stripPrefixRe.test(remainingUrl)) {
      remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
    }

    if (!new RegExp(endpointRe).test(remainingUrl)) {
      remainingUrl = `/session/${this.sessionId}${remainingUrl}`;
    }

    const requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

    if (requiresSessionId && this.sessionId === null) {
      throw new Error('Trying to proxy a session command without session id');
    }

    const sessionBaseRe = new RegExp('^/session/([^/]+)');

    if (sessionBaseRe.test(remainingUrl)) {
      const match = sessionBaseRe.exec(remainingUrl);
      remainingUrl = remainingUrl.replace(match[1], this.sessionId);
    } else if (requiresSessionId) {
      throw new Error(`Could not find :session section for url: ${remainingUrl}`);
    }

    remainingUrl = remainingUrl.replace(/\/$/, '');
    return proxyBase + remainingUrl;
  }

  proxy(url, method, body = null) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      method = method.toUpperCase();

      const newUrl = _this2.getUrlForProxy(url);

      const reqOpts = {
        agent: false,
        url: newUrl,
        method,
        headers: {
          'content-type': 'application/json; charset=utf-8',
          'user-agent': 'appium',
          accept: 'application/json, */*'
        },
        resolveWithFullResponse: true,
        timeout: _this2.timeout
      };

      if (body !== null) {
        if (typeof body !== 'object') {
          body = JSON.parse(body);
        }

        reqOpts.json = body;
      }

      if (method === 'GET') {
        reqOpts.json = null;
      }

      log.debug(`Proxying [${method} ${url || "/"}] to [${method} ${newUrl}] ` + (body ? `with body: ${_lodash.default.truncate(JSON.stringify(body), {
        length: LOG_OBJ_LENGTH
      })}` : 'with no body'));
      let res, resBody;

      try {
        res = yield _this2.request(reqOpts);
        resBody = res.body;
        log.debug(`Got response with status ${res.statusCode}: ${_lodash.default.truncate(JSON.stringify(resBody), {
          length: LOG_OBJ_LENGTH
        })}`);

        if (/\/session$/.test(url) && method === 'POST') {
          if (res.statusCode === 200) {
            _this2.sessionId = resBody.sessionId;
          } else if (res.statusCode === 303) {
            _this2.sessionId = /\/session\/([^/]+)/.exec(resBody)[1];
          }
        }

        const resBodyObj = _appiumSupport.util.safeJsonParse(resBody);

        if (!_this2.downstreamProtocol) {
          _this2.downstreamProtocol = _this2.getProtocolFromResBody(resBodyObj);
        }

        if (res.statusCode < 400 && _this2.downstreamProtocol === MJSONWP && parseInt(resBodyObj.status, 10) !== 0) {
          const message = `The request to ${url} has failed`;
          const err = new Error(message);
          err.message = message;
          err.error = resBody;
          err.statusCode = 500;
          throw err;
        }
      } catch (e) {
        let responseError = e.error;

        try {
          responseError = JSON.parse(responseError);
        } catch (e1) {
          log.warn(`Got an unexpected response: ` + _lodash.default.truncate(_lodash.default.isString(responseError) ? responseError : JSON.stringify(responseError), {
            length: 300
          }));
        }

        throw new _errors.errors.ProxyRequestError(`Could not proxy command to remote server. ` + `Original error: ${e.message}`, responseError, e.statusCode);
      }

      return [res, resBody];
    })();
  }

  getProtocolFromResBody(resBody) {
    if (!_lodash.default.isPlainObject(resBody)) {
      try {
        resBody = JSON.parse(resBody);
      } catch (err) {
        return;
      }
    }

    if (_appiumSupport.util.hasValue(resBody.status)) {
      return MJSONWP;
    }

    if (_appiumSupport.util.hasValue(resBody.value)) {
      return W3C;
    }
  }

  requestToCommandName(url, method) {
    const extractCommandName = pattern => {
      const pathMatch = pattern.exec(url);
      return pathMatch ? (0, _routes.routeToCommandName)(pathMatch[1], method) : null;
    };

    let commandName = (0, _routes.routeToCommandName)(url, method);

    if (!commandName && _lodash.default.includes(url, '/wd/hub/session/')) {
      commandName = extractCommandName(/\/wd\/hub\/session\/[^/]+(.+)/);
    }

    if (!commandName && _lodash.default.includes(url, '/wd/hub/')) {
      commandName = extractCommandName(/\/wd\/hub(\/.+)/);
    }

    return commandName;
  }

  proxyCommand(url, method, body = null) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const commandName = _this3.requestToCommandName(url, method);

      if (!commandName) {
        return yield _this3.proxy(url, method, body);
      }

      log.debug(`Matched '${url}' to command name '${commandName}'`);
      return yield _this3.protocolConverter.convertAndProxy(commandName, url, method, body);
    })();
  }

  command(url, method, body = null) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let response;
      let resBody;

      try {
        var _ref = yield _this4.proxyCommand(url, method, body);

        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);

        response = _ref2[0];
        resBody = _ref2[1];
      } catch (err) {
        if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
          throw err.getActualError();
        }

        throw new _errors.errors.UnknownError(err.message);
      }

      resBody = _appiumSupport.util.safeJsonParse(resBody);

      let protocol = _this4.getProtocolFromResBody(resBody);

      if (protocol === MJSONWP) {
        if (response.statusCode === 200 && resBody.status === 0) {
          return resBody.value;
        }

        const status = parseInt(resBody.status, 10);

        if (!isNaN(status) && status !== 0) {
          let message = resBody.value;

          if (_lodash.default.has(resBody.value, 'message')) {
            message = _lodash.default.isEmpty(message) ? resBody.value.message : `${message} ${resBody.value.message}`;
          }

          throw (0, _errors.errorFromMJSONWPStatusCode)(status, _lodash.default.isEmpty(message) ? (0, _status.getSummaryByCode)(status) : message);
        }
      } else if (protocol === W3C) {
        if (response.statusCode < 300) {
          return resBody.value;
        }

        if (_lodash.default.isPlainObject(resBody.value) && resBody.value.error) {
          throw (0, _errors.errorFromW3CJsonCode)(resBody.value.error, resBody.value.message, resBody.value.stacktrace);
        }
      } else if (response.statusCode === 200) {
        return resBody;
      }

      throw new _errors.errors.UnknownError(`Did not know what to do with response code '${response.statusCode}' ` + `and response body '${_lodash.default.truncate(JSON.stringify(resBody), {
        length: 300
      })}'`);
    })();
  }

  getSessionIdFromUrl(url) {
    const match = url.match(/\/session\/([^/]+)/);
    return match ? match[1] : null;
  }

  proxyReqRes(req, res) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let _ref3 = yield _this5.proxyCommand(req.originalUrl, req.method, req.body),
          _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
          response = _ref4[0],
          body = _ref4[1];

      res.headers = response.headers;
      res.set('content-type', response.headers['content-type']);
      body = _appiumSupport.util.safeJsonParse(body);

      if (body && body.sessionId) {
        const reqSessionId = _this5.getSessionIdFromUrl(req.originalUrl);

        if (reqSessionId) {
          log.info(`Replacing sessionId ${body.sessionId} with ${reqSessionId}`);
          body.sessionId = reqSessionId;
        } else if (_this5.sessionId) {
          log.info(`Replacing sessionId ${body.sessionId} with ${_this5.sessionId}`);
          body.sessionId = _this5.sessionId;
        }
      }

      res.status(response.statusCode).send(JSON.stringify(body));
    })();
  }

}

exports.JWProxy = JWProxy;
var _default = JWProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
