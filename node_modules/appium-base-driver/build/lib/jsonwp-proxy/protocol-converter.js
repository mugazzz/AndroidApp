"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _appiumSupport = require("appium-support");

const log = _appiumSupport.logger.getLogger('Protocol Converter');

const COMMAND_URLS_CONFLICTS = [{
  commandNames: ['execute', 'executeAsync'],
  jsonwpConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute_async' : '/execute'),
  w3cConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute/async' : '/execute/sync')
}, {
  commandNames: ['getElementScreenshot'],
  jsonwpConverter: url => url.replace(/\/element\/([^/]+)\/screenshot$/, '/screenshot/$1'),
  w3cConverter: url => url.replace(/\/screenshot\/([^/]+)/, '/element/$1/screenshot')
}, {
  commandNames: ['getWindowHandles', 'getWindowHandle'],
  jsonwpConverter: url => {
    return /\/window$/.test(url) ? url.replace(/\/window$/, '/window_handle') : url.replace(/\/window\/handle(s?)$/, '/window_handle$1');
  },
  w3cConverter: url => {
    return /\/window_handle$/.test(url) ? url.replace(/\/window_handle$/, '/window') : url.replace(/\/window_handles$/, '/window/handles');
  }
}];
const _BaseDriver$DRIVER_PR = _driver.default.DRIVER_PROTOCOL,
      MJSONWP = _BaseDriver$DRIVER_PR.MJSONWP,
      W3C = _BaseDriver$DRIVER_PR.W3C;

class ProtocolConverter {
  constructor(proxyFunc) {
    this.proxyFunc = proxyFunc;
    this._downstreamProtocol = null;
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getTimeoutRequestObjects(body) {
    if (this.downstreamProtocol === W3C && _lodash.default.has(body, 'ms') && _lodash.default.has(body, 'type')) {
      const typeToW3C = x => x === 'page load' ? 'pageLoad' : x;

      return [{
        [typeToW3C(body.type)]: body.ms
      }];
    }

    if (this.downstreamProtocol === MJSONWP && (!_lodash.default.has(body, 'ms') || !_lodash.default.has(body, 'type'))) {
      const typeToJSONWP = x => x === 'pageLoad' ? 'page load' : x;

      return _lodash.default.toPairs(body).filter(pair => !isNaN(parseFloat(pair[1]))).map(pair => {
        return {
          type: typeToJSONWP(pair[0]),
          ms: pair[1]
        };
      });
    }

    return [body];
  }

  proxySetTimeouts(url, method, body) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let response, resBody;

      const timeoutRequestObjects = _this.getTimeoutRequestObjects(body);

      log.debug(`Will send the following request bodies to /timeouts: ${JSON.stringify(timeoutRequestObjects)}`);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = timeoutRequestObjects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const timeoutObj = _step.value;

          var _ref = yield _this.proxyFunc(url, method, timeoutObj);

          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);

          response = _ref2[0];
          resBody = _ref2[1];

          if (_this.downstreamProtocol !== MJSONWP) {
            return [response, resBody];
          }

          if (response.statusCode >= 400) {
            return [response, resBody];
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return [response, resBody];
    })();
  }

  proxySetWindow(url, method, body) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const bodyObj = _appiumSupport.util.safeJsonParse(body);

      if (_lodash.default.isPlainObject(bodyObj)) {
        if (_this2.downstreamProtocol === W3C && _lodash.default.has(bodyObj, 'name') && !_lodash.default.has(bodyObj, 'handle')) {
          log.debug(`Reassigned 'name' value '${bodyObj.name}' to 'handle' as per W3C spec`);
          return yield _this2.proxyFunc(url, method, {
            handle: bodyObj.name
          });
        }

        if (_this2.downstreamProtocol === MJSONWP && _lodash.default.has(bodyObj, 'handle') && !_lodash.default.has(bodyObj, 'name')) {
          log.debug(`Reassigned 'handle' value '${bodyObj.handle}' to 'name' as per JSONWP spec`);
          return yield _this2.proxyFunc(url, method, {
            name: bodyObj.handle
          });
        }
      }

      return yield _this2.proxyFunc(url, method, body);
    })();
  }

  convertAndProxy(commandName, url, method, body) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this3.downstreamProtocol) {
        return yield _this3.proxyFunc(url, method, body);
      }

      switch (commandName) {
        case 'timeouts':
          return yield _this3.proxySetTimeouts(url, method, body);

        case 'setWindow':
          return yield _this3.proxySetWindow(url, method, body);

        default:
          break;
      }

      for (var _i = 0; _i < COMMAND_URLS_CONFLICTS.length; _i++) {
        const _COMMAND_URLS_CONFLIC = COMMAND_URLS_CONFLICTS[_i],
              commandNames = _COMMAND_URLS_CONFLIC.commandNames,
              jsonwpConverter = _COMMAND_URLS_CONFLIC.jsonwpConverter,
              w3cConverter = _COMMAND_URLS_CONFLIC.w3cConverter;

        if (!commandNames.includes(commandName)) {
          continue;
        }

        const rewrittenUrl = _this3.downstreamProtocol === MJSONWP ? jsonwpConverter(url) : w3cConverter(url);

        if (rewrittenUrl === url) {
          log.debug(`Did not know how to rewrite the original URL '${url}' ` + `for ${_this3.downstreamProtocol} protocol`);
          break;
        }

        log.info(`Rewrote the original URL '${url}' to '${rewrittenUrl}' ` + `for ${_this3.downstreamProtocol} protocol`);
        return yield _this3.proxyFunc(rewrittenUrl, method, body);
      }

      return yield _this3.proxyFunc(url, method, body);
    })();
  }

}

var _default = ProtocolConverter;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
