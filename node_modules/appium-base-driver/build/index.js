"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_WS_PATHNAME_PREFIX = exports.processCapabilities = exports.getSummaryByCode = exports.statusCodes = exports.JWProxy = exports.server = exports.STATIC_DIR = exports.isSessionCommand = exports.NO_SESSION_ID_COMMANDS = exports.routeToCommandName = exports.METHOD_MAP = exports.ALL_COMMANDS = exports.errorFromW3CJsonCode = exports.errorFromCode = exports.errorFromMJSONWPStatusCode = exports.isErrorType = exports.errors = exports.routeConfiguringFunction = exports.Protocol = exports.default = exports.BASEDRIVER_HANDLED_SETTINGS = exports.ImageElement = exports.DeviceSettings = exports.BaseDriver = void 0;

var driver = _interopRequireWildcard(require("./lib/basedriver/driver"));

var image = _interopRequireWildcard(require("./lib/basedriver/image-element"));

var deviceSettings = _interopRequireWildcard(require("./lib/basedriver/device-settings"));

var protocol = _interopRequireWildcard(require("./lib/protocol"));

var staticIndex = _interopRequireWildcard(require("./lib/express/static"));

var serverIndex = _interopRequireWildcard(require("./lib/express/server"));

var proxyIndex = _interopRequireWildcard(require("./lib/jsonwp-proxy/proxy"));

var statusIndex = _interopRequireWildcard(require("./lib/jsonwp-status/status"));

var caps = _interopRequireWildcard(require("./lib/basedriver/capabilities"));

var ws = _interopRequireWildcard(require("./lib/express/websocket"));

const BaseDriver = driver.BaseDriver;
exports.BaseDriver = BaseDriver;
const ImageElement = image.ImageElement;
exports.ImageElement = ImageElement;
const DeviceSettings = deviceSettings.DeviceSettings,
      BASEDRIVER_HANDLED_SETTINGS = deviceSettings.BASEDRIVER_HANDLED_SETTINGS;
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;
exports.DeviceSettings = DeviceSettings;
var _default = BaseDriver;
exports.default = _default;
const Protocol = protocol.Protocol,
      routeConfiguringFunction = protocol.routeConfiguringFunction,
      errors = protocol.errors,
      isErrorType = protocol.isErrorType,
      errorFromMJSONWPStatusCode = protocol.errorFromMJSONWPStatusCode,
      errorFromW3CJsonCode = protocol.errorFromW3CJsonCode,
      ALL_COMMANDS = protocol.ALL_COMMANDS,
      METHOD_MAP = protocol.METHOD_MAP,
      routeToCommandName = protocol.routeToCommandName,
      NO_SESSION_ID_COMMANDS = protocol.NO_SESSION_ID_COMMANDS,
      isSessionCommand = protocol.isSessionCommand;
exports.isSessionCommand = isSessionCommand;
exports.NO_SESSION_ID_COMMANDS = NO_SESSION_ID_COMMANDS;
exports.routeToCommandName = routeToCommandName;
exports.METHOD_MAP = METHOD_MAP;
exports.ALL_COMMANDS = ALL_COMMANDS;
exports.errorFromW3CJsonCode = errorFromW3CJsonCode;
exports.errorFromCode = exports.errorFromMJSONWPStatusCode = errorFromMJSONWPStatusCode;
exports.isErrorType = isErrorType;
exports.errors = errors;
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.Protocol = Protocol;
const STATIC_DIR = staticIndex.STATIC_DIR;
exports.STATIC_DIR = STATIC_DIR;
const server = serverIndex.server;
exports.server = server;
const JWProxy = proxyIndex.JWProxy;
exports.JWProxy = JWProxy;
const statusCodes = statusIndex.codes,
      getSummaryByCode = statusIndex.getSummaryByCode;
exports.getSummaryByCode = getSummaryByCode;
exports.statusCodes = statusCodes;
const processCapabilities = caps.processCapabilities;
exports.processCapabilities = processCapabilities;
const DEFAULT_WS_PATHNAME_PREFIX = ws.DEFAULT_WS_PATHNAME_PREFIX;
exports.DEFAULT_WS_PATHNAME_PREFIX = DEFAULT_WS_PATHNAME_PREFIX;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkJhc2VEcml2ZXIiLCJkcml2ZXIiLCJJbWFnZUVsZW1lbnQiLCJpbWFnZSIsIkRldmljZVNldHRpbmdzIiwiZGV2aWNlU2V0dGluZ3MiLCJCQVNFRFJJVkVSX0hBTkRMRURfU0VUVElOR1MiLCJQcm90b2NvbCIsInByb3RvY29sIiwicm91dGVDb25maWd1cmluZ0Z1bmN0aW9uIiwiZXJyb3JzIiwiaXNFcnJvclR5cGUiLCJlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZSIsImVycm9yRnJvbVczQ0pzb25Db2RlIiwiQUxMX0NPTU1BTkRTIiwiTUVUSE9EX01BUCIsInJvdXRlVG9Db21tYW5kTmFtZSIsIk5PX1NFU1NJT05fSURfQ09NTUFORFMiLCJpc1Nlc3Npb25Db21tYW5kIiwiU1RBVElDX0RJUiIsInN0YXRpY0luZGV4Iiwic2VydmVyIiwic2VydmVySW5kZXgiLCJKV1Byb3h5IiwicHJveHlJbmRleCIsInN0YXR1c0NvZGVzIiwic3RhdHVzSW5kZXgiLCJjb2RlcyIsImdldFN1bW1hcnlCeUNvZGUiLCJwcm9jZXNzQ2FwYWJpbGl0aWVzIiwiY2FwcyIsIkRFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIiwid3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQVdBOztBQWVBOztBQUlBOztBQUtBOztBQUtBOztBQUtBOztBQUtBOztNQWhEUUEsVSxHQUFlQyxNLENBQWZELFU7O01BQ0FFLFksR0FBaUJDLEssQ0FBakJELFk7O01BQ0FFLGMsR0FBZ0RDLGMsQ0FBaERELGM7TUFBZ0JFLDJCLEdBQWdDRCxjLENBQWhDQywyQjs7O2VBR1ROLFU7O01BT2JPLFEsR0FHRUMsUSxDQUhGRCxRO01BQVVFLHdCLEdBR1JELFEsQ0FIUUMsd0I7TUFBMEJDLE0sR0FHbENGLFEsQ0FIa0NFLE07TUFBUUMsVyxHQUcxQ0gsUSxDQUgwQ0csVztNQUM1Q0MsMEIsR0FFRUosUSxDQUZGSSwwQjtNQUE0QkMsb0IsR0FFMUJMLFEsQ0FGMEJLLG9CO01BQXNCQyxZLEdBRWhETixRLENBRmdETSxZO01BQWNDLFUsR0FFOURQLFEsQ0FGOERPLFU7TUFDaEVDLGtCLEdBQ0VSLFEsQ0FERlEsa0I7TUFBb0JDLHNCLEdBQ2xCVCxRLENBRGtCUyxzQjtNQUF3QkMsZ0IsR0FDMUNWLFEsQ0FEMENVLGdCOzs7Ozs7Ozs7Ozs7TUFXdENDLFUsR0FBZUMsVyxDQUFmRCxVOztNQUlBRSxNLEdBQVdDLFcsQ0FBWEQsTTs7TUFLQUUsTyxHQUFZQyxVLENBQVpELE87O01BS09FLFcsR0FBa0NDLFcsQ0FBekNDLEs7TUFBb0JDLGdCLEdBQXFCRixXLENBQXJCRSxnQjs7O01BS3BCQyxtQixHQUF3QkMsSSxDQUF4QkQsbUI7O01BS0FFLDBCLEdBQStCQyxFLENBQS9CRCwwQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptYWluXG5cbi8vIEJhc2VEcml2ZXIgZXhwb3J0c1xuaW1wb3J0ICogYXMgZHJpdmVyIGZyb20gJy4vbGliL2Jhc2Vkcml2ZXIvZHJpdmVyJztcbmltcG9ydCAqIGFzIGltYWdlIGZyb20gJy4vbGliL2Jhc2Vkcml2ZXIvaW1hZ2UtZWxlbWVudCc7XG5pbXBvcnQgKiBhcyBkZXZpY2VTZXR0aW5ncyBmcm9tICcuL2xpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncyc7XG5cbmNvbnN0IHsgQmFzZURyaXZlciB9ID0gZHJpdmVyO1xuY29uc3QgeyBJbWFnZUVsZW1lbnQgfSA9IGltYWdlO1xuY29uc3QgeyBEZXZpY2VTZXR0aW5ncywgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIH0gPSBkZXZpY2VTZXR0aW5ncztcblxuZXhwb3J0IHsgQmFzZURyaXZlciwgRGV2aWNlU2V0dGluZ3MsIEltYWdlRWxlbWVudCwgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIH07XG5leHBvcnQgZGVmYXVsdCBCYXNlRHJpdmVyO1xuXG5cbi8vIE1KU09OV1AgZXhwb3J0c1xuaW1wb3J0ICogYXMgcHJvdG9jb2wgZnJvbSAnLi9saWIvcHJvdG9jb2wnO1xuXG5jb25zdCB7XG4gIFByb3RvY29sLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sIGVycm9ycywgaXNFcnJvclR5cGUsXG4gIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlLCBlcnJvckZyb21XM0NKc29uQ29kZSwgQUxMX0NPTU1BTkRTLCBNRVRIT0RfTUFQLFxuICByb3V0ZVRvQ29tbWFuZE5hbWUsIE5PX1NFU1NJT05fSURfQ09NTUFORFMsIGlzU2Vzc2lvbkNvbW1hbmQsXG59ID0gcHJvdG9jb2w7XG5cbmV4cG9ydCB7XG4gIFByb3RvY29sLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24sIGVycm9ycywgaXNFcnJvclR5cGUsXG4gIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlLCBlcnJvckZyb21XM0NKc29uQ29kZSxcbiAgZXJyb3JGcm9tTUpTT05XUFN0YXR1c0NvZGUgYXMgZXJyb3JGcm9tQ29kZSwgQUxMX0NPTU1BTkRTLCBNRVRIT0RfTUFQLFxuICByb3V0ZVRvQ29tbWFuZE5hbWUsIE5PX1NFU1NJT05fSURfQ09NTUFORFMsIGlzU2Vzc2lvbkNvbW1hbmQgfTtcblxuLy8gRXhwcmVzcyBleHBvcnRzXG5pbXBvcnQgKiBhcyBzdGF0aWNJbmRleCBmcm9tICcuL2xpYi9leHByZXNzL3N0YXRpYyc7XG5jb25zdCB7IFNUQVRJQ19ESVIgfSA9IHN0YXRpY0luZGV4O1xuZXhwb3J0IHsgU1RBVElDX0RJUiB9O1xuXG5pbXBvcnQgKiBhcyBzZXJ2ZXJJbmRleCBmcm9tICcuL2xpYi9leHByZXNzL3NlcnZlcic7XG5jb25zdCB7IHNlcnZlciB9ID0gc2VydmVySW5kZXg7XG5leHBvcnQgeyBzZXJ2ZXIgfTtcblxuLy8ganNvbndwLXByb3h5IGV4cG9ydHNcbmltcG9ydCAqIGFzIHByb3h5SW5kZXggZnJvbSAnLi9saWIvanNvbndwLXByb3h5L3Byb3h5JztcbmNvbnN0IHsgSldQcm94eSB9ID0gcHJveHlJbmRleDtcbmV4cG9ydCB7IEpXUHJveHkgfTtcblxuLy8ganNvbndwLXN0YXR1cyBleHBvcnRzXG5pbXBvcnQgKiBhcyBzdGF0dXNJbmRleCBmcm9tICcuL2xpYi9qc29ud3Atc3RhdHVzL3N0YXR1cyc7XG5jb25zdCB7IGNvZGVzOiBzdGF0dXNDb2RlcywgZ2V0U3VtbWFyeUJ5Q29kZSB9ID0gc3RhdHVzSW5kZXg7XG5leHBvcnQgeyBzdGF0dXNDb2RlcywgZ2V0U3VtbWFyeUJ5Q29kZSB9O1xuXG4vLyBXM0MgY2FwYWJpbGl0aWVzIHBhcnNlclxuaW1wb3J0ICogYXMgY2FwcyBmcm9tICcuL2xpYi9iYXNlZHJpdmVyL2NhcGFiaWxpdGllcyc7XG5jb25zdCB7IHByb2Nlc3NDYXBhYmlsaXRpZXMgfSA9IGNhcHM7XG5leHBvcnQgeyBwcm9jZXNzQ2FwYWJpbGl0aWVzIH07XG5cbi8vIFdlYiBzb2NrZXQgaGVscGVyc1xuaW1wb3J0ICogYXMgd3MgZnJvbSAnLi9saWIvZXhwcmVzcy93ZWJzb2NrZXQnO1xuY29uc3QgeyBERUZBVUxUX1dTX1BBVEhOQU1FX1BSRUZJWCB9ID0gd3M7XG5leHBvcnQgeyBERUZBVUxUX1dTX1BBVEhOQU1FX1BSRUZJWCB9O1xuIl0sImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLiJ9
