"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

const APP_EXTENSION = '.apk';
const APP_STATE_NOT_INSTALLED = 0;
const APP_STATE_NOT_RUNNING = 1;
const APP_STATE_RUNNING_IN_BACKGROUND = 3;
const APP_STATE_RUNNING_IN_FOREGROUND = 4;
let commands = {};
exports.commands = commands;

commands.isAppInstalled = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (appId) {
    return yield this.adb.isAppInstalled(appId);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.queryAppState = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (appId) {
    _logger.default.info(`Querying the state of '${appId}'`);

    if (!(yield this.adb.isAppInstalled(appId))) {
      return APP_STATE_NOT_INSTALLED;
    }

    if (!(yield this.adb.processExists(appId))) {
      return APP_STATE_NOT_RUNNING;
    }

    const output = yield this.adb.shell(['dumpsys', 'window', 'windows']);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = output.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const line = _step.value;

        if (line.includes(appId) && (line.includes('mCurrentFocus') || line.includes('mFocusedApp'))) {
          return APP_STATE_RUNNING_IN_FOREGROUND;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return APP_STATE_RUNNING_IN_BACKGROUND;
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();

commands.activateApp = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (appId) {
    const cmd = ['monkey', '-p', appId, '-c', 'android.intent.category.LAUNCHER', '1'];
    let output = '';

    try {
      _logger.default.debug(`Activating '${appId}' with 'adb shell ${cmd.join(' ')}' command`);

      output = yield this.adb.shell(cmd);

      _logger.default.debug(`Command stdout: ${output}`);
    } catch (e) {
      _logger.default.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);
    }

    if (output.includes('monkey aborted')) {
      _logger.default.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);
    }
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}();

commands.removeApp = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (appId, options = {}) {
    return yield this.adb.uninstallApk(appId, options);
  });

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}();

commands.terminateApp = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (appId, options = {}) {
    var _this = this;

    _logger.default.info(`Terminating '${appId}'`);

    if (!(yield this.adb.processExists(appId))) {
      _logger.default.info(`The app '${appId}' is not running`);

      return false;
    }

    yield this.adb.forceStop(appId);
    const timeout = _appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        return (yield _this.queryAppState(appId)) <= APP_STATE_NOT_RUNNING;
      }), {
        waitMs: timeout,
        intervalMs: 100
      });
    } catch (e) {
      _logger.default.errorAndThrow(`'${appId}' is still running after ${timeout}ms timeout`);
    }

    _logger.default.info(`'${appId}' has been successfully terminated`);

    return true;
  });

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}();

commands.installApp = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (appPath, options = {}) {
    const localPath = yield this.helpers.configureApp(appPath, APP_EXTENSION);

    try {
      yield this.adb.install(localPath, options);
    } finally {
      if (localPath !== appPath) {
        yield _appiumSupport.fs.rimraf(localPath);
      }
    }
  });

  return function (_x6) {
    return _ref7.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
