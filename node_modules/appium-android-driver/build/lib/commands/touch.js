"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.doTouchAction = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (action, opts) {
    switch (action) {
      case 'tap':
        return yield this.tap(opts.element, opts.x, opts.y, opts.count);

      case 'press':
        return yield this.touchDown(opts.element, opts.x, opts.y);

      case 'release':
        return yield this.touchUp(opts.element, opts.x, opts.y);

      case 'moveTo':
        return yield this.touchMove(opts.element, opts.x, opts.y);

      case 'wait':
        return yield _bluebird.default.delay(opts.ms);

      case 'longPress':
        if (typeof opts.duration === 'undefined' || !opts.duration) {
          opts.duration = 1000;
        }

        return yield this.touchLongClick(opts.element, opts.x, opts.y, opts.duration);

      case 'cancel':
        _logger.default.warn("Cancel action currently has no effect");

        break;

      default:
        _logger.default.errorAndThrow(`unknown action ${action}`);

    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

helpers.doTouchDrag = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (gestures) {
    let longPress = gestures[0];
    let moveTo = gestures[1];
    let startX = longPress.options.x || 0,
        startY = longPress.options.y || 0,
        endX = moveTo.options.x || 0,
        endY = moveTo.options.y || 0;

    if (longPress.options.element) {
      let _ref3 = yield this.getLocationInView(longPress.options.element),
          x = _ref3.x,
          y = _ref3.y;

      startX += x || 0;
      startY += y || 0;
    }

    if (moveTo.options.element) {
      let _ref4 = yield this.getLocationInView(moveTo.options.element),
          x = _ref4.x,
          y = _ref4.y;

      endX += x || 0;
      endY += y || 0;
    }

    let apiLevel = yield this.adb.getApiLevel();
    let duration = apiLevel >= 5 ? 2 : 1;

    if (longPress.options && longPress.options.duration) {
      duration = Math.max(longPress.options.duration / 1000, duration);
    }

    return yield this.drag(startX, startY, endX, endY, duration, 1, longPress.options.element, moveTo.options.element);
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

helpers.fixRelease = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (gestures) {
    let release = _lodash.default.last(gestures);

    release.options = release.options || {};

    if (release.options.element || release.options.x && release.options.y) {
      return;
    }

    gestures = _lodash.default.clone(gestures);
    let ref = null;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = gestures.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let gesture = _step.value;
        let opts = gesture.options;

        if (opts.element || opts.x && opts.y) {
          ref = gesture;
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (ref) {
      let opts = ref.options;

      if (opts.element) {
        let loc = yield this.getLocationInView(opts.element);

        if (opts.x && opts.y) {
          release.options = {
            x: loc.x + opts.x,
            y: loc.y + opts.y
          };
        } else {
          let size = yield this.getSize(opts.element);
          release.options = {
            x: loc.x + size.width / 2,
            y: loc.y + size.height / 2
          };
        }
      } else {
        release.options = _lodash.default.pick(opts, 'x', 'y');
      }
    }

    return release;
  });

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.performGesture = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (gesture) {
    try {
      return yield this.doTouchAction(gesture.action, gesture.options || {});
    } catch (e) {
      if ((0, _appiumBaseDriver.isErrorType)(e, _appiumBaseDriver.errors.NoSuchElementError) && gesture.action === 'release' && gesture.options.element) {
        delete gesture.options.element;

        _logger.default.debug(`retrying release without element opts: ${gesture.options}.`);

        return yield this.doTouchAction(gesture.action, gesture.options || {});
      }

      throw e;
    }
  });

  return function (_x5) {
    return _ref6.apply(this, arguments);
  };
}();

commands.performTouch = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (gestures) {
    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    if (gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release') {
      let swipeOpts = yield this.getSwipeOptions(gestures);
      return yield this.swipe(swipeOpts.startX, swipeOpts.startY, swipeOpts.endX, swipeOpts.endY, swipeOpts.duration, swipeOpts.touchCount, swipeOpts.element);
    }

    let actions = _lodash.default.map(gestures, "action");

    if (actions[0] === 'longPress' && actions[1] === 'moveTo' && actions[2] === 'release') {
      return yield this.doTouchDrag(gestures);
    } else {
      if (actions.length === 2) {
        if (_lodash.default.head(actions) === 'press' && _lodash.default.last(actions) === 'release') {
          actions[0] = 'tap';
          gestures[0].action = 'tap';
        }

        if ((_lodash.default.head(actions) === 'tap' || _lodash.default.head(actions) === 'longPress') && _lodash.default.last(actions) === 'release') {
          gestures.pop();
          actions.pop();
        }
      } else {
        if (actions[0] === 'longPress') {
          actions = ['press', 'wait', ...actions.slice(1)];
          let press = gestures.shift();
          press.action = 'press';
          let wait = {
            action: 'wait',
            options: {
              ms: press.options.duration || 1000
            }
          };
          delete press.options.duration;
          gestures = [press, wait, ...gestures];
        }
      }

      let fixedGestures = yield this.parseTouch(gestures, false);

      if (actions[actions.length - 1] === 'release') {
        actions[actions.length - 1] = yield this.fixRelease(gestures);
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = fixedGestures[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let g = _step2.value;
          yield this.performGesture(g);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  });

  return function (_x6) {
    return _ref7.apply(this, arguments);
  };
}();

helpers.parseTouch = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (gestures, multi) {
    var _this = this;

    if (multi && _lodash.default.last(gestures).action === 'release') {
      gestures.pop();
    }

    let touchStateObjects = yield (0, _asyncbox.asyncmap)(gestures, function () {
      var _ref9 = (0, _asyncToGenerator2.default)(function* (gesture) {
        let options = gesture.options || {};

        if (_lodash.default.includes(['press', 'moveTo', 'tap', 'longPress'], gesture.action)) {
          options.offset = false;
          let elementId = gesture.options.element;

          if (elementId) {
            let pos = yield _this.getLocationInView(elementId);

            if (gesture.options.x || gesture.options.y) {
              options.x = pos.x + (gesture.options.x || 0);
              options.y = pos.y + (gesture.options.y || 0);
            } else {
              const _ref10 = yield _this.getSize(elementId),
                    width = _ref10.width,
                    height = _ref10.height;

              options.x = pos.x + width / 2;
              options.y = pos.y + height / 2;
            }

            let touchStateObject = {
              action: gesture.action,
              options,
              timeOffset: 0.005
            };
            return touchStateObject;
          } else {
            options.x = gesture.options.x || 0;
            options.y = gesture.options.y || 0;
            let touchStateObject = {
              action: gesture.action,
              options,
              timeOffset: 0.005
            };
            return touchStateObject;
          }
        } else {
          let offset = 0.005;

          if (gesture.action === 'wait') {
            options = gesture.options;
            offset = parseInt(gesture.options.ms, 10) / 1000;
          }

          let touchStateObject = {
            action: gesture.action,
            options,
            timeOffset: offset
          };
          return touchStateObject;
        }
      });

      return function (_x9) {
        return _ref9.apply(this, arguments);
      };
    }(), false);
    let prevPos = null,
        time = 0;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = touchStateObjects[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let state = _step3.value;

        if (_lodash.default.isUndefined(state.options.x) && _lodash.default.isUndefined(state.options.y) && prevPos !== null) {
          state.options.x = prevPos.x;
          state.options.y = prevPos.y;
        }

        if (state.options.offset && prevPos) {
          state.options.x += prevPos.x;
          state.options.y += prevPos.y;
        }

        delete state.options.offset;

        if (!_lodash.default.isUndefined(state.options.x) && !_lodash.default.isUndefined(state.options.y)) {
          prevPos = state.options;
        }

        if (multi) {
          let timeOffset = state.timeOffset;
          time += timeOffset;
          state.time = _androidHelpers.default.truncateDecimals(time, 3);

          if (!_lodash.default.isUndefined(state.options.x) && !_lodash.default.isUndefined(state.options.y)) {
            state.touch = {
              x: state.options.x,
              y: state.options.y
            };
          }

          delete state.options;
        }

        delete state.timeOffset;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return touchStateObjects;
  });

  return function (_x7, _x8) {
    return _ref8.apply(this, arguments);
  };
}();

commands.performMultiAction = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (actions, elementId) {
    var _this2 = this;

    if (this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    }

    if (actions.length === 1) {
      throw new Error("Multi Pointer Gestures need at least two actions. " + "Use Touch Actions for a single action.");
    }

    let states = yield (0, _asyncbox.asyncmap)(actions, function () {
      var _ref12 = (0, _asyncToGenerator2.default)(function* (action) {
        return yield _this2.parseTouch(action, true);
      });

      return function (_x12) {
        return _ref12.apply(this, arguments);
      };
    }(), false);
    return yield this.doPerformMultiAction(elementId, states);
  });

  return function (_x10, _x11) {
    return _ref11.apply(this, arguments);
  };
}();

commands.doPerformMultiAction = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (elementId, states) {
    let opts;

    if (elementId) {
      opts = {
        elementId,
        actions: states
      };
      return yield this.bootstrap.sendAction("element:performMultiPointerGesture", opts);
    } else {
      opts = {
        actions: states
      };
      return yield this.bootstrap.sendAction("performMultiPointerGesture", opts);
    }
  });

  return function (_x13, _x14) {
    return _ref13.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
