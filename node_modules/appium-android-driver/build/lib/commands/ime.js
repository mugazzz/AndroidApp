"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.isIMEActivated = (0, _asyncToGenerator2.default)(function* () {
  return true;
});
commands.availableIMEEngines = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Retrieving available IMEs");

  let engines = yield this.adb.availableIMEs();

  _logger.default.debug(`Engines: ${JSON.stringify(engines)}`);

  return engines;
});
commands.getActiveIMEEngine = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Retrieving current default IME");

  return yield this.adb.defaultIME();
});

commands.activateIMEEngine = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (imeId) {
    _logger.default.debug(`Attempting to activate IME ${imeId}`);

    let availableEngines = yield this.adb.availableIMEs();

    if (availableEngines.indexOf(imeId) === -1) {
      _logger.default.debug("IME not found, failing");

      throw new _appiumBaseDriver.errors.IMENotAvailableError();
    }

    _logger.default.debug("Found installed IME, attempting to activate");

    yield this.adb.enableIME(imeId);
    yield this.adb.setIME(imeId);
  });

  return function (_x) {
    return _ref4.apply(this, arguments);
  };
}();

commands.deactivateIMEEngine = (0, _asyncToGenerator2.default)(function* () {
  let currentEngine = yield this.getActiveIMEEngine();

  _logger.default.debug(`Attempting to deactivate ${currentEngine}`);

  yield this.adb.disableIME(currentEngine);
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9pbWUuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsImlzSU1FQWN0aXZhdGVkIiwiYXZhaWxhYmxlSU1FRW5naW5lcyIsImxvZyIsImRlYnVnIiwiZW5naW5lcyIsImFkYiIsImF2YWlsYWJsZUlNRXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QWN0aXZlSU1FRW5naW5lIiwiZGVmYXVsdElNRSIsImFjdGl2YXRlSU1FRW5naW5lIiwiaW1lSWQiLCJhdmFpbGFibGVFbmdpbmVzIiwiaW5kZXhPZiIsImVycm9ycyIsIklNRU5vdEF2YWlsYWJsZUVycm9yIiwiZW5hYmxlSU1FIiwic2V0SU1FIiwiZGVhY3RpdmF0ZUlNRUVuZ2luZSIsImN1cnJlbnRFbmdpbmUiLCJkaXNhYmxlSU1FIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7OztBQUVBRixRQUFRLENBQUNHLGNBQVQsbUNBQTBCLGFBQWtCO0FBRTFDLFNBQU8sSUFBUDtBQUNELENBSEQ7QUFLQUgsUUFBUSxDQUFDSSxtQkFBVCxtQ0FBK0IsYUFBa0I7QUFDL0NDLGtCQUFJQyxLQUFKLENBQVUsMkJBQVY7O0FBQ0EsTUFBSUMsT0FBTyxTQUFTLEtBQUtDLEdBQUwsQ0FBU0MsYUFBVCxFQUFwQjs7QUFDQUosa0JBQUlDLEtBQUosQ0FBVyxZQUFXSSxJQUFJLENBQUNDLFNBQUwsQ0FBZUosT0FBZixDQUF3QixFQUE5Qzs7QUFDQSxTQUFPQSxPQUFQO0FBQ0QsQ0FMRDtBQU9BUCxRQUFRLENBQUNZLGtCQUFULG1DQUE4QixhQUFrQjtBQUM5Q1Asa0JBQUlDLEtBQUosQ0FBVSxnQ0FBVjs7QUFDQSxlQUFhLEtBQUtFLEdBQUwsQ0FBU0ssVUFBVCxFQUFiO0FBQ0QsQ0FIRDs7QUFLQWIsUUFBUSxDQUFDYyxpQkFBVDtBQUFBLDhDQUE2QixXQUFnQkMsS0FBaEIsRUFBdUI7QUFDbERWLG9CQUFJQyxLQUFKLENBQVcsOEJBQTZCUyxLQUFNLEVBQTlDOztBQUNBLFFBQUlDLGdCQUFnQixTQUFTLEtBQUtSLEdBQUwsQ0FBU0MsYUFBVCxFQUE3Qjs7QUFDQSxRQUFJTyxnQkFBZ0IsQ0FBQ0MsT0FBakIsQ0FBeUJGLEtBQXpCLE1BQW9DLENBQUMsQ0FBekMsRUFBNEM7QUFDMUNWLHNCQUFJQyxLQUFKLENBQVUsd0JBQVY7O0FBQ0EsWUFBTSxJQUFJWSx5QkFBT0Msb0JBQVgsRUFBTjtBQUNEOztBQUNEZCxvQkFBSUMsS0FBSixDQUFVLDZDQUFWOztBQUNBLFVBQU0sS0FBS0UsR0FBTCxDQUFTWSxTQUFULENBQW1CTCxLQUFuQixDQUFOO0FBQ0EsVUFBTSxLQUFLUCxHQUFMLENBQVNhLE1BQVQsQ0FBZ0JOLEtBQWhCLENBQU47QUFDRCxHQVZEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVlBZixRQUFRLENBQUNzQixtQkFBVCxtQ0FBK0IsYUFBa0I7QUFDL0MsTUFBSUMsYUFBYSxTQUFTLEtBQUtYLGtCQUFMLEVBQTFCOztBQUNBUCxrQkFBSUMsS0FBSixDQUFXLDRCQUEyQmlCLGFBQWMsRUFBcEQ7O0FBQ0EsUUFBTSxLQUFLZixHQUFMLENBQVNnQixVQUFULENBQW9CRCxhQUFwQixDQUFOO0FBQ0QsQ0FKRDtBQU1BRSxNQUFNLENBQUNDLE1BQVAsQ0FBY3hCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5pc0lNRUFjdGl2YXRlZCA9IGFzeW5jIGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIC8vIElNRSBpcyBhbHdheXMgYWN0aXZhdGVkIG9uIEFuZHJvaWQgZGV2aWNlc1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbW1hbmRzLmF2YWlsYWJsZUlNRUVuZ2luZXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxvZy5kZWJ1ZyhcIlJldHJpZXZpbmcgYXZhaWxhYmxlIElNRXNcIik7XG4gIGxldCBlbmdpbmVzID0gYXdhaXQgdGhpcy5hZGIuYXZhaWxhYmxlSU1FcygpO1xuICBsb2cuZGVidWcoYEVuZ2luZXM6ICR7SlNPTi5zdHJpbmdpZnkoZW5naW5lcyl9YCk7XG4gIHJldHVybiBlbmdpbmVzO1xufTtcblxuY29tbWFuZHMuZ2V0QWN0aXZlSU1FRW5naW5lID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2cuZGVidWcoXCJSZXRyaWV2aW5nIGN1cnJlbnQgZGVmYXVsdCBJTUVcIik7XG4gIHJldHVybiBhd2FpdCB0aGlzLmFkYi5kZWZhdWx0SU1FKCk7XG59O1xuXG5jb21tYW5kcy5hY3RpdmF0ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uIChpbWVJZCkge1xuICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gYWN0aXZhdGUgSU1FICR7aW1lSWR9YCk7XG4gIGxldCBhdmFpbGFibGVFbmdpbmVzID0gYXdhaXQgdGhpcy5hZGIuYXZhaWxhYmxlSU1FcygpO1xuICBpZiAoYXZhaWxhYmxlRW5naW5lcy5pbmRleE9mKGltZUlkKSA9PT0gLTEpIHtcbiAgICBsb2cuZGVidWcoXCJJTUUgbm90IGZvdW5kLCBmYWlsaW5nXCIpO1xuICAgIHRocm93IG5ldyBlcnJvcnMuSU1FTm90QXZhaWxhYmxlRXJyb3IoKTtcbiAgfVxuICBsb2cuZGVidWcoXCJGb3VuZCBpbnN0YWxsZWQgSU1FLCBhdHRlbXB0aW5nIHRvIGFjdGl2YXRlXCIpO1xuICBhd2FpdCB0aGlzLmFkYi5lbmFibGVJTUUoaW1lSWQpO1xuICBhd2FpdCB0aGlzLmFkYi5zZXRJTUUoaW1lSWQpO1xufTtcblxuY29tbWFuZHMuZGVhY3RpdmF0ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGN1cnJlbnRFbmdpbmUgPSBhd2FpdCB0aGlzLmdldEFjdGl2ZUlNRUVuZ2luZSgpO1xuICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gZGVhY3RpdmF0ZSAke2N1cnJlbnRFbmdpbmV9YCk7XG4gIGF3YWl0IHRoaXMuYWRiLmRpc2FibGVJTUUoY3VycmVudEVuZ2luZSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvaW1lLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
