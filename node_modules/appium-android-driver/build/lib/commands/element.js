"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAttribute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (attribute, elementId) {
    let p = {
      attribute,
      elementId
    };
    return yield this.bootstrap.sendAction("element:getAttribute", p);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.getName = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.getAttribute("className", elementId);
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

commands.elementDisplayed = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return (yield this.getAttribute("displayed", elementId)) === 'true';
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

commands.elementEnabled = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return (yield this.getAttribute("enabled", elementId)) === 'true';
  });

  return function (_x5) {
    return _ref4.apply(this, arguments);
  };
}();

commands.elementSelected = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return (yield this.getAttribute("selected", elementId)) === 'true';
  });

  return function (_x6) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.setElementValue = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (keys, elementId, replace = false) {
    let text = keys;

    if (keys instanceof Array) {
      text = keys.join("");
    }

    let params = {
      elementId,
      text,
      replace,
      unicodeKeyboard: this.opts.unicodeKeyboard
    };
    return yield this.doSetElementValue(params);
  });

  return function (_x7, _x8) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.doSetElementValue = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (params) {
    return yield this.bootstrap.sendAction("element:setText", params);
  });

  return function (_x9) {
    return _ref7.apply(this, arguments);
  };
}();

commands.setValue = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (keys, elementId) {
    return yield this.setElementValue(keys, elementId, false);
  });

  return function (_x10, _x11) {
    return _ref8.apply(this, arguments);
  };
}();

commands.replaceValue = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (keys, elementId) {
    return yield this.setElementValue(keys, elementId, true);
  });

  return function (_x12, _x13) {
    return _ref9.apply(this, arguments);
  };
}();

commands.setValueImmediate = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (keys, elementId) {
    let text = keys;

    if (keys instanceof Array) {
      text = keys.join("");
    }

    yield this.click(elementId);
    yield this.adb.inputText(text);
  });

  return function (_x14, _x15) {
    return _ref10.apply(this, arguments);
  };
}();

commands.getText = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.bootstrap.sendAction("element:getText", {
      elementId
    });
  });

  return function (_x16) {
    return _ref11.apply(this, arguments);
  };
}();

commands.clear = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (elementId) {
    var _this = this;

    let text = (yield this.getText(elementId)) || '';
    let length = text.length;

    if (length === 0) {
      length = 100;
    }

    yield this.click(elementId);

    _logger.default.debug(`Sending up to ${length} clear characters to device`);

    return yield (0, _asyncbox.retryInterval)(5, 500, (0, _asyncToGenerator2.default)(function* () {
      let remainingLength = length;

      while (remainingLength > 0) {
        let lengthToSend = remainingLength < 50 ? remainingLength : 50;

        _logger.default.debug(`Sending ${lengthToSend} clear characters to device`);

        yield _this.adb.clearTextField(lengthToSend);
        remainingLength -= lengthToSend;
      }
    }));
  });

  return function (_x17) {
    return _ref12.apply(this, arguments);
  };
}();

commands.click = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.bootstrap.sendAction("element:click", {
      elementId
    });
  });

  return function (_x18) {
    return _ref14.apply(this, arguments);
  };
}();

commands.getLocation = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.bootstrap.sendAction("element:getLocation", {
      elementId
    });
  });

  return function (_x19) {
    return _ref15.apply(this, arguments);
  };
}();

commands.getLocationInView = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.getLocation(elementId);
  });

  return function (_x20) {
    return _ref16.apply(this, arguments);
  };
}();

commands.getSize = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.bootstrap.sendAction("element:getSize", {
      elementId
    });
  });

  return function (_x21) {
    return _ref17.apply(this, arguments);
  };
}();

commands.getElementRect = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.bootstrap.sendAction("element:getRect", {
      elementId
    });
  });

  return function (_x22) {
    return _ref18.apply(this, arguments);
  };
}();

commands.touchLongClick = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (elementId, x, y, duration) {
    let params = {
      elementId,
      x,
      y,
      duration
    };

    _androidHelpers.default.removeNullProperties(params);

    return yield this.bootstrap.sendAction("element:touchLongClick", params);
  });

  return function (_x23, _x24, _x25, _x26) {
    return _ref19.apply(this, arguments);
  };
}();

commands.touchDown = function () {
  var _ref20 = (0, _asyncToGenerator2.default)(function* (elementId, x, y) {
    let params = {
      elementId,
      x,
      y
    };

    _androidHelpers.default.removeNullProperties(params);

    return yield this.bootstrap.sendAction("element:touchDown", params);
  });

  return function (_x27, _x28, _x29) {
    return _ref20.apply(this, arguments);
  };
}();

commands.touchUp = function () {
  var _ref21 = (0, _asyncToGenerator2.default)(function* (elementId, x, y) {
    let params = {
      elementId,
      x,
      y
    };

    _androidHelpers.default.removeNullProperties(params);

    return yield this.bootstrap.sendAction("element:touchUp", params);
  });

  return function (_x30, _x31, _x32) {
    return _ref21.apply(this, arguments);
  };
}();

commands.touchMove = function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (elementId, x, y) {
    let params = {
      elementId,
      x,
      y
    };

    _androidHelpers.default.removeNullProperties(params);

    return yield this.bootstrap.sendAction("element:touchMove", params);
  });

  return function (_x33, _x34, _x35) {
    return _ref22.apply(this, arguments);
  };
}();

commands.complexTap = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (tapCount, touchCount, duration, x, y) {
    return yield this.bootstrap.sendAction("click", {
      x,
      y
    });
  });

  return function (_x36, _x37, _x38, _x39, _x40) {
    return _ref23.apply(this, arguments);
  };
}();

commands.tap = function () {
  var _ref24 = (0, _asyncToGenerator2.default)(function* (elementId, x = 0, y = 0, count = 1) {
    for (let i = 0; i < count; i++) {
      if (elementId) {
        if (x !== 0 || y !== 0) {
          yield this.bootstrap.sendAction("element:click", {
            elementId,
            x,
            y
          });
        } else {
          yield this.bootstrap.sendAction("element:click", {
            elementId
          });
        }
      } else {
        yield this.bootstrap.sendAction("click", {
          x,
          y
        });
      }
    }
  });

  return function (_x41) {
    return _ref24.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
