"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const AIRPLANE_MODE_MASK = 0b001;
const WIFI_MASK = 0b010;
const DATA_MASK = 0b100;
commands.getNetworkConnection = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.info("Getting network connection");

  let airplaneModeOn = yield this.adb.isAirplaneModeOn();
  let connection = airplaneModeOn ? AIRPLANE_MODE_MASK : 0;

  if (!airplaneModeOn) {
    let wifiOn = yield this.isWifiOn();
    connection |= wifiOn ? WIFI_MASK : 0;
    let dataOn = yield this.adb.isDataOn();
    connection |= dataOn ? DATA_MASK : 0;
  }

  return connection;
});
commands.isWifiOn = (0, _asyncToGenerator2.default)(function* () {
  return yield this.adb.isWifiOn();
});

commands.setNetworkConnection = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (type) {
    var _this = this;

    _logger.default.info("Setting network connection");

    const shouldEnableAirplaneMode = (type & AIRPLANE_MODE_MASK) !== 0;
    const shouldEnableWifi = (type & WIFI_MASK) !== 0;
    const shouldEnableDataConnection = (type & DATA_MASK) !== 0;
    const currentState = yield this.getNetworkConnection();
    const isAirplaneModeEnabled = (currentState & AIRPLANE_MODE_MASK) !== 0;
    const isWiFiEnabled = (currentState & WIFI_MASK) !== 0;
    const isDataEnabled = (currentState & DATA_MASK) !== 0;

    if (shouldEnableAirplaneMode !== isAirplaneModeEnabled) {
      yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
        yield _this.adb.setAirplaneMode(shouldEnableAirplaneMode);
      }));
      yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
        yield _this.adb.broadcastAirplaneMode(shouldEnableAirplaneMode);
      }));
    } else {
      _logger.default.info(`Not changing airplane mode, since it is already ` + `${shouldEnableAirplaneMode ? 'enabled' : 'disabled'}`);
    }

    if (shouldEnableWifi === isWiFiEnabled && shouldEnableDataConnection === isDataEnabled) {
      _logger.default.info('Not changing data connection/Wi-Fi states, since they are already set to expected values');

      if (yield this.adb.isAirplaneModeOn()) {
        return AIRPLANE_MODE_MASK | currentState;
      }

      return ~AIRPLANE_MODE_MASK & currentState;
    }

    yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
      if (shouldEnableWifi !== isWiFiEnabled) {
        yield _this.setWifiState(shouldEnableWifi);
      } else {
        _logger.default.info(`Not changing Wi-Fi state, since it is already ` + `${shouldEnableWifi ? 'enabled' : 'disabled'}`);
      }

      if (shouldEnableAirplaneMode) {
        _logger.default.info('Not changing data connection state, because airplane mode is enabled');
      } else if (shouldEnableDataConnection === isDataEnabled) {
        _logger.default.info(`Not changing data connection state, since it is already ` + `${shouldEnableDataConnection ? 'enabled' : 'disabled'}`);
      } else {
        yield _this.adb.setDataState(shouldEnableDataConnection, _this.isEmulator());
      }
    }));
    return yield this.getNetworkConnection();
  });

  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}();

commands.setWifiState = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (wifi) {
    yield this.adb.setWifiState(wifi, this.isEmulator());
  });

  return function (_x2) {
    return _ref7.apply(this, arguments);
  };
}();

commands.toggleData = (0, _asyncToGenerator2.default)(function* () {
  var _this2 = this;

  let data = !(yield this.adb.isDataOn());

  _logger.default.info(`Turning network data ${data ? 'on' : 'off'}`);

  yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
    yield _this2.adb.setWifiAndData({
      data
    }, _this2.isEmulator());
  }));
});
commands.toggleWiFi = (0, _asyncToGenerator2.default)(function* () {
  var _this3 = this;

  let wifi = !(yield this.adb.isWifiOn());

  _logger.default.info(`Turning WiFi ${wifi ? 'on' : 'off'}`);

  yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
    yield _this3.adb.setWifiAndData({
      wifi
    }, _this3.isEmulator());
  }));
});
commands.toggleFlightMode = (0, _asyncToGenerator2.default)(function* () {
  var _this4 = this;

  let flightMode = !(yield this.adb.isAirplaneModeOn());

  _logger.default.info(`Turning flight mode ${flightMode ? 'on' : 'off'}`);

  yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
    yield _this4.adb.setAirplaneMode(flightMode);
  }));
  yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
    yield _this4.adb.broadcastAirplaneMode(flightMode);
  }));
});

commands.setGeoLocation = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (location) {
    yield this.adb.setGeoLocation(location, this.isEmulator());
    return yield this.getGeoLocation();
  });

  return function (_x3) {
    return _ref15.apply(this, arguments);
  };
}();

commands.getGeoLocation = (0, _asyncToGenerator2.default)(function* () {
  const _ref17 = yield this.adb.getGeoLocation(),
        latitude = _ref17.latitude,
        longitude = _ref17.longitude,
        altitude = _ref17.altitude;

  return {
    latitude: parseFloat(latitude),
    longitude: parseFloat(longitude),
    altitude: parseFloat(_appiumSupport.util.hasValue(altitude) ? altitude : 0)
  };
});
commands.toggleLocationServices = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.info("Toggling location services");

  let api = yield this.adb.getApiLevel();

  if (this.isEmulator()) {
    let providers = yield this.adb.getLocationProviders();
    let isGpsEnabled = providers.indexOf('gps') !== -1;
    yield this.adb.toggleGPSLocationProvider(!isGpsEnabled);
    return;
  }

  if (api > 15) {
    let seq = [19, 19];

    if (api === 16) {
      seq.push(20);
    } else if (api >= 19) {
      seq = [22, 22, 19];
      yield this.adb.keyevent(19);
    }

    yield this.toggleSetting('LOCATION_SOURCE_SETTINGS', seq);
  } else {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  }
});

helpers.toggleSetting = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (setting, preKeySeq) {
    var _this5 = this;

    if (_lodash.default.isNull(preKeySeq)) {
      preKeySeq = [19, 19, 20];
    }

    yield this.openSettingsActivity(setting);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = preKeySeq[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let key = _step.value;
        yield this.doKey(key);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    let _ref20 = yield this.adb.getFocusedPackageAndActivity(),
        appPackage = _ref20.appPackage,
        appActivity = _ref20.appActivity;

    yield this.wrapBootstrapDisconnect((0, _asyncToGenerator2.default)(function* () {
      yield _this5.doKey(23);
    }));

    try {
      yield this.adb.waitForNotActivity(appPackage, appActivity, 5000);
      yield this.doKey(22);
      yield this.doKey(23);
      yield this.adb.waitForNotActivity(appPackage, appActivity, 5000);
    } catch (ign) {}

    yield this.adb.back();
  });

  return function (_x4, _x5) {
    return _ref19.apply(this, arguments);
  };
}();

helpers.doKey = function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (key) {
    yield _bluebird.default.delay(2000);
    yield this.adb.keyevent(key);
  });

  return function (_x6) {
    return _ref22.apply(this, arguments);
  };
}();

helpers.wrapBootstrapDisconnect = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (wrapped) {
    if (!this.bootstrap) {
      return yield wrapped();
    }

    this.bootstrap.ignoreUnexpectedShutdown = true;

    try {
      yield wrapped();
      yield this.adb.restart();
      yield this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts);
    } finally {
      this.bootstrap.ignoreUnexpectedShutdown = false;
    }
  });

  return function (_x7) {
    return _ref23.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9uZXR3b3JrLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJBSVJQTEFORV9NT0RFX01BU0siLCJXSUZJX01BU0siLCJEQVRBX01BU0siLCJnZXROZXR3b3JrQ29ubmVjdGlvbiIsImxvZyIsImluZm8iLCJhaXJwbGFuZU1vZGVPbiIsImFkYiIsImlzQWlycGxhbmVNb2RlT24iLCJjb25uZWN0aW9uIiwid2lmaU9uIiwiaXNXaWZpT24iLCJkYXRhT24iLCJpc0RhdGFPbiIsInNldE5ldHdvcmtDb25uZWN0aW9uIiwidHlwZSIsInNob3VsZEVuYWJsZUFpcnBsYW5lTW9kZSIsInNob3VsZEVuYWJsZVdpZmkiLCJzaG91bGRFbmFibGVEYXRhQ29ubmVjdGlvbiIsImN1cnJlbnRTdGF0ZSIsImlzQWlycGxhbmVNb2RlRW5hYmxlZCIsImlzV2lGaUVuYWJsZWQiLCJpc0RhdGFFbmFibGVkIiwid3JhcEJvb3RzdHJhcERpc2Nvbm5lY3QiLCJzZXRBaXJwbGFuZU1vZGUiLCJicm9hZGNhc3RBaXJwbGFuZU1vZGUiLCJzZXRXaWZpU3RhdGUiLCJzZXREYXRhU3RhdGUiLCJpc0VtdWxhdG9yIiwid2lmaSIsInRvZ2dsZURhdGEiLCJkYXRhIiwic2V0V2lmaUFuZERhdGEiLCJ0b2dnbGVXaUZpIiwidG9nZ2xlRmxpZ2h0TW9kZSIsImZsaWdodE1vZGUiLCJzZXRHZW9Mb2NhdGlvbiIsImxvY2F0aW9uIiwiZ2V0R2VvTG9jYXRpb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImFsdGl0dWRlIiwicGFyc2VGbG9hdCIsInV0aWwiLCJoYXNWYWx1ZSIsInRvZ2dsZUxvY2F0aW9uU2VydmljZXMiLCJhcGkiLCJnZXRBcGlMZXZlbCIsInByb3ZpZGVycyIsImdldExvY2F0aW9uUHJvdmlkZXJzIiwiaXNHcHNFbmFibGVkIiwiaW5kZXhPZiIsInRvZ2dsZUdQU0xvY2F0aW9uUHJvdmlkZXIiLCJzZXEiLCJwdXNoIiwia2V5ZXZlbnQiLCJ0b2dnbGVTZXR0aW5nIiwiZXJyb3JzIiwiTm90WWV0SW1wbGVtZW50ZWRFcnJvciIsInNldHRpbmciLCJwcmVLZXlTZXEiLCJfIiwiaXNOdWxsIiwib3BlblNldHRpbmdzQWN0aXZpdHkiLCJrZXkiLCJkb0tleSIsImdldEZvY3VzZWRQYWNrYWdlQW5kQWN0aXZpdHkiLCJhcHBQYWNrYWdlIiwiYXBwQWN0aXZpdHkiLCJ3YWl0Rm9yTm90QWN0aXZpdHkiLCJpZ24iLCJiYWNrIiwiQiIsImRlbGF5Iiwid3JhcHBlZCIsImJvb3RzdHJhcCIsImlnbm9yZVVuZXhwZWN0ZWRTaHV0ZG93biIsInJlc3RhcnQiLCJzdGFydCIsIm9wdHMiLCJkaXNhYmxlQW5kcm9pZFdhdGNoZXJzIiwiYWNjZXB0U3NsQ2VydHMiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7O0FBRUEsTUFBTUMsa0JBQWtCLEdBQUcsS0FBM0I7QUFDQSxNQUFNQyxTQUFTLEdBQUcsS0FBbEI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsS0FBbEI7QUFFQUwsUUFBUSxDQUFDTSxvQkFBVCxtQ0FBZ0MsYUFBa0I7QUFDaERDLGtCQUFJQyxJQUFKLENBQVMsNEJBQVQ7O0FBQ0EsTUFBSUMsY0FBYyxTQUFTLEtBQUtDLEdBQUwsQ0FBU0MsZ0JBQVQsRUFBM0I7QUFDQSxNQUFJQyxVQUFVLEdBQUdILGNBQWMsR0FBR04sa0JBQUgsR0FBd0IsQ0FBdkQ7O0FBR0EsTUFBSSxDQUFDTSxjQUFMLEVBQXFCO0FBQ25CLFFBQUlJLE1BQU0sU0FBUyxLQUFLQyxRQUFMLEVBQW5CO0FBQ0FGLElBQUFBLFVBQVUsSUFBS0MsTUFBTSxHQUFHVCxTQUFILEdBQWUsQ0FBcEM7QUFDQSxRQUFJVyxNQUFNLFNBQVMs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a0JBQUVDLEtBQUYsQ0FBUSxJQUFSLENBQU47QUFDQSxVQUFNLEtBQUtsRSxHQUFMLENBQVNnRCxRQUFULENBQWtCUyxHQUFsQixDQUFOO0FBQ0QsR0FKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQWxFLE9BQU8sQ0FBQ3lCLHVCQUFSO0FBQUEsK0NBQWtDLFdBQWdCbUQsT0FBaEIsRUFBeUI7QUFDekQsUUFBSSxDQUFDLEtBQUtDLFNBQVYsRUFBcUI7QUFDbkIsbUJBQWFELE9BQU8sRUFBcEI7QUFDRDs7QUFFRCxTQUFLQyxTQUFMLENBQWVDLHdCQUFmLEdBQTBDLElBQTFDOztBQUNBLFFBQUk7QUFDRixZQUFNRixPQUFPLEVBQWI7QUFDQSxZQUFNLEtBQUtuRSxHQUFMLENBQVNzRSxPQUFULEVBQU47QUFDQSxZQUFNLEtBQUtGLFNBQUwsQ0FBZUcsS0FBZixDQUFxQixLQUFLQyxJQUFMLENBQVVaLFVBQS9CLEVBQTJDLEtBQUtZLElBQUwsQ0FBVUMsc0JBQXJELEVBQTZFLEtBQUtELElBQUwsQ0FBVUUsY0FBdkYsQ0FBTjtBQUNELEtBSkQsU0FJVTtBQUNSLFdBQUtOLFNBQUwsQ0FBZUMsd0JBQWYsR0FBMEMsS0FBMUM7QUFDRDtBQUNGLEdBYkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBZUFNLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjcEYsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29uc3QgQUlSUExBTkVfTU9ERV9NQVNLID0gMGIwMDE7XG5jb25zdCBXSUZJX01BU0sgPSAwYjAxMDtcbmNvbnN0IERBVEFfTUFTSyA9IDBiMTAwO1xuXG5jb21tYW5kcy5nZXROZXR3b3JrQ29ubmVjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbG9nLmluZm8oXCJHZXR0aW5nIG5ldHdvcmsgY29ubmVjdGlvblwiKTtcbiAgbGV0IGFpcnBsYW5lTW9kZU9uID0gYXdhaXQgdGhpcy5hZGIuaXNBaXJwbGFuZU1vZGVPbigpO1xuICBsZXQgY29ubmVjdGlvbiA9IGFpcnBsYW5lTW9kZU9uID8gQUlSUExBTkVfTU9ERV9NQVNLIDogMDtcblxuICAvLyBubyBuZWVkIHRvIGNoZWNrIGFueXRoaW5nIGVsc2UgaWYgd2UgYXJlIGluIGFpcnBsYW5lIG1vZGVcbiAgaWYgKCFhaXJwbGFuZU1vZGVPbikge1xuICAgIGxldCB3aWZpT24gPSBhd2FpdCB0aGlzLmlzV2lmaU9uKCk7XG4gICAgY29ubmVjdGlvbiB8PSAod2lmaU9uID8gV0lGSV9NQVNLIDogMCk7XG4gICAgbGV0IGRhdGFPbiA9IGF3YWl0IHRoaXMuYWRiLmlzRGF0YU9uKCk7XG4gICAgY29ubmVjdGlvbiB8PSAoZGF0YU9uID8gREFUQV9NQVNLIDogMCk7XG4gIH1cblxuICByZXR1cm4gY29ubmVjdGlvbjtcbn07XG5cbi8qKlxuICogZGVjb3VwbGluZyB0byBvdmVycmlkZSB0aGUgYmVoYXZpb3VyIGluIG90aGVyIGRyaXZlcnMgbGlrZSBVaUF1dG9tYXRvcjIuXG4gKi9cbmNvbW1hbmRzLmlzV2lmaU9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5hZGIuaXNXaWZpT24oKTtcbn07XG5cbmNvbW1hbmRzLnNldE5ldHdvcmtDb25uZWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKHR5cGUpIHtcbiAgbG9nLmluZm8oXCJTZXR0aW5nIG5ldHdvcmsgY29ubmVjdGlvblwiKTtcbiAgLy8gZGVjb2RlIHRoZSBpbnB1dFxuICBjb25zdCBzaG91bGRFbmFibGVBaXJwbGFuZU1vZGUgPSAodHlwZSAmIEFJUlBMQU5FX01PREVfTUFTSykgIT09IDA7XG4gIGNvbnN0IHNob3VsZEVuYWJsZVdpZmkgPSAodHlwZSAmIFdJRklfTUFTSykgIT09IDA7XG4gIGNvbnN0IHNob3VsZEVuYWJsZURhdGFDb25uZWN0aW9uID0gKHR5cGUgJiBEQVRBX01BU0spICE9PSAwO1xuXG4gIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGF3YWl0IHRoaXMuZ2V0TmV0d29ya0Nvbm5lY3Rpb24oKTtcbiAgY29uc3QgaXNBaXJwbGFuZU1vZGVFbmFibGVkID0gKGN1cnJlbnRTdGF0ZSAmIEFJUlBMQU5FX01PREVfTUFTSykgIT09IDA7XG4gIGNvbnN0IGlzV2lGaUVuYWJsZWQgPSAoY3VycmVudFN0YXRlICYgV0lGSV9NQVNLKSAhPT0gMDtcbiAgY29uc3QgaXNEYXRhRW5hYmxlZCA9IChjdXJyZW50U3RhdGUgJiBEQVRBX01BU0spICE9PSAwO1xuXG4gIGlmIChzaG91bGRFbmFibGVBaXJwbGFuZU1vZGUgIT09IGlzQWlycGxhbmVNb2RlRW5hYmxlZCkge1xuICAgIGF3YWl0IHRoaXMud3JhcEJvb3RzdHJhcERpc2Nvbm5lY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5hZGIuc2V0QWlycGxhbmVNb2RlKHNob3VsZEVuYWJsZUFpcnBsYW5lTW9kZSk7XG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy53cmFwQm9vdHN0cmFwRGlzY29ubmVjdChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi5icm9hZGNhc3RBaXJwbGFuZU1vZGUoc2hvdWxkRW5hYmxlQWlycGxhbmVNb2RlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBsb2cuaW5mbyhgTm90IGNoYW5naW5nIGFpcnBsYW5lIG1vZGUsIHNpbmNlIGl0IGlzIGFscmVhZHkgYCArXG4gICAgICAgICAgICAgYCR7c2hvdWxkRW5hYmxlQWlycGxhbmVNb2RlID8gJ2VuYWJsZWQnIDogJ2Rpc2FibGVkJ31gKTtcbiAgfVxuXG4gIGlmIChzaG91bGRFbmFibGVXaWZpID09PSBpc1dpRmlFbmFibGVkICYmIHNob3VsZEVuYWJsZURhdGFDb25uZWN0aW9uID09PSBpc0RhdGFFbmFibGVkKSB7XG4gICAgbG9nLmluZm8oJ05vdCBjaGFuZ2luZyBkYXRhIGNvbm5lY3Rpb24vV2ktRmkgc3RhdGVzLCBzaW5jZSB0aGV5IGFyZSBhbHJlYWR5IHNldCB0byBleHBlY3RlZCB2YWx1ZXMnKTtcbiAgICBpZiAoYXdhaXQgdGhpcy5hZGIuaXNBaXJwbGFuZU1vZGVPbigpKSB7XG4gICAgICByZXR1cm4gQUlSUExBTkVfTU9ERV9NQVNLIHwgY3VycmVudFN0YXRlO1xuICAgIH1cbiAgICByZXR1cm4gfkFJUlBMQU5FX01PREVfTUFTSyAmIGN1cnJlbnRTdGF0ZTtcbiAgfVxuXG4gIGF3YWl0IHRoaXMud3JhcEJvb3RzdHJhcERpc2Nvbm5lY3QoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzaG91bGRFbmFibGVXaWZpICE9PSBpc1dpRmlFbmFibGVkKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldFdpZmlTdGF0ZShzaG91bGRFbmFibGVXaWZpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oYE5vdCBjaGFuZ2luZyBXaS1GaSBzdGF0ZSwgc2luY2UgaXQgaXMgYWxyZWFkeSBgICtcbiAgICAgICAgICAgICAgIGAke3Nob3VsZEVuYWJsZVdpZmkgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWApO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRFbmFibGVBaXJwbGFuZU1vZGUpIHtcbiAgICAgIGxvZy5pbmZvKCdOb3QgY2hhbmdpbmcgZGF0YSBjb25uZWN0aW9uIHN0YXRlLCBiZWNhdXNlIGFpcnBsYW5lIG1vZGUgaXMgZW5hYmxlZCcpO1xuICAgIH0gZWxzZSBpZiAoc2hvdWxkRW5hYmxlRGF0YUNvbm5lY3Rpb24gPT09IGlzRGF0YUVuYWJsZWQpIHtcbiAgICAgIGxvZy5pbmZvKGBOb3QgY2hhbmdpbmcgZGF0YSBjb25uZWN0aW9uIHN0YXRlLCBzaW5jZSBpdCBpcyBhbHJlYWR5IGAgK1xuICAgICAgICAgICAgICAgYCR7c2hvdWxkRW5hYmxlRGF0YUNvbm5lY3Rpb24gPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi5zZXREYXRhU3RhdGUoc2hvdWxkRW5hYmxlRGF0YUNvbm5lY3Rpb24sIHRoaXMuaXNFbXVsYXRvcigpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLmdldE5ldHdvcmtDb25uZWN0aW9uKCk7XG59O1xuXG4vKipcbiAqIGRlY291cGxpbmcgdG8gb3ZlcnJpZGUgYmVoYXZpb3VyIGluIG90aGVyIGRyaXZlcnMgbGlrZSBVaUF1dG9tYXRvcjIuXG4gKi9cbmNvbW1hbmRzLnNldFdpZmlTdGF0ZSA9IGFzeW5jIGZ1bmN0aW9uICh3aWZpKSB7XG4gIGF3YWl0IHRoaXMuYWRiLnNldFdpZmlTdGF0ZSh3aWZpLCB0aGlzLmlzRW11bGF0b3IoKSk7XG59O1xuXG5jb21tYW5kcy50b2dnbGVEYXRhID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgZGF0YSA9ICEoYXdhaXQgdGhpcy5hZGIuaXNEYXRhT24oKSk7XG4gIGxvZy5pbmZvKGBUdXJuaW5nIG5ldHdvcmsgZGF0YSAke2RhdGEgPyAnb24nIDogJ29mZid9YCk7XG4gIGF3YWl0IHRoaXMud3JhcEJvb3RzdHJhcERpc2Nvbm5lY3QoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHRoaXMuYWRiLnNldFdpZmlBbmREYXRhKHtkYXRhfSwgdGhpcy5pc0VtdWxhdG9yKCkpO1xuICB9KTtcbn07XG5cbmNvbW1hbmRzLnRvZ2dsZVdpRmkgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCB3aWZpID0gIShhd2FpdCB0aGlzLmFkYi5pc1dpZmlPbigpKTtcbiAgbG9nLmluZm8oYFR1cm5pbmcgV2lGaSAke3dpZmkgPyAnb24nIDogJ29mZid9YCk7XG4gIGF3YWl0IHRoaXMud3JhcEJvb3RzdHJhcERpc2Nvbm5lY3QoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHRoaXMuYWRiLnNldFdpZmlBbmREYXRhKHt3aWZpfSwgdGhpcy5pc0VtdWxhdG9yKCkpO1xuICB9KTtcbn07XG5cbmNvbW1hbmRzLnRvZ2dsZUZsaWdodE1vZGUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8qXG4gICAqIFRPRE86IEltcGxlbWVudCBpc1JlYWxEZXZpY2UoKS4gVGhpcyBtZXRob2QgZmFpbHMgb25cbiAgICogcmVhbCBkZXZpY2VzLCBpdCBzaG91bGQgdGhyb3cgYSBOb3RZZXRJbXBsZW1lbnRlZEVycm9yXG4gICAqL1xuICBsZXQgZmxpZ2h0TW9kZSA9ICEoYXdhaXQgdGhpcy5hZGIuaXNBaXJwbGFuZU1vZGVPbigpKTtcbiAgbG9nLmluZm8oYFR1cm5pbmcgZmxpZ2h0IG1vZGUgJHtmbGlnaHRNb2RlID8gJ29uJyA6ICdvZmYnfWApO1xuICBhd2FpdCB0aGlzLndyYXBCb290c3RyYXBEaXNjb25uZWN0KGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB0aGlzLmFkYi5zZXRBaXJwbGFuZU1vZGUoZmxpZ2h0TW9kZSk7XG4gIH0pO1xuICBhd2FpdCB0aGlzLndyYXBCb290c3RyYXBEaXNjb25uZWN0KGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB0aGlzLmFkYi5icm9hZGNhc3RBaXJwbGFuZU1vZGUoZmxpZ2h0TW9kZSk7XG4gIH0pO1xufTtcblxuY29tbWFuZHMuc2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgYXdhaXQgdGhpcy5hZGIuc2V0R2VvTG9jYXRpb24obG9jYXRpb24sIHRoaXMuaXNFbXVsYXRvcigpKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0R2VvTG9jYXRpb24oKTtcbn07XG5cbmNvbW1hbmRzLmdldEdlb0xvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB7bGF0aXR1ZGUsIGxvbmdpdHVkZSwgYWx0aXR1ZGV9ID0gYXdhaXQgdGhpcy5hZGIuZ2V0R2VvTG9jYXRpb24oKTtcbiAgcmV0dXJuIHtcbiAgICBsYXRpdHVkZTogcGFyc2VGbG9hdChsYXRpdHVkZSksXG4gICAgbG9uZ2l0dWRlOiBwYXJzZUZsb2F0KGxvbmdpdHVkZSksXG4gICAgYWx0aXR1ZGU6IHBhcnNlRmxvYXQodXRpbC5oYXNWYWx1ZShhbHRpdHVkZSkgPyBhbHRpdHVkZSA6IDApLFxuICB9O1xufTtcblxuY29tbWFuZHMudG9nZ2xlTG9jYXRpb25TZXJ2aWNlcyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbG9nLmluZm8oXCJUb2dnbGluZyBsb2NhdGlvbiBzZXJ2aWNlc1wiKTtcbiAgbGV0IGFwaSA9IGF3YWl0IHRoaXMuYWRiLmdldEFwaUxldmVsKCk7XG4gIGlmICh0aGlzLmlzRW11bGF0b3IoKSkge1xuICAgIGxldCBwcm92aWRlcnMgPSBhd2FpdCB0aGlzLmFkYi5nZXRMb2NhdGlvblByb3ZpZGVycygpO1xuICAgIGxldCBpc0dwc0VuYWJsZWQgPSBwcm92aWRlcnMuaW5kZXhPZignZ3BzJykgIT09IC0xO1xuICAgIGF3YWl0IHRoaXMuYWRiLnRvZ2dsZUdQU0xvY2F0aW9uUHJvdmlkZXIoIWlzR3BzRW5hYmxlZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGFwaSA+IDE1KSB7XG4gICAgbGV0IHNlcSA9IFsxOSwgMTldOyAvLyB1cCwgdXBcbiAgICBpZiAoYXBpID09PSAxNikge1xuICAgICAgLy8gVGhpcyB2ZXJzaW9uIG9mIEFuZHJvaWQgaGFzIGEgXCJwYXJlbnRcIiBidXR0b24gaW4gaXRzIGFjdGlvbiBiYXJcbiAgICAgIHNlcS5wdXNoKDIwKTsgLy8gZG93blxuICAgIH0gZWxzZSBpZiAoYXBpID49IDE5KSB7XG4gICAgICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBBbmRyb2lkIGhhdmUgdGhlIHRvZ2dsZSBpbiB0aGUgQWN0aW9uIGJhclxuICAgICAgc2VxID0gWzIyLCAyMiwgMTldOyAvLyByaWdodCwgcmlnaHQsIHVwXG4gICAgICAvKlxuICAgICAgICogT25jZSB0aGUgTG9jYXRpb24gc2VydmljZXMgc3dpdGNoIGlzIE9GRiwgaXQgd29uJ3QgcmVjZWl2ZSBmb2N1c1xuICAgICAgICogd2hlbiBnb2luZyBiYWNrIHRvIHRoZSBMb2NhdGlvbiBTZXJ2aWNlcyBzZXR0aW5ncyBzY3JlZW4gdW5sZXNzIHdlXG4gICAgICAgKiBzZW5kIGEgZHVtbXkga2V5ZXZlbnQgKFVQKSAqYmVmb3JlKiBvcGVuaW5nIHRoZSBzZXR0aW5ncyBzY3JlZW5cbiAgICAgICAqL1xuICAgICAgYXdhaXQgdGhpcy5hZGIua2V5ZXZlbnQoMTkpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnRvZ2dsZVNldHRpbmcoJ0xPQ0FUSU9OX1NPVVJDRV9TRVRUSU5HUycsIHNlcSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlcmUncyBubyBnbG9iYWwgbG9jYXRpb24gc2VydmljZXMgdG9nZ2xlIG9uIG9sZGVyIEFuZHJvaWQgdmVyc2lvbnNcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxufTtcblxuaGVscGVycy50b2dnbGVTZXR0aW5nID0gYXN5bmMgZnVuY3Rpb24gKHNldHRpbmcsIHByZUtleVNlcSkge1xuICAvKlxuICAgKiBwcmVLZXlTZXEgaXMgdGhlIGtleWV2ZW50IHNlcXVlbmNlIHRvIHNlbmQgb3ZlciBBREIgaW4gb3JkZXJcbiAgICogdG8gcG9zaXRpb24gdGhlIGN1cnNvciBvbiB0aGUgcmlnaHQgb3B0aW9uLlxuICAgKiBCeSBkZWZhdWx0IGl0J3MgW3VwLCB1cCwgZG93bl0gYmVjYXVzZSB3ZSB1c3VhbGx5IHRhcmdldCB0aGUgMXN0IGl0ZW0gaW5cbiAgICogdGhlIHNjcmVlbiwgYW5kIHNvbWV0aW1lcyB3aGVuIG9wZW5pbmcgc2V0dGluZ3MgYWN0aXZpdGllcyB0aGUgY3Vyc29yIGlzXG4gICAqIGFscmVhZHkgcG9zaXRpb25uZWQgb24gdGhlIDFzdCBpdGVtLCBidXQgd2UgY2FuJ3Qga25vdyBmb3Igc3VyZVxuICAgKi9cbiAgaWYgKF8uaXNOdWxsKHByZUtleVNlcSkpIHtcbiAgICBwcmVLZXlTZXEgPSBbMTksIDE5LCAyMF07IC8vIHVwLCB1cCwgZG93blxuICB9XG5cbiAgYXdhaXQgdGhpcy5vcGVuU2V0dGluZ3NBY3Rpdml0eShzZXR0aW5nKTtcblxuICBmb3IgKGxldCBrZXkgb2YgcHJlS2V5U2VxKSB7XG4gICAgYXdhaXQgdGhpcy5kb0tleShrZXkpO1xuICB9XG5cbiAgbGV0IHthcHBQYWNrYWdlLCBhcHBBY3Rpdml0eX0gPSBhd2FpdCB0aGlzLmFkYi5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG5cbiAgLypcbiAgICogQ2xpY2sgYW5kIGhhbmRsZSBwb3RlbnRpYWwgQURCIGRpc2Nvbm5lY3QgdGhhdCBvY2N1cnMgb24gb2ZmaWNpYWxcbiAgICogZW11bGF0b3Igd2hlbiB0aGUgbmV0d29yayBjb25uZWN0aW9uIGlzIGRpc2FibGVkXG4gICAqL1xuICBhd2FpdCB0aGlzLndyYXBCb290c3RyYXBEaXNjb25uZWN0KGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCB0aGlzLmRvS2V5KDIzKTtcbiAgfSk7XG5cbiAgLypcbiAgICogSW4gb25lIHBhcnRpY3VsYXIgY2FzZSAoZW5hYmxlIExvY2F0aW9uIFNlcnZpY2VzKSwgYSBwb3AtdXAgaXNcbiAgICogZGlzcGxheWVkIG9uIHNvbWUgcGxhdGZvcm1zIHNvIHRoZSB1c2VyIGFjY2VwdHMgb3IgcmVmdXNlcyB0aGF0IEdvb2dsZVxuICAgKiBjb2xsZWN0cyBsb2NhdGlvbiBkYXRhLiBTbyB3ZSB3YWl0IGZvciB0aGF0IHBvcC11cCB0byBvcGVuLCBpZiBpdFxuICAgKiBkb2Vzbid0IHRoZW4gcHJvY2VlZFxuICAgKi9cbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmFkYi53YWl0Rm9yTm90QWN0aXZpdHkoYXBwUGFja2FnZSwgYXBwQWN0aXZpdHksIDUwMDApO1xuICAgIGF3YWl0IHRoaXMuZG9LZXkoMjIpOyAvLyByaWdodFxuICAgIGF3YWl0IHRoaXMuZG9LZXkoMjMpOyAvLyBjbGlja1xuICAgIGF3YWl0IHRoaXMuYWRiLndhaXRGb3JOb3RBY3Rpdml0eShhcHBQYWNrYWdlLCBhcHBBY3Rpdml0eSwgNTAwMCk7XG4gIH0gY2F0Y2ggKGlnbikge31cblxuICBhd2FpdCB0aGlzLmFkYi5iYWNrKCk7XG59O1xuXG5oZWxwZXJzLmRvS2V5ID0gYXN5bmMgZnVuY3Rpb24gKGtleSkge1xuICAvLyBUT0RPOiBDb25maXJtIHdlIG5lZWQgdGhpcyBkZWxheS4gU2VlbXMgdG8gd29yayB3aXRob3V0IGl0LlxuICBhd2FpdCBCLmRlbGF5KDIwMDApO1xuICBhd2FpdCB0aGlzLmFkYi5rZXlldmVudChrZXkpO1xufTtcblxuaGVscGVycy53cmFwQm9vdHN0cmFwRGlzY29ubmVjdCA9IGFzeW5jIGZ1bmN0aW9uICh3cmFwcGVkKSB7XG4gIGlmICghdGhpcy5ib290c3RyYXApIHtcbiAgICByZXR1cm4gYXdhaXQgd3JhcHBlZCgpO1xuICB9XG5cbiAgdGhpcy5ib290c3RyYXAuaWdub3JlVW5leHBlY3RlZFNodXRkb3duID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB3cmFwcGVkKCk7XG4gICAgYXdhaXQgdGhpcy5hZGIucmVzdGFydCgpO1xuICAgIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnN0YXJ0KHRoaXMub3B0cy5hcHBQYWNrYWdlLCB0aGlzLm9wdHMuZGlzYWJsZUFuZHJvaWRXYXRjaGVycywgdGhpcy5vcHRzLmFjY2VwdFNzbENlcnRzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0aGlzLmJvb3RzdHJhcC5pZ25vcmVVbmV4cGVjdGVkU2h1dGRvd24gPSBmYWxzZTtcbiAgfVxufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL25ldHdvcmsuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
