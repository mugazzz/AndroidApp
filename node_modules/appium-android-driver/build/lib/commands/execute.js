"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

let extensions = {};

extensions.execute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (script, args) {
    if (script.match(/^mobile:/)) {
      script = script.replace(/^mobile:/, '').trim();
      return yield this.executeMobile(script, _lodash.default.isArray(args) ? args[0] : args);
    }

    throw new _appiumBaseDriver.errors.NotImplementedError();
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

extensions.executeMobile = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (mobileCommand, opts = {}) {
    const mobileCommandsMapping = {
      shell: 'mobileShell',
      startLogsBroadcast: 'mobileStartLogsBroadcast',
      stopLogsBroadcast: 'mobileStopLogsBroadcast',
      performEditorAction: 'mobilePerformEditorAction'
    };

    if (!_lodash.default.has(mobileCommandsMapping, mobileCommand)) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". ` + `Only ${_lodash.default.keys(mobileCommandsMapping)} commands are supported.`);
    }

    return yield this[mobileCommandsMapping[mobileCommand]](opts);
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJleGVjdXRlIiwic2NyaXB0IiwiYXJncyIsIm1hdGNoIiwicmVwbGFjZSIsInRyaW0iLCJleGVjdXRlTW9iaWxlIiwiXyIsImlzQXJyYXkiLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwibW9iaWxlQ29tbWFuZCIsIm9wdHMiLCJtb2JpbGVDb21tYW5kc01hcHBpbmciLCJzaGVsbCIsInN0YXJ0TG9nc0Jyb2FkY2FzdCIsInN0b3BMb2dzQnJvYWRjYXN0IiwicGVyZm9ybUVkaXRvckFjdGlvbiIsImhhcyIsIlVua25vd25Db21tYW5kRXJyb3IiLCJrZXlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFVBQVUsR0FBRyxFQUFqQjs7QUFFQUEsVUFBVSxDQUFDQyxPQUFYO0FBQUEsNkNBQXFCLFdBQWdCQyxNQUFoQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDakQsUUFBSUQsTUFBTSxDQUFDRSxLQUFQLENBQWEsVUFBYixDQUFKLEVBQThCO0FBQzVCRixNQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0csT0FBUCxDQUFlLFVBQWYsRUFBMkIsRUFBM0IsRUFBK0JDLElBQS9CLEVBQVQ7QUFDQSxtQkFBYSxLQUFLQyxhQUFMLENBQW1CTCxNQUFuQixFQUEyQk0sZ0JBQUVDLE9BQUYsQ0FBVU4sSUFBVixJQUFrQkEsSUFBSSxDQUFDLENBQUQsQ0FBdEIsR0FBNEJBLElBQXZELENBQWI7QUFDRDs7QUFFRCxVQUFNLElBQUlPLHlCQUFPQyxtQkFBWCxFQUFOO0FBQ0QsR0FQRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTQVgsVUFBVSxDQUFDTyxhQUFYO0FBQUEsOENBQTJCLFdBQWdCSyxhQUFoQixFQUErQkMsSUFBSSxHQUFHLEVBQXRDLEVBQTBDO0FBQ25FLFVBQU1DLHFCQUFxQixHQUFHO0FBQzVCQyxNQUFBQSxLQUFLLEVBQUUsYUFEcUI7QUFHNUJDLE1BQUFBLGtCQUFrQixFQUFFLDBCQUhRO0FBSTVCQyxNQUFBQSxpQkFBaUIsRUFBRSx5QkFKUztBQU01QkMsTUFBQUEsbUJBQW1CLEVBQUU7QUFOTyxLQUE5Qjs7QUFTQSxRQUFJLENBQUNWLGdCQUFFVyxHQUFGLENBQU1MLHFCQUFOLEVBQTZCRixhQUE3QixDQUFMLEVBQWtEO0FBQ2hELFlBQU0sSUFBSUYseUJBQU9VLG1CQUFYLENBQWdDLDJCQUEwQlIsYUFBYyxLQUF6QyxHQUNDLFFBQU9KLGdCQUFFYSxJQUFGLENBQU9QLHFCQUFQLENBQThCLDBCQURyRSxDQUFOO0FBRUQ7O0FBQ0QsaUJBQWEsS0FBS0EscUJBQXFCLENBQUNGLGFBQUQsQ0FBMUIsRUFBMkNDLElBQTNDLENBQWI7QUFDRCxHQWZEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztlQWlCZWIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5sZXQgZXh0ZW5zaW9ucyA9IHt9O1xuXG5leHRlbnNpb25zLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiAoc2NyaXB0LCBhcmdzKSB7XG4gIGlmIChzY3JpcHQubWF0Y2goL15tb2JpbGU6LykpIHtcbiAgICBzY3JpcHQgPSBzY3JpcHQucmVwbGFjZSgvXm1vYmlsZTovLCAnJykudHJpbSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVNb2JpbGUoc2NyaXB0LCBfLmlzQXJyYXkoYXJncykgPyBhcmdzWzBdIDogYXJncyk7XG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbn07XG5cbmV4dGVuc2lvbnMuZXhlY3V0ZU1vYmlsZSA9IGFzeW5jIGZ1bmN0aW9uIChtb2JpbGVDb21tYW5kLCBvcHRzID0ge30pIHtcbiAgY29uc3QgbW9iaWxlQ29tbWFuZHNNYXBwaW5nID0ge1xuICAgIHNoZWxsOiAnbW9iaWxlU2hlbGwnLFxuXG4gICAgc3RhcnRMb2dzQnJvYWRjYXN0OiAnbW9iaWxlU3RhcnRMb2dzQnJvYWRjYXN0JyxcbiAgICBzdG9wTG9nc0Jyb2FkY2FzdDogJ21vYmlsZVN0b3BMb2dzQnJvYWRjYXN0JyxcblxuICAgIHBlcmZvcm1FZGl0b3JBY3Rpb246ICdtb2JpbGVQZXJmb3JtRWRpdG9yQWN0aW9uJyxcbiAgfTtcblxuICBpZiAoIV8uaGFzKG1vYmlsZUNvbW1hbmRzTWFwcGluZywgbW9iaWxlQ29tbWFuZCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoYFVua25vd24gbW9iaWxlIGNvbW1hbmQgXCIke21vYmlsZUNvbW1hbmR9XCIuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgT25seSAke18ua2V5cyhtb2JpbGVDb21tYW5kc01hcHBpbmcpfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW21vYmlsZUNvbW1hbmRzTWFwcGluZ1ttb2JpbGVDb21tYW5kXV0ob3B0cyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
