"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.setupNewChromedriver = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumChromedriver = _interopRequireDefault(require("appium-chromedriver"));

var _portfinder = _interopRequireDefault(require("portfinder"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _webviewHelpers = _interopRequireWildcard(require("../webview-helpers"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.getCurrentContext = (0, _asyncToGenerator2.default)(function* () {
  return this.curContext || this.defaultContextName();
});
commands.getContexts = (0, _asyncToGenerator2.default)(function* () {
  let webviews;

  if (this.isChromeSession) {
    webviews = [_webviewHelpers.CHROMIUM_WIN];
  } else {
    webviews = yield _webviewHelpers.default.getWebviews(this.adb, this.opts.androidDeviceSocket);
  }

  this.contexts = _lodash.default.union([_webviewHelpers.NATIVE_WIN], webviews);

  _logger.default.debug(`Available contexts: ${JSON.stringify(this.contexts)}`);

  return this.contexts;
});

commands.setContext = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (name) {
    if (name === null) {
      name = this.defaultContextName();
    } else if (name === _webviewHelpers.WEBVIEW_WIN) {
      name = this.defaultWebviewName();
    }

    let contexts = yield this.getContexts();

    if (!_lodash.default.includes(contexts, name)) {
      throw new _appiumBaseDriver.errors.NoSuchContextError();
    }

    if (name === this.curContext) {
      return;
    }

    yield this.switchContext(name);
    this.curContext = name;
  });

  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}();

helpers.switchContext = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (name) {
    if (this.isChromedriverContext(name)) {
      yield this.startChromedriverProxy(name);
    } else if (this.isChromedriverContext(this.curContext)) {
      if (this.opts.recreateChromeDriverSessions) {
        _logger.default.debug("recreateChromeDriverSessions set to true; killing existing chromedrivers");

        yield this.stopChromedriverProxies();
      } else {
        yield this.suspendChromedriverProxy();
      }
    } else {
      throw new Error(`Didn't know how to handle switching to context '${name}'`);
    }
  });

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
}();

helpers.defaultContextName = function () {
  return _webviewHelpers.NATIVE_WIN;
};

helpers.defaultWebviewName = function () {
  return _webviewHelpers.WEBVIEW_BASE + this.opts.appPackage;
};

helpers.isWebContext = function () {
  return this.curContext !== null && this.curContext !== _webviewHelpers.NATIVE_WIN;
};

helpers.startChromedriverProxy = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (context) {
    _logger.default.debug(`Connecting to chrome-backed webview context '${context}'`);

    let cd;

    if (this.sessionChromedrivers[context]) {
      _logger.default.debug(`Found existing Chromedriver for context '${context}'. Using it.`);

      cd = this.sessionChromedrivers[context];
      yield setupExistingChromedriver(cd);
    } else {
      let opts = _lodash.default.cloneDeep(this.opts);

      opts.chromeUseRunningApp = true;

      if (opts.extractChromeAndroidPackageFromContextName) {
        let androidPackage = context.match(`${_webviewHelpers.WEBVIEW_BASE}(.+)`);

        if (androidPackage && androidPackage.length > 0) {
          opts.chromeAndroidPackage = androidPackage[1];
        }
      }

      cd = yield this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb);
      cd.on(_appiumChromedriver.default.EVENT_CHANGED, msg => {
        if (msg.state === _appiumChromedriver.default.STATE_STOPPED) {
          this.onChromedriverStop(context);
        }
      });
      this.sessionChromedrivers[context] = cd;
    }

    this.chromedriver = cd;
    this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);
    this.jwpProxyActive = true;
  });

  return function (_x3) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = null;
  this.jwpProxyActive = false;
};

helpers.onChromedriverStop = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (context) {
    _logger.default.warn(`Chromedriver for context ${context} stopped unexpectedly`);

    if (context === this.curContext) {
      let err = new Error("Chromedriver quit unexpectedly during session");
      yield this.startUnexpectedShutdown(err);
    } else {
      _logger.default.warn("Chromedriver quit unexpectedly, but it wasn't the active " + "context, ignoring");

      delete this.sessionChromedrivers[context];
    }
  });

  return function (_x4) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.stopChromedriverProxies = (0, _asyncToGenerator2.default)(function* () {
  this.suspendChromedriverProxy();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _lodash.default.keys(this.sessionChromedrivers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let context = _step.value;
      let cd = this.sessionChromedrivers[context];

      _logger.default.debug(`Stopping chromedriver for context ${context}`);

      cd.removeAllListeners(_appiumChromedriver.default.EVENT_CHANGED);

      try {
        yield cd.stop();
      } catch (err) {
        _logger.default.warn(`Error stopping Chromedriver: ${err.message}`);
      }

      delete this.sessionChromedrivers[context];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});

helpers.isChromedriverContext = function (viewName) {
  return _lodash.default.includes(viewName, _webviewHelpers.WEBVIEW_WIN) || viewName === _webviewHelpers.CHROMIUM_WIN;
};

helpers.shouldDismissChromeWelcome = function shouldDismissChromeWelcome() {
  return !!this.opts.chromeOptions && _lodash.default.isArray(this.opts.chromeOptions.args) && this.opts.chromeOptions.args.includes('--no-first-run');
};

helpers.dismissChromeWelcome = function () {
  var _dismissChromeWelcome = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.info("Trying to dismiss Chrome welcome");

    let activity = yield this.getCurrentActivity();

    if (activity !== "org.chromium.chrome.browser.firstrun.FirstRunActivity") {
      _logger.default.info("Chrome welcome dialog never showed up! Continuing");

      return;
    }

    let el = yield this.findElOrEls('id', 'com.android.chrome:id/terms_accept', false);
    yield this.click(el.ELEMENT);

    try {
      let el = yield this.findElOrEls('id', 'com.android.chrome:id/negative_button', false);
      yield this.click(el.ELEMENT);
    } catch (e) {
      _logger.default.warn(`This device did not show Chrome SignIn dialog, ${e.message}`);
    }
  });

  return function dismissChromeWelcome() {
    return _dismissChromeWelcome.apply(this, arguments);
  };
}();

helpers.startChromeSession = function () {
  var _startChromeSession = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.info("Starting a chrome-based browser session");

    let opts = _lodash.default.cloneDeep(this.opts);

    opts.chromeUseRunningApp = false;
    const knownPackages = ['org.chromium.chrome.shell', 'com.android.chrome', 'com.chrome.beta', 'org.chromium.chrome', 'org.chromium.webview_shell'];

    if (_lodash.default.includes(knownPackages, this.opts.appPackage)) {
      opts.chromeBundleId = this.opts.appPackage;
    } else {
      opts.chromeAndroidActivity = this.opts.appActivity;
    }

    this.chromedriver = yield this.setupNewChromedriver(opts, this.adb.curDeviceId, this.adb);
    this.chromedriver.on(_appiumChromedriver.default.EVENT_CHANGED, msg => {
      if (msg.state === _appiumChromedriver.default.STATE_STOPPED) {
        this.onChromedriverStop(_webviewHelpers.CHROMIUM_WIN);
      }
    });
    this.curContext = _webviewHelpers.CHROMIUM_WIN;
    this.sessionChromedrivers[_webviewHelpers.CHROMIUM_WIN] = this.chromedriver;
    this.proxyReqRes = this.chromedriver.proxyReq.bind(this.chromedriver);
    this.jwpProxyActive = true;

    if (this.shouldDismissChromeWelcome()) {
      yield this.dismissChromeWelcome();
    }
  });

  return function startChromeSession() {
    return _startChromeSession.apply(this, arguments);
  };
}();

function setupExistingChromedriver(_x5) {
  return _setupExistingChromedriver.apply(this, arguments);
}

function _setupExistingChromedriver() {
  _setupExistingChromedriver = (0, _asyncToGenerator2.default)(function* (chromedriver) {
    if (!(yield chromedriver.hasWorkingWebview())) {
      _logger.default.debug("ChromeDriver is not associated with a window. " + "Re-initializing the session.");

      yield chromedriver.restart();
    }

    return chromedriver;
  });
  return _setupExistingChromedriver.apply(this, arguments);
}

helpers.setupNewChromedriver = function () {
  var _setupNewChromedriver = (0, _asyncToGenerator2.default)(function* (opts, curDeviceId, adb) {
    if (!opts.chromeDriverPort) {
      const getPort = _bluebird.default.promisify(_portfinder.default.getPort, {
        context: _portfinder.default
      });

      opts.chromeDriverPort = yield getPort();

      _logger.default.debug(`A port was not given, using random port: ${opts.chromeDriverPort}`);
    }

    const chromedriver = new _appiumChromedriver.default({
      port: opts.chromeDriverPort,
      executable: opts.chromedriverExecutable,
      adb,
      verbose: !!opts.showChromedriverLog,
      executableDir: opts.chromedriverExecutableDir,
      mappingPath: opts.chromedriverChromeMappingFile,
      bundleId: opts.chromeBundleId,
      useSystemExecutable: opts.chromedriverUseSystemExecutable
    });
    opts.chromeOptions = opts.chromeOptions || {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.keys(opts)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const opt = _step2.value;

        if (opt.endsWith(':chromeOptions')) {
          _logger.default.warn(`Merging '${opt}' into 'chromeOptions'. This may cause unexpected behavior`);

          _lodash.default.merge(opts.chromeOptions, opts[opt]);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    let caps = {
      chromeOptions: {
        androidPackage: opts.chromeOptions.androidPackage || opts.appPackage
      }
    };

    if (opts.chromeUseRunningApp) {
      caps.chromeOptions.androidUseRunningApp = opts.chromeUseRunningApp;
    }

    if (opts.chromeAndroidPackage) {
      caps.chromeOptions.androidPackage = opts.chromeAndroidPackage;
    }

    if (opts.chromeAndroidActivity) {
      caps.chromeOptions.androidActivity = opts.chromeAndroidActivity;
    }

    if (opts.chromeAndroidProcess) {
      caps.chromeOptions.androidProcess = opts.chromeAndroidProcess;
    }

    if (opts.loggingPrefs) {
      caps.loggingPrefs = opts.loggingPrefs;
    }

    if (opts.enablePerformanceLogging) {
      _logger.default.warn(`The 'enablePerformanceLogging' cap is deprecated; simply use ` + `the 'loggingPrefs' cap instead, with a 'performance' key set to 'ALL'`);

      const newPref = {
        performance: 'ALL'
      };
      caps.loggingPrefs = caps.loggingPrefs ? Object.assign({}, caps.loggingPrefs, newPref) : newPref;
    }

    if (opts.browserName === 'chromium-webview') {
      caps.chromeOptions.androidActivity = opts.appActivity;
    }

    if (opts.pageLoadStrategy) {
      caps.pageLoadStrategy = opts.pageLoadStrategy;
    }

    caps = _webviewHelpers.default.decorateChromeOptions(caps, opts, curDeviceId);
    yield chromedriver.start(caps);
    return chromedriver;
  });

  return function setupNewChromedriver(_x6, _x7, _x8) {
    return _setupNewChromedriver.apply(this, arguments);
  };
}();

const setupNewChromedriver = helpers.setupNewChromedriver;
exports.setupNewChromedriver = setupNewChromedriver;
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
