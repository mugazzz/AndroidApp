"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _shellQuote = require("shell-quote");

let commands = {};
exports.commands = commands;

commands.mobileShell = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    if (!this.relaxedSecurityEnabled) {
      _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order to run any shell commands`);
    }

    const command = opts.command,
          _opts$args = opts.args,
          args = _opts$args === void 0 ? [] : _opts$args,
          _opts$timeout = opts.timeout,
          timeout = _opts$timeout === void 0 ? 20000 : _opts$timeout,
          includeStderr = opts.includeStderr;

    if (!_lodash.default.isString(command)) {
      _logger.default.errorAndThrow(`The 'command' argument is mandatory'`);
    }

    const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];

    _logger.default.debug(`Running '${this.adb.executable.path} ${(0, _shellQuote.quote)(adbArgs)}'`);

    try {
      const _ref2 = yield (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
        timeout
      }),
            stdout = _ref2.stdout,
            stderr = _ref2.stderr;

      if (includeStderr) {
        return {
          stdout,
          stderr
        };
      }

      return stdout;
    } catch (err) {
      _logger.default.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
    }
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zaGVsbC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1vYmlsZVNoZWxsIiwib3B0cyIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiY29tbWFuZCIsImFyZ3MiLCJ0aW1lb3V0IiwiaW5jbHVkZVN0ZGVyciIsIl8iLCJpc1N0cmluZyIsImFkYkFyZ3MiLCJhZGIiLCJleGVjdXRhYmxlIiwiZGVmYXVsdEFyZ3MiLCJpc0FycmF5IiwiZGVidWciLCJwYXRoIiwic3Rkb3V0Iiwic3RkZXJyIiwiZXJyIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjs7O0FBRUFBLFFBQVEsQ0FBQ0MsV0FBVDtBQUFBLDZDQUF1QixXQUFnQkMsSUFBSSxHQUFHLEVBQXZCLEVBQTJCO0FBQ2hELFFBQUksQ0FBQyxLQUFLQyxzQkFBVixFQUFrQztBQUNoQ0Msc0JBQUlDLGFBQUosQ0FBbUIsc0ZBQW5CO0FBQ0Q7O0FBSCtDLFVBTTlDQyxPQU44QyxHQVU1Q0osSUFWNEMsQ0FNOUNJLE9BTjhDO0FBQUEsdUJBVTVDSixJQVY0QyxDQU85Q0ssSUFQOEM7QUFBQSxVQU85Q0EsSUFQOEMsMkJBT3ZDLEVBUHVDO0FBQUEsMEJBVTVDTCxJQVY0QyxDQVE5Q00sT0FSOEM7QUFBQSxVQVE5Q0EsT0FSOEMsOEJBUXBDLEtBUm9DO0FBQUEsVUFTOUNDLGFBVDhDLEdBVTVDUCxJQVY0QyxDQVM5Q08sYUFUOEM7O0FBWWhELFFBQUksQ0FBQ0MsZ0JBQUVDLFFBQUYsQ0FBV0wsT0FBWCxDQUFMLEVBQTBCO0FBQ3hCRixzQkFBSUMsYUFBSixDQUFtQixzQ0FBbkI7QUFDRDs7QUFFRCxVQUFNTyxPQUFPLEdBQUcsQ0FDZCxHQUFHLEtBQUtDLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkMsV0FEVCxFQUVkLE9BRmMsRUFHZFQsT0FIYyxFQUlkLElBQUlJLGdCQUFFTSxPQUFGLENBQVVULElBQVYsSUFBa0JBLElBQWxCLEdBQXlCLENBQUNBLElBQUQsQ0FBN0IsQ0FKYyxDQUFoQjs7QUFNQUgsb0JBQUlhLEtBQUosQ0FBVyxZQUFXLEtBQUtKLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkksSUFBSyxJQUFHLHVCQUFNTixPQUFOLENBQWUsR0FBakU7O0FBQ0EsUUFBSTtBQUFBLDBCQUM2Qix3QkFBSyxLQUFLQyxHQUFMLENBQVNDLFVBQVQsQ0FBb0JJLElBQXpCLEVBQStCTixPQUEvQixFQUF3QztBQUFDSixRQUFBQTtBQUFELE9BQXhDLENBRDdCO0FBQUEsWUFDS1csTUFETCxTQUNLQSxNQURMO0FBQUEsWUFDYUMsTUFEYixTQUNhQSxNQURiOztBQUVGLFVBQUlYLGFBQUosRUFBbUI7QUFDakIsZUFBTztBQUNMVSxVQUFBQSxNQURLO0FBRUxDLFVBQUFBO0FBRkssU0FBUDtBQUlEOztBQUNELGFBQU9ELE1BQVA7QUFDRCxLQVRELENBU0UsT0FBT0UsR0FBUCxFQUFZO0FBQ1pqQixzQkFBSUMsYUFBSixDQUFtQix1QkFBc0JDLE9BQVEsbUJBQS9CLEdBQ0MsbUJBQWtCZSxHQUFHLENBQUNDLE9BQVEsSUFEL0IsR0FFQyxXQUFVRCxHQUFHLENBQUNGLE1BQU8sYUFBWUUsR0FBRyxDQUFDRCxNQUFPLEVBRi9EO0FBR0Q7QUFDRixHQXJDRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7ZUF3Q2VwQixRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcXVvdGUgfSBmcm9tICdzaGVsbC1xdW90ZSc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5tb2JpbGVTaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIChvcHRzID0ge30pIHtcbiAgaWYgKCF0aGlzLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCBpbiBvcmRlciB0byBydW4gYW55IHNoZWxsIGNvbW1hbmRzYCk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgY29tbWFuZCxcbiAgICBhcmdzID0gW10sXG4gICAgdGltZW91dCA9IDIwMDAwLFxuICAgIGluY2x1ZGVTdGRlcnIsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghXy5pc1N0cmluZyhjb21tYW5kKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGUgJ2NvbW1hbmQnIGFyZ3VtZW50IGlzIG1hbmRhdG9yeSdgKTtcbiAgfVxuXG4gIGNvbnN0IGFkYkFyZ3MgPSBbXG4gICAgLi4udGhpcy5hZGIuZXhlY3V0YWJsZS5kZWZhdWx0QXJncyxcbiAgICAnc2hlbGwnLFxuICAgIGNvbW1hbmQsXG4gICAgLi4uKF8uaXNBcnJheShhcmdzKSA/IGFyZ3MgOiBbYXJnc10pXG4gIF07XG4gIGxvZy5kZWJ1ZyhgUnVubmluZyAnJHt0aGlzLmFkYi5leGVjdXRhYmxlLnBhdGh9ICR7cXVvdGUoYWRiQXJncyl9J2ApO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXQsIHN0ZGVycn0gPSBhd2FpdCBleGVjKHRoaXMuYWRiLmV4ZWN1dGFibGUucGF0aCwgYWRiQXJncywge3RpbWVvdXR9KTtcbiAgICBpZiAoaW5jbHVkZVN0ZGVycikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Rkb3V0LFxuICAgICAgICBzdGRlcnJcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBzdGRvdXQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDYW5ub3QgZXhlY3V0ZSB0aGUgJyR7Y29tbWFuZH0nIHNoZWxsIGNvbW1hbmQuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX0uIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBTdGRPdXQ6ICR7ZXJyLnN0ZG91dH0uIFN0ZEVycjogJHtlcnIuc3RkZXJyfWApO1xuICB9XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9zaGVsbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
