"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _lodash = _interopRequireDefault(require("lodash"));

var _temp = _interopRequireDefault(require("temp"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _jimp = _interopRequireDefault(require("jimp"));

var _teen_process = require("teen_process");

const swipeStepsPerSec = 28;
const dragStepsPerSec = 40;
const CONTAINER_PATH_MARKER = '@';
const CONTAINER_PATH_PATTERN = new RegExp(`^${CONTAINER_PATH_MARKER}([^/]+)/(.+)`);
const ANDROID_MEDIA_RESCAN_INTENT = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE';
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.keyevent = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (keycode, metastate = null) {
    _logger.default.warn("keyevent will be deprecated use pressKeyCode");

    return yield this.pressKeyCode(keycode, metastate);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.pressKeyCode = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (keycode, metastate = null) {
    return yield this.bootstrap.sendAction("pressKeyCode", {
      keycode,
      metastate
    });
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();

commands.longPressKeyCode = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (keycode, metastate = null) {
    return yield this.bootstrap.sendAction("longPressKeyCode", {
      keycode,
      metastate
    });
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}();

commands.getOrientation = (0, _asyncToGenerator2.default)(function* () {
  let params = {
    naturalOrientation: !!this.opts.androidNaturalOrientation
  };
  let orientation = yield this.bootstrap.sendAction("orientation", params);
  return orientation.toUpperCase();
});

commands.setOrientation = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (orientation) {
    orientation = orientation.toUpperCase();
    let params = {
      orientation,
      naturalOrientation: !!this.opts.androidNaturalOrientation
    };
    return yield this.bootstrap.sendAction("orientation", params);
  });

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}();

commands.fakeFlick = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (xSpeed, ySpeed) {
    return yield this.bootstrap.sendAction('flick', {
      xSpeed,
      ySpeed
    });
  });

  return function (_x5, _x6) {
    return _ref6.apply(this, arguments);
  };
}();

commands.fakeFlickElement = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (elementId, xoffset, yoffset, speed) {
    let params = {
      xoffset,
      yoffset,
      speed,
      elementId
    };
    return yield this.bootstrap.sendAction('element:flick', params);
  });

  return function (_x7, _x8, _x9, _x10) {
    return _ref7.apply(this, arguments);
  };
}();

commands.swipe = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (startX, startY, endX, endY, duration, touchCount, elId) {
    if (startX === 'null') {
      startX = 0.5;
    }

    if (startY === 'null') {
      startY = 0.5;
    }

    let swipeOpts = {
      startX,
      startY,
      endX,
      endY,
      steps: Math.round(duration * swipeStepsPerSec)
    };

    if (_appiumSupport.util.hasValue(elId)) {
      swipeOpts.elementId = elId;
    }

    return yield this.doSwipe(swipeOpts);
  });

  return function (_x11, _x12, _x13, _x14, _x15, _x16, _x17) {
    return _ref8.apply(this, arguments);
  };
}();

commands.doSwipe = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (swipeOpts) {
    if (_appiumSupport.util.hasValue(swipeOpts.elementId)) {
      return yield this.bootstrap.sendAction("element:swipe", swipeOpts);
    } else {
      return yield this.bootstrap.sendAction("swipe", swipeOpts);
    }
  });

  return function (_x18) {
    return _ref9.apply(this, arguments);
  };
}();

commands.pinchClose = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (startX, startY, endX, endY, duration, percent, steps, elId) {
    let pinchOpts = {
      direction: 'in',
      elementId: elId,
      percent,
      steps
    };
    return yield this.bootstrap.sendAction("element:pinch", pinchOpts);
  });

  return function (_x19, _x20, _x21, _x22, _x23, _x24, _x25, _x26) {
    return _ref10.apply(this, arguments);
  };
}();

commands.pinchOpen = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (startX, startY, endX, endY, duration, percent, steps, elId) {
    let pinchOpts = {
      direction: 'out',
      elementId: elId,
      percent,
      steps
    };
    return yield this.bootstrap.sendAction("element:pinch", pinchOpts);
  });

  return function (_x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34) {
    return _ref11.apply(this, arguments);
  };
}();

commands.flick = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (element, xSpeed, ySpeed, xOffset, yOffset, speed) {
    if (element) {
      yield this.fakeFlickElement(element, xOffset, yOffset, speed);
    } else {
      yield this.fakeFlick(xSpeed, ySpeed);
    }
  });

  return function (_x35, _x36, _x37, _x38, _x39, _x40) {
    return _ref12.apply(this, arguments);
  };
}();

commands.drag = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (startX, startY, endX, endY, duration, touchCount, elementId, destElId) {
    let dragOpts = {
      elementId,
      destElId,
      startX,
      startY,
      endX,
      endY,
      steps: Math.round(duration * dragStepsPerSec)
    };
    return yield this.doDrag(dragOpts);
  });

  return function (_x41, _x42, _x43, _x44, _x45, _x46, _x47, _x48) {
    return _ref13.apply(this, arguments);
  };
}();

commands.doDrag = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (dragOpts) {
    if (_appiumSupport.util.hasValue(dragOpts.elementId)) {
      return yield this.bootstrap.sendAction("element:drag", dragOpts);
    } else {
      return yield this.bootstrap.sendAction("drag", dragOpts);
    }
  });

  return function (_x49) {
    return _ref14.apply(this, arguments);
  };
}();

commands.lock = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (seconds) {
    yield this.adb.lock();

    if (isNaN(seconds)) {
      return;
    }

    const floatSeconds = parseFloat(seconds);

    if (floatSeconds <= 0) {
      return;
    }

    yield _bluebird.default.delay(1000 * floatSeconds);
    yield this.unlock();
  });

  return function (_x50) {
    return _ref15.apply(this, arguments);
  };
}();

commands.isLocked = (0, _asyncToGenerator2.default)(function* () {
  return yield this.adb.isScreenLocked();
});
commands.unlock = (0, _asyncToGenerator2.default)(function* () {
  return yield _androidHelpers.default.unlock(this, this.adb, this.caps);
});
commands.openNotifications = (0, _asyncToGenerator2.default)(function* () {
  return yield this.bootstrap.sendAction("openNotification");
});

commands.setLocation = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (latitude, longitude) {
    return yield this.adb.sendTelnetCommand(`geo fix ${longitude} ${latitude}`);
  });

  return function (_x51, _x52) {
    return _ref19.apply(this, arguments);
  };
}();

function parseContainerPath(remotePath) {
  const match = CONTAINER_PATH_PATTERN.exec(remotePath);

  if (!match) {
    _logger.default.errorAndThrow(`It is expected that package identifier is separated from the relative path with a single slash. ` + `'${remotePath}' is given instead`);
  }

  return [match[1], _path.default.posix.resolve(`/data/data/${match[1]}`, match[2])];
}

commands.pullFile = function () {
  var _ref20 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    if (remotePath.endsWith('/')) {
      _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
    }

    let tmpDestination = null;

    if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
      const _parseContainerPath = parseContainerPath(remotePath),
            _parseContainerPath2 = (0, _slicedToArray2.default)(_parseContainerPath, 2),
            packageId = _parseContainerPath2[0],
            pathInContainer = _parseContainerPath2[1];

      _logger.default.info(`Parsed package identifier '${packageId}' from '${remotePath}'. Will get the data from '${pathInContainer}'`);

      tmpDestination = `/data/local/tmp/${_path.default.posix.basename(pathInContainer)}`;

      try {
        yield this.adb.shell(['run-as', packageId, `chmod 777 '${pathInContainer.replace(/'/g, '\\\'')}'`]);
        yield this.adb.shell(['cp', '-f', pathInContainer, tmpDestination]);
      } catch (e) {
        _logger.default.errorAndThrow(`Cannot access the container of '${packageId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
      }
    }

    const localFile = _temp.default.path({
      prefix: 'appium',
      suffix: '.tmp'
    });

    try {
      yield this.adb.pull(_lodash.default.isString(tmpDestination) ? tmpDestination : remotePath, localFile);
      const data = yield _appiumSupport.fs.readFile(localFile);
      return Buffer.from(data).toString('base64');
    } finally {
      if (yield _appiumSupport.fs.exists(localFile)) {
        yield _appiumSupport.fs.unlink(localFile);
      }

      if (_lodash.default.isString(tmpDestination)) {
        yield this.adb.shell(['rm', '-f', tmpDestination]);
      }
    }
  });

  return function (_x53) {
    return _ref20.apply(this, arguments);
  };
}();

commands.pushFile = function () {
  var _ref21 = (0, _asyncToGenerator2.default)(function* (remotePath, base64Data) {
    if (remotePath.endsWith('/')) {
      _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
    }

    const localFile = _temp.default.path({
      prefix: 'appium',
      suffix: '.tmp'
    });

    if (_lodash.default.isArray(base64Data)) {
      base64Data = Buffer.from(base64Data).toString('utf8');
    }

    const content = Buffer.from(base64Data, 'base64');
    let tmpDestination = null;

    try {
      yield _appiumSupport.fs.writeFile(localFile, content.toString('binary'), 'binary');

      if (remotePath.startsWith(CONTAINER_PATH_MARKER)) {
        const _parseContainerPath3 = parseContainerPath(remotePath),
              _parseContainerPath4 = (0, _slicedToArray2.default)(_parseContainerPath3, 2),
              packageId = _parseContainerPath4[0],
              pathInContainer = _parseContainerPath4[1];

        _logger.default.info(`Parsed package identifier '${packageId}' from '${remotePath}'. Will put the data into '${pathInContainer}'`);

        tmpDestination = `/data/local/tmp/${_path.default.posix.basename(pathInContainer)}`;

        try {
          yield this.adb.shell(['run-as', packageId, `mkdir -p '${_path.default.posix.dirname(pathInContainer).replace(/'/g, '\\\'')}'`]);
          yield this.adb.shell(['run-as', packageId, `touch '${pathInContainer.replace(/'/g, '\\\'')}'`]);
          yield this.adb.shell(['run-as', packageId, `chmod 777 '${pathInContainer.replace(/'/g, '\\\'')}'`]);
          yield this.adb.push(localFile, tmpDestination);
          yield this.adb.shell(['cp', '-f', tmpDestination, pathInContainer]);
        } catch (e) {
          _logger.default.errorAndThrow(`Cannot access the container of '${packageId}' application. ` + `Is the application installed and has 'debuggable' build option set to true? ` + `Original error: ${e.message}`);
        }
      } else {
        yield this.adb.push(localFile, remotePath);

        _logger.default.info("After pushing media file, broadcasting media scan intent");

        try {
          yield this.adb.shell(['am', 'broadcast', '-a', ANDROID_MEDIA_RESCAN_INTENT, '-d', `file://${remotePath}`]);
        } catch (e) {
          _logger.default.warn(`Got error broadcasting media scan intent: ${e.message}; ignoring`);
        }
      }
    } finally {
      if (yield _appiumSupport.fs.exists(localFile)) {
        yield _appiumSupport.fs.unlink(localFile);
      }

      if (_lodash.default.isString(tmpDestination)) {
        yield this.adb.shell(['rm', '-f', tmpDestination]);
      }
    }
  });

  return function (_x54, _x55) {
    return _ref21.apply(this, arguments);
  };
}();

commands.pullFolder = function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    let localFolder = _temp.default.path({
      prefix: 'appium'
    });

    yield this.adb.pull(remotePath, localFolder);
    return (yield _appiumSupport.zip.toInMemoryZip(localFolder)).toString('base64');
  });

  return function (_x56) {
    return _ref22.apply(this, arguments);
  };
}();

commands.fingerprint = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (fingerprintId) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("fingerprint method is only available for emulators");
    }

    yield this.adb.fingerprint(fingerprintId);
  });

  return function (_x57) {
    return _ref23.apply(this, arguments);
  };
}();

commands.sendSMS = function () {
  var _ref24 = (0, _asyncToGenerator2.default)(function* (phoneNumber, message) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("sendSMS method is only available for emulators");
    }

    yield this.adb.sendSMS(phoneNumber, message);
  });

  return function (_x58, _x59) {
    return _ref24.apply(this, arguments);
  };
}();

commands.gsmCall = function () {
  var _ref25 = (0, _asyncToGenerator2.default)(function* (phoneNumber, action) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("gsmCall method is only available for emulators");
    }

    yield this.adb.gsmCall(phoneNumber, action);
  });

  return function (_x60, _x61) {
    return _ref25.apply(this, arguments);
  };
}();

commands.gsmSignal = function () {
  var _ref26 = (0, _asyncToGenerator2.default)(function* (signalStrengh) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("gsmSignal method is only available for emulators");
    }

    yield this.adb.gsmSignal(signalStrengh);
  });

  return function (_x62) {
    return _ref26.apply(this, arguments);
  };
}();

commands.gsmVoice = function () {
  var _ref27 = (0, _asyncToGenerator2.default)(function* (state) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("gsmVoice method is only available for emulators");
    }

    yield this.adb.gsmVoice(state);
  });

  return function (_x63) {
    return _ref27.apply(this, arguments);
  };
}();

commands.powerAC = function () {
  var _ref28 = (0, _asyncToGenerator2.default)(function* (state) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("powerAC method is only available for emulators");
    }

    yield this.adb.powerAC(state);
  });

  return function (_x64) {
    return _ref28.apply(this, arguments);
  };
}();

commands.powerCapacity = function () {
  var _ref29 = (0, _asyncToGenerator2.default)(function* (batteryPercent) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("powerCapacity method is only available for emulators");
    }

    yield this.adb.powerCapacity(batteryPercent);
  });

  return function (_x65) {
    return _ref29.apply(this, arguments);
  };
}();

commands.networkSpeed = function () {
  var _ref30 = (0, _asyncToGenerator2.default)(function* (networkSpeed) {
    if (!this.isEmulator()) {
      _logger.default.errorAndThrow("networkSpeed method is only available for emulators");
    }

    yield this.adb.networkSpeed(networkSpeed);
  });

  return function (_x66) {
    return _ref30.apply(this, arguments);
  };
}();

helpers.getScreenshotDataWithAdbShell = function () {
  var _ref31 = (0, _asyncToGenerator2.default)(function* (adb, opts) {
    const localFile = _temp.default.path({
      prefix: 'appium',
      suffix: '.png'
    });

    if (yield _appiumSupport.fs.exists(localFile)) {
      yield _appiumSupport.fs.unlink(localFile);
    }

    try {
      const pngDir = opts.androidScreenshotPath || '/data/local/tmp/';

      const png = _path.default.posix.resolve(pngDir, 'screenshot.png');

      const cmd = ['/system/bin/rm', `${png};`, '/system/bin/screencap', '-p', png];
      yield adb.shell(cmd);

      if (!(yield adb.fileSize(png))) {
        throw new Error('The size of the taken screenshot equals to zero.');
      }

      yield adb.pull(png, localFile);
      return yield _jimp.default.read(localFile);
    } finally {
      if (yield _appiumSupport.fs.exists(localFile)) {
        yield _appiumSupport.fs.unlink(localFile);
      }
    }
  });

  return function (_x67, _x68) {
    return _ref31.apply(this, arguments);
  };
}();

helpers.getScreenshotDataWithAdbExecOut = function () {
  var _ref32 = (0, _asyncToGenerator2.default)(function* (adb) {
    let _ref33 = yield (0, _teen_process.exec)(adb.executable.path, adb.executable.defaultArgs.concat(['exec-out', '/system/bin/screencap', '-p']), {
      encoding: 'binary',
      isBuffer: true
    }),
        stdout = _ref33.stdout,
        stderr = _ref33.stderr,
        code = _ref33.code;

    if (code || stderr.length) {
      throw new Error(`Screenshot returned error, code: '${code}', stderr: '${stderr.toString()}'`);
    }

    if (!stdout.length) {
      throw new Error('Screenshot returned no data');
    }

    return yield _jimp.default.read(stdout);
  });

  return function (_x69) {
    return _ref32.apply(this, arguments);
  };
}();

commands.getScreenshot = (0, _asyncToGenerator2.default)(function* () {
  const apiLevel = yield this.adb.getApiLevel();
  let image = null;

  if (apiLevel > 20) {
    try {
      image = yield this.getScreenshotDataWithAdbExecOut(this.adb);
    } catch (e) {
      _logger.default.info(`Cannot get screenshot data with 'adb exec-out' because of '${e.message}'. ` + `Defaulting to 'adb shell' call`);
    }
  }

  if (!image) {
    try {
      image = yield this.getScreenshotDataWithAdbShell(this.adb, this.opts);
    } catch (e) {
      const err = `Cannot get screenshot data because of '${e.message}'. ` + `Make sure the 'LayoutParams.FLAG_SECURE' is not set for ` + `the current view`;

      _logger.default.errorAndThrow(err);
    }
  }

  if (apiLevel < 23) {
    let screenOrientation = yield this.adb.getScreenOrientation();

    try {
      image = yield image.rotate(-90 * screenOrientation);
    } catch (err) {
      _logger.default.warn(`Could not rotate screenshot due to error: ${err}`);
    }
  }

  const getBuffer = _bluebird.default.promisify(image.getBuffer, {
    context: image
  });

  const imgBuffer = yield getBuffer(_jimp.default.MIME_PNG);
  return imgBuffer.toString('base64');
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
