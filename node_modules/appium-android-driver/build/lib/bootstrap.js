"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COMMAND_TYPES = exports.AndroidBootstrap = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _uiautomator = _interopRequireDefault(require("./uiautomator"));

var _net = _interopRequireDefault(require("net"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

const log = _appiumSupport.logger.getLogger('AndroidBootstrap');

const COMMAND_TYPES = {
  ACTION: 'action',
  SHUTDOWN: 'shutdown'
};
exports.COMMAND_TYPES = COMMAND_TYPES;
const SEND_COMMAND_TIMEOUT = 1 * 60 * 1000;

class AndroidBootstrap {
  constructor(adb, systemPort = 4724, webSocket = undefined) {
    this.adb = adb;
    this.systemPort = systemPort;
    this.webSocket = webSocket;
    this.ignoreUnexpectedShutdown = false;
  }

  get onUnexpectedShutdown() {
    if (!this._onUnexpectedShutdownPromise) {
      let reject;
      this._onUnexpectedShutdownPromise = new _bluebird.default(function (_resolve, _reject) {
        reject = _reject;
      });
      this._onUnexpectedShutdownPromise.cancel = reject;
    }

    return this._onUnexpectedShutdownPromise;
  }

  start(appPackage, disableAndroidWatchers = false, acceptSslCerts = false) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        const rootDir = _path.default.resolve(__dirname, '..', '..');

        const startDetector = s => {
          return /Appium Socket Server Ready/.test(s);
        };

        const bootstrapJar = _path.default.resolve(rootDir, 'bootstrap', 'bin', 'AppiumBootstrap.jar');

        yield _this.init();
        yield _this.adb.forwardPort(_this.systemPort, 4724);
        _this.process = yield _this.uiAutomator.start(bootstrapJar, 'io.appium.android.bootstrap.Bootstrap', startDetector, '-e', 'pkg', appPackage, '-e', 'disableAndroidWatchers', disableAndroidWatchers, '-e', 'acceptSslCerts', acceptSslCerts);

        _this.process.on('output', (stdout, stderr) => {
          const alertRe = /Emitting system alert message/;

          if (alertRe.test(stdout)) {
            log.debug('Emitting alert message...');

            if (_this.webSocket) {
              _this.webSocket.sockets.emit('alert', {
                message: stdout
              });
            }
          }

          let stdoutLines = (stdout || '').split('\n');
          const uiautoLog = /\[APPIUM-UIAUTO\](.+)\[\/APPIUM-UIAUTO\]/;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = stdoutLines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              let line = _step.value;

              if (line.trim()) {
                if (uiautoLog.test(line)) {
                  let innerLine = uiautoLog.exec(line)[1].trim();
                  let logMethod = log.info.bind(log);

                  if (/\[debug\]/.test(innerLine)) {
                    logMethod = log.debug.bind(log);
                  }

                  logMethod(`[BOOTSTRAP LOG] ${innerLine}`);
                } else {
                  log.debug(`[UIAUTO STDOUT] ${line}`);
                }
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          let stderrLines = (stderr || '').split('\n');
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = stderrLines[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              let line = _step2.value;

              if (line.trim()) {
                log.debug(`[UIAUTO STDERR] ${line}`);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        });

        return yield new _bluebird.default((resolve, reject) => {
          try {
            _this.socketClient = _net.default.connect(_this.systemPort);

            _this.socketClient.on('error', err => {
              if (!_this.ignoreUnexpectedShutdown) {
                throw new Error(`Android bootstrap socket crashed: ${err}`);
              }
            });

            _this.socketClient.once('connect', () => {
              log.info("Android bootstrap socket is now connected");
              resolve();
            });
          } catch (err) {
            reject(err);
          }
        });
      } catch (err) {
        log.errorAndThrow(`Error occured while starting AndroidBootstrap. Original error: ${err}`);
      }
    })();
  }

  sendCommand(type, extra = {}) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this2.socketClient) {
        throw new Error('Socket connection closed unexpectedly');
      }

      return yield new _bluebird.default((resolve, reject) => {
        let cmd = Object.assign({
          cmd: type
        }, extra);
        let cmdJson = `${JSON.stringify(cmd)} \n`;
        log.debug(`Sending command to android: ${_lodash.default.truncate(cmdJson, {
          length: 1000
        }).trim()}`);

        _this2.socketClient.write(cmdJson);

        _this2.socketClient.setEncoding('utf8');

        let streamData = '';
        let sendCommandTimeoutHandler = null;

        _this2.socketClient.on('data', data => {
          if (sendCommandTimeoutHandler) {
            clearTimeout(sendCommandTimeoutHandler);
          }

          log.debug('Received command result from bootstrap');

          try {
            streamData = JSON.parse(streamData + data);

            _this2.socketClient.removeAllListeners('data');

            if (streamData.status === 0) {
              return resolve(streamData.value);
            }

            reject((0, _appiumBaseDriver.errorFromCode)(streamData.status, streamData.value));
          } catch (err) {
            if (!_lodash.default.isString(streamData)) {
              log.error('Got an unexpected error inside socket listener');
              log.error(err.stack);
              return reject((0, _appiumBaseDriver.errorFromCode)(13, err.message));
            }

            log.debug(`Stream still not complete, waiting up to ${SEND_COMMAND_TIMEOUT}ms for the data to arrive`);
            streamData += data;
            sendCommandTimeoutHandler = setTimeout(() => {
              const errMsg = `Server socket stopped responding. The recent response was '${streamData}'`;
              log.error(errMsg);

              _this2.socketClient.removeAllListeners('data');

              reject((0, _appiumBaseDriver.errorFromCode)(13, errMsg));
            }, SEND_COMMAND_TIMEOUT);
          }
        });
      });
    })();
  }

  sendAction(action, params = {}) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let extra = {
        action,
        params
      };
      return yield _this3.sendCommand(COMMAND_TYPES.ACTION, extra);
    })();
  }

  shutdown() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this4.uiAutomator) {
        log.warn('Cannot shut down Android bootstrap; it has already shut down');
        return;
      }

      _this4.uiAutomator.removeAllListeners(_uiautomator.default.EVENT_CHANGED);

      if (_this4.socketClient) {
        yield _this4.sendCommand(COMMAND_TYPES.SHUTDOWN);
      }

      yield _this4.uiAutomator.shutdown();
      _this4.uiAutomator = null;
    })();
  }

  init() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this5.uiAutomator = new _uiautomator.default(_this5.adb);

      _this5.uiAutomator.on(_uiautomator.default.EVENT_CHANGED, msg => {
        if (msg.state === _uiautomator.default.STATE_STOPPED) {
          _this5.uiAutomator = null;

          _this5.onUnexpectedShutdown.cancel(new Error('UiAUtomator shut down unexpectedly'));
        }
      });
    })();
  }

  set ignoreUnexpectedShutdown(ignore) {
    log.debug(`${ignore ? 'Ignoring' : 'Watching for'} bootstrap disconnect`);
    this._ignoreUnexpectedShutdown = ignore;
  }

  get ignoreUnexpectedShutdown() {
    return this._ignoreUnexpectedShutdown;
  }

}

exports.AndroidBootstrap = AndroidBootstrap;
var _default = AndroidBootstrap;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
