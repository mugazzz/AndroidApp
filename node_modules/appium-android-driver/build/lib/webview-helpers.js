"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

const NATIVE_WIN = "NATIVE_APP";
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = "WEBVIEW";
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_REGEXP = new RegExp(`@?webview_devtools_remote_(\\d+)`);
const WEBVIEW_PID_REGEXP = new RegExp(`${WEBVIEW_BASE}(\\d+)`);
const CHROMIUM_WIN = "CHROMIUM";
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const CROSSWALK_SOCKET_SUFFIX = "_devtools_remote";
const CROSSWALK_REGEXP_STRING = `(\\S*)${CROSSWALK_SOCKET_SUFFIX}`;
const CROSSWALK_REGEXP = new RegExp(`@${CROSSWALK_REGEXP_STRING}`);
const CROSSWALK_PROCESS_REGEXP = new RegExp(WEBVIEW_BASE + CROSSWALK_REGEXP_STRING);
let helpers = {};
exports.helpers = helpers;

function webviewsFromProcs(_x, _x2) {
  return _webviewsFromProcs.apply(this, arguments);
}

function _webviewsFromProcs() {
  _webviewsFromProcs = (0, _asyncToGenerator2.default)(function* (adb, deviceSocket) {
    let webviews = [];
    let out = yield adb.shell(["cat", "/proc/net/unix"]);
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = out.split("\n")[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        let line = _step3.value;
        line = line.trim();

        if (deviceSocket) {
          if (line.indexOf(`@${deviceSocket}`) === line.length - deviceSocket.length - 1) {
            if (deviceSocket === "chrome_devtools_remote") {
              webviews.push(CHROMIUM_WIN);
              continue;
            }
          }
        }

        let webviewPid;
        let crosswalkWebviewSocket;

        if (webviewPid = line.match(WEBVIEW_REGEXP)) {
          webviews.push(`${WEBVIEW_BASE}${webviewPid[1]}`);
        } else if (crosswalkWebviewSocket = line.match(CROSSWALK_REGEXP)) {
          if (deviceSocket) {
            if (crosswalkWebviewSocket[0].slice(1) === deviceSocket) {
              webviews.push(`${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}`);
            }
          } else {
            webviews.push(`${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}${CROSSWALK_SOCKET_SUFFIX}`);
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return _lodash.default.uniq(webviews);
  });
  return _webviewsFromProcs.apply(this, arguments);
}

helpers.procFromWebview = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (adb, webview) {
    if (webview.match(WEBVIEW_PID_REGEXP) === null) {
      let processName = webview.match(CROSSWALK_PROCESS_REGEXP);

      if (processName === null) {
        throw new Error(`Could not find process name for webview ${webview}`);
      }

      return processName[1];
    }

    let pid = webview.match(/\d+$/);

    if (!pid) {
      throw new Error(`Could not find PID for webview ${webview}`);
    }

    pid = pid[0];

    _logger.default.debug(`${webview} mapped to pid ${pid}`);

    _logger.default.debug("Getting process name for webview");

    let out = yield adb.shell("ps");
    let pkg = "unknown";
    let lines = out.split(/\r?\n/);
    const fullHeader = lines[0].trim();
    const header = fullHeader.split(/\s+/);
    const pidColumn = header.indexOf('PID');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;
        const entries = line.trim().split(/\s+/);
        const pidEntry = entries[pidColumn];

        if (pidEntry === pid) {
          pkg = _lodash.default.last(entries);

          _logger.default.debug(`Parsed pid: '${pidEntry}' pkg: '${pkg}' from`);

          _logger.default.debug(`    ${fullHeader}`);

          _logger.default.debug(`    ${line}`);

          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _logger.default.debug(`Returning process name: '${pkg}'`);

    return pkg;
  });

  return function (_x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

helpers.getWebviews = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (adb, deviceSocket) {
    _logger.default.debug("Getting a list of available webviews");

    let webviews = yield webviewsFromProcs(adb, deviceSocket);

    if (deviceSocket) {
      return webviews;
    }

    webviews = yield (0, _asyncbox.asyncmap)(webviews, function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* (webviewName) {
        let pkg = yield helpers.procFromWebview(adb, webviewName);
        return WEBVIEW_BASE + pkg;
      });

      return function (_x7) {
        return _ref3.apply(this, arguments);
      };
    }());

    _logger.default.debug(`Found webviews: ${JSON.stringify(webviews)}`);

    return webviews;
  });

  return function (_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

helpers.decorateChromeOptions = function (caps, opts, deviceId) {
  if (opts.chromeOptions) {
    if (opts.chromeOptions.Arguments) {
      opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
      delete opts.chromeOptions.Arguments;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.toPairs(opts.chromeOptions)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
            opt = _step2$value[0],
            val = _step2$value[1];

        if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
          caps.chromeOptions[opt] = val;
        } else {
          _logger.default.warn(`Cannot pass option ${caps.chromeOptions[opt]} because ` + "Appium needs it to make chromeDriver work");
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;
  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
