"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.FINGERPRINT_UNLOCK = exports.PATTERN_UNLOCK = exports.PASSWORD_UNLOCK = exports.PIN_UNLOCK = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

const PIN_UNLOCK = "pin";
exports.PIN_UNLOCK = PIN_UNLOCK;
const PASSWORD_UNLOCK = "password";
exports.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
const PATTERN_UNLOCK = "pattern";
exports.PATTERN_UNLOCK = PATTERN_UNLOCK;
const FINGERPRINT_UNLOCK = "fingerprint";
exports.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
const UNLOCK_TYPES = [PIN_UNLOCK, PASSWORD_UNLOCK, PATTERN_UNLOCK, FINGERPRINT_UNLOCK];
const KEYCODE_NUMPAD_ENTER = "66";
const UNLOCK_WAIT_TIME = 100;
const HIDE_KEYBOARD_WAIT_TIME = 100;
const INPUT_KEYS_WAIT_TIME = 100;
let helpers = {};
exports.helpers = helpers;

helpers.isValidUnlockType = function (type) {
  return UNLOCK_TYPES.indexOf(type) !== -1;
};

helpers.isValidKey = function (type, key) {
  if (_lodash.default.isUndefined(key)) {
    return false;
  }

  if (type === PIN_UNLOCK || type === FINGERPRINT_UNLOCK) {
    return /^[0-9]+$/.test(key.trim());
  }

  if (type === PATTERN_UNLOCK) {
    if (!/^[1-9]{2,9}$/.test(key.trim())) {
      return false;
    }

    return !/([1-9]).*?\1/.test(key.trim());
  }

  if (type === PASSWORD_UNLOCK) {
    return /.{4,}/g.test(key);
  }

  throw new Error(`Invalid unlock type ${type}`);
};

helpers.dismissKeyguard = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (driver, adb) {
    let isKeyboardShown = yield driver.isKeyboardShown();

    if (isKeyboardShown) {
      yield driver.hideKeyboard();
      yield (0, _asyncbox.sleep)(HIDE_KEYBOARD_WAIT_TIME);
    }

    _logger.default.info("Dismiss notifications from unlock view");

    yield adb.shell(["service", "call", "notification", "1"]);
    yield adb.back();

    if ((yield adb.getApiLevel()) > 21) {
      _logger.default.info("Trying to dismiss keyguard");

      yield adb.shell(["wm", "dismiss-keyguard"]);
      return;
    }

    _logger.default.info("Swiping up to dismiss keyguard");

    yield helpers.swipeUp(driver);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

helpers.swipeUp = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (driver) {
    let windowSize = yield driver.getWindowSize();
    let x0 = parseInt(windowSize.x / 2, 10);
    let y0 = windowSize.y - 10;
    let yP = 100;
    let actions = [{
      action: 'press',
      options: {
        element: null,
        x: x0,
        y: y0
      }
    }, {
      action: 'moveTo',
      options: {
        element: null,
        x: x0,
        y: yP
      }
    }, {
      action: 'release'
    }];
    yield driver.performTouch(actions);
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

helpers.encodePassword = function (key) {
  return key.replace(/\s/ig, "%s");
};

helpers.stringKeyToArr = function (key) {
  return key.trim().replace(/\s+/g, '').split(/\s*/);
};

helpers.fingerprintUnlock = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    if ((yield adb.getApiLevel()) < 23) {
      throw new Error("Fingerprint unlock only works for Android 6+ emulators");
    }

    yield adb.fingerprint(capabilities.unlockKey);
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x4, _x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

helpers.pinUnlock = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    _logger.default.info(`Trying to unlock device using pin ${capabilities.unlockKey}`);

    yield helpers.dismissKeyguard(driver, adb);
    let keys = helpers.stringKeyToArr(capabilities.unlockKey);

    if ((yield adb.getApiLevel()) >= 21) {
      let els = yield driver.findElOrEls("id", "com.android.systemui:id/digit_text", true);

      if (_lodash.default.isEmpty(els)) {
        throw new Error("Error finding unlock pin buttons!");
      }

      let pins = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = els[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let el = _step.value;
          let text = yield driver.getAttribute("text", _appiumSupport.util.unwrapElement(el));
          pins[text] = el;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let pin = _step2.value;
          let el = pins[pin];
          yield driver.click(_appiumSupport.util.unwrapElement(el));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    } else {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let pin = _step3.value;
          let el = yield driver.findElOrEls('id', `com.android.keyguard:id/key${pin}`, false);

          if (el === null) {
            throw new Error(`Error finding unlock pin '${pin}' button!`);
          }

          yield driver.click(_appiumSupport.util.unwrapElement(el));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    const el = yield driver.findElOrEls('xpath', "//*[contains(@resource-id, 'id/key_enter')]", false);
    yield driver.click(_appiumSupport.util.unwrapElement(el));
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();

helpers.passwordUnlock = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    _logger.default.info(`Trying to unlock device using password ${capabilities.unlockKey}`);

    yield helpers.dismissKeyguard(driver, adb);
    let key = capabilities.unlockKey;
    key = helpers.encodePassword(key);
    yield adb.shell(["input", "text", key]);
    yield (0, _asyncbox.sleep)(INPUT_KEYS_WAIT_TIME);
    yield adb.shell(["input", "keyevent", KEYCODE_NUMPAD_ENTER]);
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x10, _x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.getPatternKeyPosition = function (key, initPos, piece) {
  const cols = 3;
  const pins = 9;

  let xPos = (key, x, piece) => {
    return Math.round(x + (key % cols || cols) * piece - piece / 2);
  };

  let yPos = (key, y, piece) => {
    return Math.round(y + (Math.ceil((key % pins || pins) / cols) * piece - piece / 2));
  };

  return {
    x: xPos(key, initPos.x, piece),
    y: yPos(key, initPos.y, piece)
  };
};

helpers.getPatternActions = function (keys, initPos, piece) {
  let actions = [];
  let lastPos;
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      let key = _step4.value;
      let keyPos = helpers.getPatternKeyPosition(key, initPos, piece);

      if (key === keys[0]) {
        actions.push({
          action: 'press',
          options: {
            element: null,
            x: keyPos.x,
            y: keyPos.y
          }
        });
        lastPos = keyPos;
        continue;
      }

      let moveTo = {
        x: 0,
        y: 0
      };
      let diffX = keyPos.x - lastPos.x;

      if (diffX > 0) {
        moveTo.x = piece;

        if (Math.abs(diffX) > piece) {
          moveTo.x += piece;
        }
      } else if (diffX < 0) {
        moveTo.x = -1 * piece;

        if (Math.abs(diffX) > piece) {
          moveTo.x -= piece;
        }
      }

      let diffY = keyPos.y - lastPos.y;

      if (diffY > 0) {
        moveTo.y = piece;

        if (Math.abs(diffY) > piece) {
          moveTo.y += piece;
        }
      } else if (diffY < 0) {
        moveTo.y = -1 * piece;

        if (Math.abs(diffY) > piece) {
          moveTo.y -= piece;
        }
      }

      actions.push({
        action: 'moveTo',
        options: {
          element: null,
          x: moveTo.x,
          y: moveTo.y
        }
      });
      lastPos = keyPos;
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  actions.push({
    action: 'release'
  });
  return actions;
};

helpers.patternUnlock = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    _logger.default.info(`Trying to unlock device using pattern ${capabilities.unlockKey}`);

    yield helpers.dismissKeyguard(driver, adb);
    let keys = helpers.stringKeyToArr(capabilities.unlockKey);
    let apiLevel = yield adb.getApiLevel();
    let el = yield driver.findElOrEls("id", `com.android.${apiLevel >= 21 ? 'systemui' : 'keyguard'}:id/lockPatternView`, false);
    let initPos = yield driver.getLocation(_appiumSupport.util.unwrapElement(el));
    let size = yield driver.getSize(_appiumSupport.util.unwrapElement(el));
    let actions = helpers.getPatternActions(keys, initPos, size.width / 3);
    yield driver.performTouch(actions);
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x13, _x14, _x15) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.PIN_UNLOCK = PIN_UNLOCK;
helpers.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
helpers.PATTERN_UNLOCK = PATTERN_UNLOCK;
helpers.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
