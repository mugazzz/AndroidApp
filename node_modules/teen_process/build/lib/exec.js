"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exec = exec;
exports.default = void 0;

var _child_process = require("child_process");

var _shellQuote = require("shell-quote");

var _bluebird = _interopRequireDefault(require("bluebird"));

function exec(cmd, args = [], opts = {}) {
  const rep = (0, _shellQuote.quote)([cmd, ...args]);
  opts = Object.assign({
    timeout: null,
    encoding: 'utf8',
    killSignal: 'SIGTERM',
    cwd: undefined,
    env: process.env,
    ignoreOutput: false,
    stdio: "inherit",
    isBuffer: false,
    shell: undefined
  }, opts);
  return new _bluebird.default((resolve, reject) => {
    let proc = (0, _child_process.spawn)(cmd, args, {
      cwd: opts.cwd,
      env: opts.env,
      shell: opts.shell
    });
    let stdoutArr = [],
        stderrArr = [],
        timer = null;
    proc.on('error', err => {
      let msg = `Command '${rep}' errored out: ${err.stack}`;

      if (err.errno === 'ENOENT') {
        msg = `Command '${cmd}' not found. Is it installed?`;
      }

      reject(new Error(msg));
    });

    if (proc.stdin) {
      proc.stdin.on('error', err => {
        reject(new Error(`Standard input '${err.syscall}' error: ${err.stack}`));
      });
    }

    if (proc.stdout) {
      proc.stdout.on('error', err => {
        reject(new Error(`Standard output '${err.syscall}' error: ${err.stack}`));
      });
    }

    if (proc.stderr) {
      proc.stderr.on('error', err => {
        reject(new Error(`Standard error '${err.syscall}' error: ${err.stack}`));
      });
    }

    if (!opts.ignoreOutput) {
      if (proc.stdout) {
        proc.stdout.on('data', data => {
          stdoutArr.push(data);
        });
      }

      if (proc.stderr) {
        proc.stderr.on('data', data => {
          stderrArr.push(data);
        });
      }
    }

    function getStdio(isBuffer) {
      let stdout, stderr;

      if (isBuffer) {
        stdout = Buffer.concat(stdoutArr);
        stderr = Buffer.concat(stderrArr);
      } else {
        stdout = Buffer.concat(stdoutArr).toString(opts.encoding);
        stderr = Buffer.concat(stderrArr).toString(opts.encoding);
      }

      return {
        stdout,
        stderr
      };
    }

    proc.on('close', code => {
      if (timer) {
        clearTimeout(timer);
      }

      let _getStdio = getStdio(opts.isBuffer),
          stdout = _getStdio.stdout,
          stderr = _getStdio.stderr;

      if (code === 0) {
        resolve({
          stdout,
          stderr,
          code
        });
      } else {
        let err = new Error(`Command '${rep}' exited with code ${code}`);
        err = Object.assign(err, {
          stdout,
          stderr,
          code
        });
        reject(err);
      }
    });

    if (opts.timeout) {
      timer = setTimeout(() => {
        let _getStdio2 = getStdio(opts.isBuffer),
            stdout = _getStdio2.stdout,
            stderr = _getStdio2.stderr;

        let err = new Error(`Command '${rep}' timed out after ${opts.timeout}ms`);
        err = Object.assign(err, {
          stdout,
          stderr,
          code: null
        });
        reject(err);
        proc.kill(opts.killSignal);
      }, opts.timeout);
    }
  });
}

var _default = exec;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
