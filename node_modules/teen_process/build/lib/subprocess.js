"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SubProcess = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _child_process = require("child_process");

var _events = _interopRequireDefault(require("events"));

var _through = _interopRequireDefault(require("through"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _shellQuote = require("shell-quote");

var _lodash = _interopRequireDefault(require("lodash"));

const EventEmitter = _events.default.EventEmitter;

class SubProcess extends EventEmitter {
  constructor(cmd, args = [], opts = {}) {
    super();
    if (!cmd) throw new Error('Command is required');
    if (!_lodash.default.isString(cmd)) throw new Error('Command must be a string');
    if (!_lodash.default.isArray(args)) throw new Error('Args must be an array');
    this.cmd = cmd;
    this.args = args;
    this.proc = null;
    this.opts = opts;
    this.expectingExit = false;
    this.rep = (0, _shellQuote.quote)([cmd, ...args]);
  }

  get isRunning() {
    return !!this.proc;
  }

  emitLines(stream, lines) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;
        this.emit('stream-line', `[${stream.toUpperCase()}] ${line}`);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  start(startDetector = null, timeoutMs = null, detach = false) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let startDelay = 10;

      const genericStartDetector = function genericStartDetector(stdout, stderr) {
        return stdout || stderr;
      };

      if (startDetector === null) {
        startDetector = genericStartDetector;
      }

      if (_lodash.default.isNumber(startDetector)) {
        startDelay = startDetector;
        startDetector = null;
      }

      if (_lodash.default.isBoolean(startDetector) && startDetector) {
        if (!_this.opts.detached) {
          throw new Error(`Unable to detach process that is not started with 'detached' option`);
        }

        detach = true;
        startDetector = genericStartDetector;
      } else if (_lodash.default.isBoolean(timeoutMs) && timeoutMs) {
        if (!_this.opts.detached) {
          throw new Error(`Unable to detach process that is not started with 'detached' option`);
        }

        detach = true;
        timeoutMs = null;
      }

      return yield new _bluebird.default((resolve, reject) => {
        _this.proc = (0, _child_process.spawn)(_this.cmd, _this.args, _this.opts);

        if (_this.proc.stdout) {
          _this.proc.stdout.setEncoding(_this.opts.encoding || 'utf8');
        }

        if (_this.proc.stderr) {
          _this.proc.stderr.setEncoding(_this.opts.encoding || 'utf8');
        }

        _this.lastLinePortion = {
          stdout: '',
          stderr: ''
        };

        const handleOutput = data => {
          try {
            if (startDetector && startDetector(data.stdout, data.stderr)) {
              startDetector = null;
              resolve();
            }
          } catch (e) {
            reject(e);
          }

          _this.emit('output', data.stdout, data.stderr);

          var _arr = ['stdout', 'stderr'];

          for (var _i = 0; _i < _arr.length; _i++) {
            const stream = _arr[_i];
            if (!data[stream]) continue;
            let lines = data[stream].split("\n");

            if (lines.length > 1) {
              let retLines = lines.slice(0, -1);
              retLines[0] = _this.lastLinePortion[stream] + retLines[0];
              _this.lastLinePortion[stream] = lines[lines.length - 1];

              _this.emit(`lines-${stream}`, retLines);

              _this.emitLines(stream, retLines);
            } else {
              _this.lastLinePortion[stream] += lines[0];
            }
          }
        };

        _this.proc.on('error', err => {
          _this.proc.removeAllListeners('exit');

          _this.proc.kill('SIGINT');

          if (err.errno === 'ENOENT') {
            err = new Error(`Command '${_this.cmd}' not found. Is it installed?`);
          }

          reject(err);
        });

        if (_this.proc.stdout) {
          _this.proc.stdout.pipe((0, _through.default)(stdout => {
            handleOutput({
              stdout,
              stderr: ''
            });
          }));
        }

        if (_this.proc.stderr) {
          _this.proc.stderr.pipe((0, _through.default)(stderr => {
            handleOutput({
              stdout: '',
              stderr
            });
          }));
        }

        _this.proc.on('exit', (code, signal) => {
          _this.handleLastLines();

          _this.emit('exit', code, signal);

          let event = _this.expectingExit ? 'stop' : 'die';

          if (!_this.expectingExit && code === 0) {
            event = 'end';
          }

          _this.emit(event, code, signal);

          _this.proc = null;
          _this.expectingExit = false;
        });

        if (!startDetector) {
          setTimeout(() => {
            resolve();
          }, startDelay);
        }

        if (_lodash.default.isNumber(timeoutMs)) {
          setTimeout(() => {
            reject(new Error(`The process did not start within ${timeoutMs}ms ` + `(cmd: '${_this.rep}')`));
          }, timeoutMs);
        }
      }).finally(() => {
        if (detach && _this.proc) {
          _this.proc.unref();
        }
      });
    })();
  }

  handleLastLines() {
    var _arr2 = ['stdout', 'stderr'];

    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
      let stream = _arr2[_i2];

      if (this.lastLinePortion[stream]) {
        const lastLines = [this.lastLinePortion[stream]];
        this.emit(`lines-${stream}`, lastLines);
        this.emitLines(stream, lastLines);
        this.lastLinePortion[stream] = '';
      }
    }
  }

  stop(signal = 'SIGTERM', timeout = 10000) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this2.isRunning) {
        throw new Error(`Can't stop process; it's not currently running (cmd: '${_this2.rep}')`);
      }

      _this2.handleLastLines();

      return yield new _bluebird.default((resolve, reject) => {
        _this2.proc.on('close', resolve);

        _this2.expectingExit = true;

        _this2.proc.kill(signal);

        setTimeout(() => {
          reject(new Error(`Process didn't end after ${timeout}ms (cmd: '${_this2.rep}')`));
        }, timeout);
      });
    })();
  }

  join(allowedExitCodes = [0]) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this3.isRunning) {
        throw new Error(`Cannot join process; it is not currently running (cmd: '${_this3.rep}')`);
      }

      return yield new _bluebird.default((resolve, reject) => {
        _this3.proc.on('exit', code => {
          if (allowedExitCodes.indexOf(code) === -1) {
            reject(new Error(`Process ended with exitcode ${code} (cmd: '${_this3.rep}')`));
          } else {
            resolve(code);
          }
        });
      });
    })();
  }

  detachProcess() {
    if (!this.opts.detached) {
      throw new Error(`Unable to detach process that is not started with 'detached' option`);
    }

    if (this.proc) {
      this.proc.unref();
    }
  }

  get pid() {
    return this.proc ? this.proc.pid : null;
  }

}

exports.SubProcess = SubProcess;
var _default = SubProcess;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zdWJwcm9jZXNzLmpzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImV2ZW50cyIsIlN1YlByb2Nlc3MiLCJjb25zdHJ1Y3RvciIsImNtZCIsImFyZ3MiLCJvcHRzIiwiRXJyb3IiLCJfIiwiaXNTdHJpbmciLCJpc0FycmF5IiwicHJvYyIsImV4cGVjdGluZ0V4aXQiLCJyZXAiLCJpc1J1bm5pbmciLCJlbWl0TGluZXMiLCJzdHJlYW0iLCJsaW5lcyIsImxpbmUiLCJlbWl0IiwidG9VcHBlckNhc2UiLCJzdGFydCIsInN0YXJ0RGV0ZWN0b3IiLCJ0aW1lb3V0TXMiLCJkZXRhY2giLCJzdGFydERlbGF5IiwiZ2VuZXJpY1N0YXJ0RGV0ZWN0b3IiLCJzdGRvdXQiLCJzdGRlcnIiLCJpc051bWJlciIsImlzQm9vbGVhbiIsImRldGFjaGVkIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJzZXRFbmNvZGluZyIsImVuY29kaW5nIiwibGFzdExpbmVQb3J0aW9uIiwiaGFuZGxlT3V0cHV0IiwiZGF0YSIsImUiLCJzcGxpdCIsImxlbmd0aCIsInJldExpbmVzIiwic2xpY2UiLCJvbiIsImVyciIsInJlbW92ZUFsbExpc3RlbmVycyIsImtpbGwiLCJlcnJubyIsInBpcGUiLCJjb2RlIiwic2lnbmFsIiwiaGFuZGxlTGFzdExpbmVzIiwiZXZlbnQiLCJzZXRUaW1lb3V0IiwiZmluYWxseSIsInVucmVmIiwibGFzdExpbmVzIiwic3RvcCIsInRpbWVvdXQiLCJqb2luIiwiYWxsb3dlZEV4aXRDb2RlcyIsImluZGV4T2YiLCJkZXRhY2hQcm9jZXNzIiwicGlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztNQUhRQSxZLEdBQWlCQyxlLENBQWpCRCxZOztBQU1SLE1BQU1FLFVBQU4sU0FBeUJGLFlBQXpCLENBQXNDO0FBQ3BDRyxFQUFBQSxXQUFXLENBQUVDLEdBQUYsRUFBT0MsSUFBSSxHQUFHLEVB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LE9BQWpCLENBQXlCWixJQUF6QixNQUFtQyxDQUFDLENBQXhDLEVBQTJDO0FBQ3pDakIsWUFBQUEsTUFBTSxDQUFDLElBQUkzQixLQUFKLENBQVcsK0JBQThCNEMsSUFBSyxXQUFVLE1BQUksQ0FBQ3RDLEdBQUksSUFBakUsQ0FBRCxDQUFOO0FBQ0QsV0FGRCxNQUVPO0FBQ0xvQixZQUFBQSxPQUFPLENBQUNrQixJQUFELENBQVA7QUFDRDtBQUNGLFNBTkQ7QUFPRCxPQVJZLENBQWI7QUFMa0M7QUFjbkM7O0FBS0RhLEVBQUFBLGFBQWEsR0FBSTtBQUNmLFFBQUksQ0FBQyxLQUFLMUQsSUFBTCxDQUFVeUIsUUFBZixFQUF5QjtBQUV2QixZQUFNLElBQUl4QixLQUFKLENBQVcscUVBQVgsQ0FBTjtBQUNEOztBQUNELFFBQUksS0FBS0ksSUFBVCxFQUFlO0FBQ2IsV0FBS0EsSUFBTCxDQUFVOEMsS0FBVjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSVEsR0FBSixHQUFXO0FBQ1QsV0FBTyxLQUFLdEQsSUFBTCxHQUFZLEtBQUtBLElBQUwsQ0FBVXNELEdBQXRCLEdBQTRCLElBQW5DO0FBQ0Q7O0FBaFBtQzs7O2VBb1B2Qi9ELFUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3MgKi9cblxuaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBldmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB0aHJvdWdoIGZyb20gJ3Rocm91Z2gnO1xuY29uc3QgeyBFdmVudEVtaXR0ZXIgfSA9IGV2ZW50cztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHF1b3RlIH0gZnJvbSAnc2hlbGwtcXVvdGUnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jbGFzcyBTdWJQcm9jZXNzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKGNtZCwgYXJncyA9IFtdLCBvcHRzID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICghY21kKSB0aHJvdyBuZXcgRXJyb3IoJ0NvbW1hbmQgaXMgcmVxdWlyZWQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuICAgIGlmICghXy5pc1N0cmluZyhjbWQpKSB0aHJvdyBuZXcgRXJyb3IoJ0NvbW1hbmQgbXVzdCBiZSBhIHN0cmluZycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgaWYgKCFfLmlzQXJyYXkoYXJncykpIHRocm93IG5ldyBFcnJvcignQXJncyBtdXN0IGJlIGFuIGFycmF5Jyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcblxuICAgIHRoaXMuY21kID0gY21kO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMuZXhwZWN0aW5nRXhpdCA9IGZhbHNlO1xuXG4gICAgLy8gZ2V0IGEgcXVvdGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb21tYW5kIGZvciBlcnJvciBzdHJpbmdzXG4gICAgdGhpcy5yZXAgPSBxdW90ZShbY21kLCAuLi5hcmdzXSk7XG4gIH1cblxuICBnZXQgaXNSdW5uaW5nICgpIHtcbiAgICAvLyBwcmVzZW5jZSBvZiBgcHJvY2AgbWVhbnMgd2UgaGF2ZSBjb25uZWN0ZWQgYW5kIHN0YXJ0ZWRcbiAgICByZXR1cm4gISF0aGlzLnByb2M7XG4gIH1cblxuICBlbWl0TGluZXMgKHN0cmVhbSwgbGluZXMpIHtcbiAgICBmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICB0aGlzLmVtaXQoJ3N0cmVhbS1saW5lJywgYFske3N0cmVhbS50b1VwcGVyQ2FzZSgpfV0gJHtsaW5lfWApO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNwYXduIHRoZSBzdWJwcm9jZXNzIGFuZCByZXR1cm4gY29udHJvbCB3aGVuZXZlciB3ZSBkZWVtIHRoYXQgaXQgaGFzIGZ1bGx5XG4gIC8vIFwic3RhcnRlZFwiXG4gIGFzeW5jIHN0YXJ0IChzdGFydERldGVjdG9yID0gbnVsbCwgdGltZW91dE1zID0gbnVsbCwgZGV0YWNoID0gZmFsc2UpIHtcbiAgICBsZXQgc3RhcnREZWxheSA9IDEwO1xuXG4gICAgY29uc3QgZ2VuZXJpY1N0YXJ0RGV0ZWN0b3IgPSBmdW5jdGlvbiBnZW5lcmljU3RhcnREZXRlY3RvciAoc3Rkb3V0LCBzdGRlcnIpIHtcbiAgICAgIHJldHVybiBzdGRvdXQgfHwgc3RkZXJyO1xuICAgIH07XG5cbiAgICAvLyB0aGUgZGVmYXVsdCBzdGFydCBkZXRlY3RvciBzaW1wbHkgcmV0dXJucyB0cnVlIHdoZW4gd2UgZ2V0IGFueSBvdXRwdXRcbiAgICBpZiAoc3RhcnREZXRlY3RvciA9PT0gbnVsbCkge1xuICAgICAgc3RhcnREZXRlY3RvciA9IGdlbmVyaWNTdGFydERldGVjdG9yO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSB1c2VyIHBhc3NlcyBhIG51bWJlciwgdGhlbiB3ZSBzaW1wbHkgZGVsYXkgYSBjZXJ0YWluIGFtb3VudCBvZlxuICAgIC8vIHRpbWUgYmVmb3JlIHJldHVybmluZyBjb250cm9sLCByYXRoZXIgdGhhbiB3YWl0aW5nIGZvciBhIGNvbmRpdGlvblxuICAgIGlmIChfLmlzTnVtYmVyKHN0YXJ0RGV0ZWN0b3IpKSB7XG4gICAgICBzdGFydERlbGF5ID0gc3RhcnREZXRlY3RvcjtcbiAgICAgIHN0YXJ0RGV0ZWN0b3IgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGJvb2xlYW4gYXMgb25lIG9mIHRoZSBhcmd1bWVudHMsIHVzZSBpdCBmb3IgYGRldGFjaGBcbiAgICBpZiAoXy5pc0Jvb2xlYW4oc3RhcnREZXRlY3RvcikgJiYgc3RhcnREZXRlY3Rvcikge1xuICAgICAgaWYgKCF0aGlzLm9wdHMuZGV0YWNoZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZGV0YWNoIHByb2Nlc3MgdGhhdCBpcyBub3Qgc3RhcnRlZCB3aXRoICdkZXRhY2hlZCcgb3B0aW9uYCk7XG4gICAgICB9XG4gICAgICBkZXRhY2ggPSB0cnVlO1xuICAgICAgc3RhcnREZXRlY3RvciA9IGdlbmVyaWNTdGFydERldGVjdG9yO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Jvb2xlYW4odGltZW91dE1zKSAmJiB0aW1lb3V0TXMpIHtcbiAgICAgIGlmICghdGhpcy5vcHRzLmRldGFjaGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGRldGFjaCBwcm9jZXNzIHRoYXQgaXMgbm90IHN0YXJ0ZWQgd2l0aCAnZGV0YWNoZWQnIG9wdGlvbmApO1xuICAgICAgfVxuICAgICAgZGV0YWNoID0gdHJ1ZTtcbiAgICAgIHRpbWVvdXRNcyA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gcmV0dXJuIGEgcHJvbWlzZSBzbyB3ZSBjYW4gd3JhcCB0aGUgYXN5bmMgYmVoYXZpb3JcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gYWN0dWFsbHkgc3Bhd24gdGhlIHN1YnByb2NcbiAgICAgIHRoaXMucHJvYyA9IHNwYXduKHRoaXMuY21kLCB0aGlzLmFyZ3MsIHRoaXMub3B0cyk7XG5cbiAgICAgIGlmICh0aGlzLnByb2Muc3Rkb3V0KSB7XG4gICAgICAgIHRoaXMucHJvYy5zdGRvdXQuc2V0RW5jb2RpbmcodGhpcy5vcHRzLmVuY29kaW5nIHx8ICd1dGY4Jyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9jLnN0ZGVycikge1xuICAgICAgICB0aGlzLnByb2Muc3RkZXJyLnNldEVuY29kaW5nKHRoaXMub3B0cy5lbmNvZGluZyB8fCAndXRmOCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5sYXN0TGluZVBvcnRpb24gPSB7c3Rkb3V0OiAnJywgc3RkZXJyOiAnJ307XG5cbiAgICAgIC8vIHRoaXMgZnVuY3Rpb24gaGFuZGxlcyBvdXRwdXQgdGhhdCB3ZSBjb2xsZWN0IGZyb20gdGhlIHN1YnByb2NcbiAgICAgIGNvbnN0IGhhbmRsZU91dHB1dCA9IChkYXRhKSA9PiB7XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBzdGFydERldGVjdG9yLCBydW4gaXQgb24gdGhlIG91dHB1dCBzbyB3ZSBjYW4gcmVzb2x2ZS9cbiAgICAgICAgLy8gcmVqZWN0IGFuZCBtb3ZlIG9uIGZyb20gc3RhcnRcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc3RhcnREZXRlY3RvciAmJiBzdGFydERldGVjdG9yKGRhdGEuc3Rkb3V0LCBkYXRhLnN0ZGVycikpIHtcbiAgICAgICAgICAgIHN0YXJ0RGV0ZWN0b3IgPSBudWxsO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVtaXQgdGhlIGFjdHVhbCBvdXRwdXQgZm9yIHdob21ldmVyJ3MgbGlzdGVuaW5nXG4gICAgICAgIHRoaXMuZW1pdCgnb3V0cHV0JywgZGF0YS5zdGRvdXQsIGRhdGEuc3RkZXJyKTtcblxuICAgICAgICAvLyB3ZSBhbHNvIHdhbnQgdG8gZW1pdCBsaW5lcywgYnV0IGl0J3MgbW9yZSBjb21wbGV4IHNpbmNlIG91dHB1dFxuICAgICAgICAvLyBjb21lcyBpbiBjaHVua3MgYW5kIGEgbGluZSBjb3VsZCBjb21lIGluIHR3byBkaWZmZXJlbnQgY2h1bmtzLCBzb1xuICAgICAgICAvLyB3ZSBoYXZlIGxvZ2ljIHRvIGhhbmRsZSB0aGF0IGNhc2UgKHVzaW5nIHRoaXMubGFzdExpbmVQb3J0aW9uIHRvXG4gICAgICAgIC8vIHJlbWVtYmVyIGEgbGluZSB0aGF0IHN0YXJ0ZWQgYnV0IGRpZCBub3QgZmluaXNoIGluIHRoZSBsYXN0IGNodW5rKVxuICAgICAgICBmb3IgKGNvbnN0IHN0cmVhbSBvZiBbJ3N0ZG91dCcsICdzdGRlcnInXSkge1xuICAgICAgICAgIGlmICghZGF0YVtzdHJlYW1dKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuICAgICAgICAgIGxldCBsaW5lcyA9IGRhdGFbc3RyZWFtXS5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGV0IHJldExpbmVzID0gbGluZXMuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgcmV0TGluZXNbMF0gPSB0aGlzLmxhc3RMaW5lUG9ydGlvbltzdHJlYW1dICsgcmV0TGluZXNbMF07XG4gICAgICAgICAgICB0aGlzLmxhc3RMaW5lUG9ydGlvbltzdHJlYW1dID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB0aGlzLmVtaXQoYGxpbmVzLSR7c3RyZWFtfWAsIHJldExpbmVzKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdExpbmVzKHN0cmVhbSwgcmV0TGluZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RMaW5lUG9ydGlvbltzdHJlYW1dICs9IGxpbmVzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gaWYgd2UgZ2V0IGFuIGVycm9yIHNwYXduaW5nIHRoZSBwcm9jLCByZWplY3QgYW5kIGNsZWFuIHVwIHRoZSBwcm9jXG4gICAgICB0aGlzLnByb2Mub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgdGhpcy5wcm9jLnJlbW92ZUFsbExpc3RlbmVycygnZXhpdCcpO1xuICAgICAgICB0aGlzLnByb2Mua2lsbCgnU0lHSU5UJyk7XG5cbiAgICAgICAgaWYgKGVyci5lcnJubyA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICBlcnIgPSBuZXcgRXJyb3IoYENvbW1hbmQgJyR7dGhpcy5jbWR9JyBub3QgZm91bmQuIElzIGl0IGluc3RhbGxlZD9gKTtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5wcm9jLnN0ZG91dCkge1xuICAgICAgICB0aGlzLnByb2Muc3Rkb3V0LnBpcGUodGhyb3VnaChzdGRvdXQgPT4ge1xuICAgICAgICAgIGhhbmRsZU91dHB1dCh7c3Rkb3V0LCBzdGRlcnI6ICcnfSk7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvYy5zdGRlcnIpIHtcbiAgICAgICAgdGhpcy5wcm9jLnN0ZGVyci5waXBlKHRocm91Z2goc3RkZXJyID0+IHtcbiAgICAgICAgICBoYW5kbGVPdXRwdXQoe3N0ZG91dDogJycsIHN0ZGVycn0pO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdoZW4gdGhlIHByb2MgZXhpdHMsIHdlIG1pZ2h0IHN0aWxsIGhhdmUgYSBidWZmZXIgb2YgbGluZXMgd2Ugd2VyZVxuICAgICAgLy8gd2FpdGluZyBvbiBtb3JlIGNodW5rcyB0byBjb21wbGV0ZS4gR28gYWhlYWQgYW5kIGVtaXQgdGhvc2UsIHRoZW5cbiAgICAgIC8vIHJlLWVtaXQgdGhlIGV4aXQgc28gYSBsaXN0ZW5lciBjYW4gaGFuZGxlIHRoZSBwb3NzaWJseS11bmV4cGVjdGVkIGV4aXRcbiAgICAgIHRoaXMucHJvYy5vbignZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVMYXN0TGluZXMoKTtcblxuICAgICAgICB0aGlzLmVtaXQoJ2V4aXQnLCBjb2RlLCBzaWduYWwpO1xuXG4gICAgICAgIC8vIGluIGFkZGl0aW9uIHRvIHRoZSBiYXJlIGV4aXQgZXZlbnQsIGFsc28gZW1pdCBvbmUgb2YgdGhyZWUgb3RoZXJcbiAgICAgICAgLy8gZXZlbnRzIHRoYXQgY29udGFpbiBtb3JlIGhlbHBmdWwgaW5mb3JtYXRpb246XG4gICAgICAgIC8vICdzdG9wJzogd2Ugc3RvcHBlZCB0aGlzXG4gICAgICAgIC8vICdkaWUnOiB0aGUgcHJvY2VzcyBlbmRlZCBvdXQgb2Ygb3VyIGNvbnRyb2wgd2l0aCBhIG5vbi16ZXJvIGV4aXRcbiAgICAgICAgLy8gJ2VuZCc6IHRoZSBwcm9jZXNzIGVuZGVkIG91dCBvZiBvdXIgY29udHJvbCB3aXRoIGEgemVybyBleGl0XG4gICAgICAgIGxldCBldmVudCA9IHRoaXMuZXhwZWN0aW5nRXhpdCA/ICdzdG9wJyA6ICdkaWUnO1xuICAgICAgICBpZiAoIXRoaXMuZXhwZWN0aW5nRXhpdCAmJiBjb2RlID09PSAwKSB7XG4gICAgICAgICAgZXZlbnQgPSAnZW5kJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoZXZlbnQsIGNvZGUsIHNpZ25hbCk7XG5cbiAgICAgICAgLy8gZmluYWxseSBjbGVhbiB1cCB0aGUgcHJvYyBhbmQgbWFrZSBzdXJlIHRvIHJlc2V0IG91ciBleGl0XG4gICAgICAgIC8vIGV4cGVjdGF0aW9uc1xuICAgICAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgICAgICB0aGlzLmV4cGVjdGluZ0V4aXQgPSBmYWxzZTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBpZiB0aGUgdXNlciBoYXNuJ3QgZ2l2ZW4gdXMgYSBzdGFydERldGVjdG9yLCBpbnN0ZWFkIGp1c3QgcmVzb2x2ZVxuICAgICAgLy8gd2hlbiBzdGFydERlbGF5IG1zIGhhdmUgcGFzc2VkXG4gICAgICBpZiAoIXN0YXJ0RGV0ZWN0b3IpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHJlc29sdmUoKTsgfSwgc3RhcnREZWxheSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHRoZSB1c2VyIGhhcyBnaXZlbiB1cyBhIHRpbWVvdXQsIHN0YXJ0IHRoZSBjbG9jayBmb3IgcmVqZWN0aW5nXG4gICAgICAvLyB0aGUgcHJvbWlzZSBpZiB3ZSB0YWtlIHRvbyBsb25nIHRvIHN0YXJ0XG4gICAgICBpZiAoXy5pc051bWJlcih0aW1lb3V0TXMpKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFRoZSBwcm9jZXNzIGRpZCBub3Qgc3RhcnQgd2l0aGluICR7dGltZW91dE1zfW1zIGAgK1xuICAgICAgICAgICAgYChjbWQ6ICcke3RoaXMucmVwfScpYCkpO1xuICAgICAgICB9LCB0aW1lb3V0TXMpO1xuICAgICAgfVxuICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgaWYgKGRldGFjaCAmJiB0aGlzLnByb2MpIHtcbiAgICAgICAgdGhpcy5wcm9jLnVucmVmKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVMYXN0TGluZXMgKCkge1xuICAgIGZvciAobGV0IHN0cmVhbSBvZiBbJ3N0ZG91dCcsICdzdGRlcnInXSkge1xuICAgICAgaWYgKHRoaXMubGFzdExpbmVQb3J0aW9uW3N0cmVhbV0pIHtcbiAgICAgICAgY29uc3QgbGFzdExpbmVzID0gW3RoaXMubGFzdExpbmVQb3J0aW9uW3N0cmVhbV1dO1xuICAgICAgICB0aGlzLmVtaXQoYGxpbmVzLSR7c3RyZWFtfWAsIGxhc3RMaW5lcyk7XG4gICAgICAgIHRoaXMuZW1pdExpbmVzKHN0cmVhbSwgbGFzdExpbmVzKTtcbiAgICAgICAgdGhpcy5sYXN0TGluZVBvcnRpb25bc3RyZWFtXSA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN0b3AgKHNpZ25hbCA9ICdTSUdURVJNJywgdGltZW91dCA9IDEwMDAwKSB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBzdG9wIHByb2Nlc3M7IGl0J3Mgbm90IGN1cnJlbnRseSBydW5uaW5nIChjbWQ6ICcke3RoaXMucmVwfScpYCk7XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB0byBlbWl0IGFueSBkYXRhIGluIG91ciBsaW5lcyBidWZmZXIgd2hlbmV2ZXIgd2UncmUgZG9uZSB3aXRoXG4gICAgLy8gdGhlIHByb2NcbiAgICB0aGlzLmhhbmRsZUxhc3RMaW5lcygpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnByb2Mub24oJ2Nsb3NlJywgcmVzb2x2ZSk7XG4gICAgICB0aGlzLmV4cGVjdGluZ0V4aXQgPSB0cnVlO1xuICAgICAgdGhpcy5wcm9jLmtpbGwoc2lnbmFsKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBQcm9jZXNzIGRpZG4ndCBlbmQgYWZ0ZXIgJHt0aW1lb3V0fW1zIChjbWQ6ICcke3RoaXMucmVwfScpYCkpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBqb2luIChhbGxvd2VkRXhpdENvZGVzID0gWzBdKSB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgam9pbiBwcm9jZXNzOyBpdCBpcyBub3QgY3VycmVudGx5IHJ1bm5pbmcgKGNtZDogJyR7dGhpcy5yZXB9JylgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5wcm9jLm9uKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgICAgaWYgKGFsbG93ZWRFeGl0Q29kZXMuaW5kZXhPZihjb2RlKSA9PT0gLTEpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBQcm9jZXNzIGVuZGVkIHdpdGggZXhpdGNvZGUgJHtjb2RlfSAoY21kOiAnJHt0aGlzLnJlcH0nKWApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKGNvZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qXG4gICAqIFRoaXMgd2lsbCBvbmx5IHdvcmsgaWYgdGhlIHByb2Nlc3MgaXMgY3JlYXRlZCB3aXRoIHRoZSBgZGV0YWNoZWRgIG9wdGlvblxuICAgKi9cbiAgZGV0YWNoUHJvY2VzcyAoKSB7XG4gICAgaWYgKCF0aGlzLm9wdHMuZGV0YWNoZWQpIHtcbiAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCB0aGVyZSBpcyBhIG1pc2NvbmZpZ3VyYXRpb24gaW4gdGhlIGNhbGxpbmcgY29kZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZGV0YWNoIHByb2Nlc3MgdGhhdCBpcyBub3Qgc3RhcnRlZCB3aXRoICdkZXRhY2hlZCcgb3B0aW9uYCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb2MpIHtcbiAgICAgIHRoaXMucHJvYy51bnJlZigpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBwaWQgKCkge1xuICAgIHJldHVybiB0aGlzLnByb2MgPyB0aGlzLnByb2MucGlkIDogbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBTdWJQcm9jZXNzIH07XG5leHBvcnQgZGVmYXVsdCBTdWJQcm9jZXNzO1xuIl0sImZpbGUiOiJsaWIvc3VicHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
