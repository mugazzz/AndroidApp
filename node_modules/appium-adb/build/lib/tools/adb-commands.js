"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers.js");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _net = _interopRequireDefault(require("net"));

var _logcat = _interopRequireDefault(require("../logcat"));

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _shellQuote = require("shell-quote");

const SETTINGS_HELPER_ID = 'io.appium.settings';
const WIFI_CONNECTION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.WiFiConnectionSettingReceiver`;
const WIFI_CONNECTION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.wifi`;
const DATA_CONNECTION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.DataConnectionSettingReceiver`;
const DATA_CONNECTION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.data_connection`;
const ANIMATION_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.AnimationSettingReceiver`;
const ANIMATION_SETTING_ACTION = `${SETTINGS_HELPER_ID}.animation`;
const LOCALE_SETTING_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.LocaleSettingReceiver`;
const LOCALE_SETTING_ACTION = `${SETTINGS_HELPER_ID}.locale`;
const LOCATION_SERVICE = `${SETTINGS_HELPER_ID}/.LocationService`;
const LOCATION_RECEIVER = `${SETTINGS_HELPER_ID}/.receivers.LocationInfoReceiver`;
const LOCATION_RETRIEVAL_ACTION = `${SETTINGS_HELPER_ID}.location`;
const APPIUM_IME = `${SETTINGS_HELPER_ID}/.AppiumIME`;
const MAX_SHELL_BUFFER_LENGTH = 1000;
const NOT_CHANGEABLE_PERM_ERROR = 'not a changeable permission type';
let methods = {};
methods.getAdbWithCorrectAdbPath = (0, _asyncToGenerator2.default)(function* () {
  this.executable.path = yield this.getSdkBinaryPath("adb");
  this.binaries.adb = this.executable.path;
  return this.adb;
});
methods.initAapt = (0, _asyncToGenerator2.default)(function* () {
  this.binaries.aapt = yield this.getSdkBinaryPath("aapt");
});
methods.initZipAlign = (0, _asyncToGenerator2.default)(function* () {
  this.binaries.zipalign = yield this.getSdkBinaryPath("zipalign");
});
methods.initBundletool = (0, _asyncToGenerator2.default)(function* () {
  try {
    this.binaries.bundletool = yield _appiumSupport.fs.which('bundletool.jar');
  } catch (err) {
    throw new Error('bundletool.jar binary is expected to be present in PATH. ' + 'Visit https://github.com/google/bundletool for more details.');
  }
});
methods.getApiLevel = (0, _asyncToGenerator2.default)(function* () {
  if (!_lodash.default.isInteger(this._apiLevel)) {
    try {
      const strOutput = yield this.getDeviceProperty('ro.build.version.sdk');
      this._apiLevel = parseInt(strOutput.trim(), 10);

      if (isNaN(this._apiLevel)) {
        throw new Error(`The actual output "${strOutput}" cannot be converted to an integer`);
      }
    } catch (e) {
      throw new Error(`Error getting device API level. Original error: ${e.message}`);
    }
  }

  _logger.default.debug(`Device API level: ${this._apiLevel}`);

  return this._apiLevel;
});
methods.getPlatformVersion = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.info("Getting device platform version");

  try {
    return yield this.getDeviceProperty('ro.build.version.release');
  } catch (e) {
    throw new Error(`Error getting device platform version. Original error: ${e.message}`);
  }
});
methods.isDeviceConnected = (0, _asyncToGenerator2.default)(function* () {
  let devices = yield this.getConnectedDevices();
  return devices.length > 0;
});

methods.mkdir = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    return yield this.shell(['mkdir', '-p', remotePath]);
  });

  return function (_x) {
    return _ref8.apply(this, arguments);
  };
}();

methods.isValidClass = function (classString) {
  return new RegExp(/^[a-zA-Z0-9./_]+$/).exec(classString);
};

methods.forceStop = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (pkg) {
    return yield this.shell(['am', 'force-stop', pkg]);
  });

  return function (_x2) {
    return _ref9.apply(this, arguments);
  };
}();

methods.killPackage = function () {
  var _killPackage = (0, _asyncToGenerator2.default)(function* (pkg) {
    return yield this.shell(['am', 'kill', pkg]);
  });

  return function killPackage(_x3) {
    return _killPackage.apply(this, arguments);
  };
}();

methods.clear = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (pkg) {
    return yield this.shell(['pm', 'clear', pkg]);
  });

  return function (_x4) {
    return _ref10.apply(this, arguments);
  };
}();

methods.grantAllPermissions = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (pkg, apk) {
    const apiLevel = yield this.getApiLevel();
    let targetSdk = 0;
    let dumpsysOutput = null;

    try {
      if (!apk) {
        dumpsysOutput = yield this.shell(['dumpsys', 'package', pkg]);
        targetSdk = yield this.targetSdkVersionUsingPKG(pkg, dumpsysOutput);
      } else {
        targetSdk = yield this.targetSdkVersionFromManifest(apk);
      }
    } catch (e) {
      _logger.default.warn(`Ran into problem getting target SDK version; ignoring...`);
    }

    if (apiLevel >= 23 && targetSdk >= 23) {
      dumpsysOutput = dumpsysOutput || (yield this.shell(['dumpsys', 'package', pkg]));
      const requestedPermissions = yield this.getReqPermissions(pkg, dumpsysOutput);
      const grantedPermissions = yield this.getGrantedPermissions(pkg, dumpsysOutput);

      const permissionsToGrant = _lodash.default.difference(requestedPermissions, grantedPermissions);

      if (_lodash.default.isEmpty(permissionsToGrant)) {
        _logger.default.info(`${pkg} contains no permissions available for granting`);
      } else {
        yield this.grantPermissions(pkg, permissionsToGrant);
      }
    }
  });

  return function (_x5, _x6) {
    return _ref11.apply(this, arguments);
  };
}();

methods.grantPermissions = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (pkg, permissions) {
    _logger.default.debug(`Granting permissions ${JSON.stringify(permissions)} to '${pkg}'`);

    const commands = [];
    let cmdChunk = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = permissions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const permission = _step.value;
        const nextCmd = ['pm', 'grant', pkg, permission, ';'];

        if (nextCmd.join(' ').length + cmdChunk.join(' ').length >= MAX_SHELL_BUFFER_LENGTH) {
          commands.push(cmdChunk);
          cmdChunk = [];
        }

        cmdChunk = [...cmdChunk, ...nextCmd];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!_lodash.default.isEmpty(cmdChunk)) {
      commands.push(cmdChunk);
    }

    _logger.default.debug(`Got the following command chunks to execute: ${JSON.stringify(commands)}`);

    let lastError = null;

    for (var _i = 0; _i < commands.length; _i++) {
      const cmd = commands[_i];

      try {
        yield this.shell(cmd);
      } catch (e) {
        if (!e.message.includes(NOT_CHANGEABLE_PERM_ERROR)) {
          lastError = e;
        }
      }
    }

    if (lastError) {
      throw lastError;
    }
  });

  return function (_x7, _x8) {
    return _ref12.apply(this, arguments);
  };
}();

methods.grantPermission = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (pkg, permission) {
    try {
      yield this.shell(['pm', 'grant', pkg, permission]);
    } catch (error) {
      if (!error.message.includes(NOT_CHANGEABLE_PERM_ERROR)) {
        throw error;
      }
    }
  });

  return function (_x9, _x10) {
    return _ref13.apply(this, arguments);
  };
}();

methods.revokePermission = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (pkg, permission) {
    try {
      yield this.shell(['pm', 'revoke', pkg, permission]);
    } catch (error) {
      if (!error.message.includes(NOT_CHANGEABLE_PERM_ERROR)) {
        throw error;
      }
    }
  });

  return function (_x11, _x12) {
    return _ref14.apply(this, arguments);
  };
}();

methods.getGrantedPermissions = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    _logger.default.debug('Retrieving granted permissions');

    const stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    return (0, _helpers.extractMatchingPermissions)(stdout, ['install', 'runtime'], true);
  });

  return function (_x13) {
    return _ref15.apply(this, arguments);
  };
}();

methods.getDeniedPermissions = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    _logger.default.debug('Retrieving denied permissions');

    const stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    return (0, _helpers.extractMatchingPermissions)(stdout, ['install', 'runtime'], false);
  });

  return function (_x14) {
    return _ref16.apply(this, arguments);
  };
}();

methods.getReqPermissions = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (pkg, cmdOutput = null) {
    _logger.default.debug('Retrieving requested permissions');

    const stdout = cmdOutput || (yield this.shell(['dumpsys', 'package', pkg]));
    return (0, _helpers.extractMatchingPermissions)(stdout, ['requested']);
  });

  return function (_x15) {
    return _ref17.apply(this, arguments);
  };
}();

methods.getLocationProviders = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.getSetting('secure', 'location_providers_allowed');
  return stdout.trim().split(',').map(p => p.trim()).filter(Boolean);
});

methods.toggleGPSLocationProvider = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (enabled) {
    yield this.setSetting('secure', 'location_providers_allowed', `${enabled ? "+" : "-"}gps`);
  });

  return function (_x16) {
    return _ref19.apply(this, arguments);
  };
}();

methods.setHiddenApiPolicy = function () {
  var _ref20 = (0, _asyncToGenerator2.default)(function* (value) {
    yield this.setSetting('global', 'hidden_api_policy_pre_p_apps', value);
    yield this.setSetting('global', 'hidden_api_policy_p_apps', value);
  });

  return function (_x17) {
    return _ref20.apply(this, arguments);
  };
}();

methods.setDefaultHiddenApiPolicy = (0, _asyncToGenerator2.default)(function* () {
  yield this.shell(['settings', 'delete', 'global', 'hidden_api_policy_pre_p_apps']);
  yield this.shell(['settings', 'delete', 'global', 'hidden_api_policy_p_apps']);
});

methods.stopAndClear = function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (pkg) {
    try {
      yield this.forceStop(pkg);
      yield this.clear(pkg);
    } catch (e) {
      throw new Error(`Cannot stop and clear ${pkg}. Original error: ${e.message}`);
    }
  });

  return function (_x18) {
    return _ref22.apply(this, arguments);
  };
}();

methods.availableIMEs = (0, _asyncToGenerator2.default)(function* () {
  try {
    return (0, _helpers.getIMEListFromOutput)((yield this.shell(['ime', 'list', '-a'])));
  } catch (e) {
    throw new Error(`Error getting available IME's. Original error: ${e.message}`);
  }
});
methods.enabledIMEs = (0, _asyncToGenerator2.default)(function* () {
  try {
    return (0, _helpers.getIMEListFromOutput)((yield this.shell(['ime', 'list'])));
  } catch (e) {
    throw new Error(`Error getting enabled IME's. Original error: ${e.message}`);
  }
});

methods.enableIME = function () {
  var _ref25 = (0, _asyncToGenerator2.default)(function* (imeId) {
    yield this.shell(['ime', 'enable', imeId]);
  });

  return function (_x19) {
    return _ref25.apply(this, arguments);
  };
}();

methods.disableIME = function () {
  var _ref26 = (0, _asyncToGenerator2.default)(function* (imeId) {
    yield this.shell(['ime', 'disable', imeId]);
  });

  return function (_x20) {
    return _ref26.apply(this, arguments);
  };
}();

methods.setIME = function () {
  var _ref27 = (0, _asyncToGenerator2.default)(function* (imeId) {
    yield this.shell(['ime', 'set', imeId]);
  });

  return function (_x21) {
    return _ref27.apply(this, arguments);
  };
}();

methods.defaultIME = (0, _asyncToGenerator2.default)(function* () {
  try {
    let engine = yield this.getSetting('secure', 'default_input_method');
    return engine.trim();
  } catch (e) {
    throw new Error(`Error getting default IME. Original error: ${e.message}`);
  }
});

methods.keyevent = function () {
  var _ref29 = (0, _asyncToGenerator2.default)(function* (keycode) {
    let code = parseInt(keycode, 10);
    yield this.shell(['input', 'keyevent', code]);
  });

  return function (_x22) {
    return _ref29.apply(this, arguments);
  };
}();

methods.inputText = function () {
  var _ref30 = (0, _asyncToGenerator2.default)(function* (text) {
    text = text.replace(/\\/g, '\\\\').replace(/\(/g, '\(').replace(/\)/g, '\)').replace(/</g, '\<').replace(/>/g, '\>').replace(/\|/g, '\|').replace(/;/g, '\;').replace(/&/g, '\&').replace(/\*/g, '\*').replace(/~/g, '\~').replace(/"/g, '\"').replace(/'/g, "\'").replace(/ /g, '%s');
    yield this.shell(['input', 'text', text]);
  });

  return function (_x23) {
    return _ref30.apply(this, arguments);
  };
}();

methods.clearTextField = function () {
  var _ref31 = (0, _asyncToGenerator2.default)(function* (length = 100) {
    _logger.default.debug(`Clearing up to ${length} characters`);

    if (length === 0) {
      return;
    }

    let args = ['input', 'keyevent'];

    for (let i = 0; i < length; i++) {
      args.push('67', '112');
    }

    yield this.shell(args);
  });

  return function () {
    return _ref31.apply(this, arguments);
  };
}();

methods.lock = (0, _asyncToGenerator2.default)(function* () {
  var _this = this;

  if (yield this.isScreenLocked()) {
    _logger.default.debug("Screen is already locked. Doing nothing.");

    return;
  }

  _logger.default.debug("Pressing the KEYCODE_POWER button to lock screen");

  yield this.keyevent(26);
  const timeoutMs = 5000;

  try {
    yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
      return yield _this.isScreenLocked();
    }), {
      waitMs: timeoutMs,
      intervalMs: 500
    });
  } catch (e) {
    throw new Error(`The device screen is still locked after ${timeoutMs}ms timeout`);
  }
});
methods.back = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Pressing the BACK button");

  yield this.keyevent(4);
});
methods.goToHome = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Pressing the HOME button");

  yield this.keyevent(3);
});

methods.getAdbPath = function () {
  return this.executable.path;
};

methods.getScreenOrientation = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.shell(['dumpsys', 'input']);
  return (0, _helpers.getSurfaceOrientation)(stdout);
});
methods.isScreenLocked = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.shell(['dumpsys', 'window']);

  if (process.env.APPIUM_LOG_DUMPSYS) {
    let dumpsysFile = _path.default.resolve(process.cwd(), "dumpsys.log");

    _logger.default.debug(`Writing dumpsys output to ${dumpsysFile}`);

    yield _appiumSupport.fs.writeFile(dumpsysFile, stdout);
  }

  return (0, _helpers.isShowingLockscreen)(stdout) || (0, _helpers.isCurrentFocusOnKeyguard)(stdout) || !(0, _helpers.isScreenOnFully)(stdout);
});
methods.isSoftKeyboardPresent = (0, _asyncToGenerator2.default)(function* () {
  try {
    const stdout = yield this.shell(['dumpsys', 'input_method']);
    const inputShownMatch = /mInputShown=(\w+)/.exec(stdout);
    const inputViewShownMatch = /mIsInputViewShown=(\w+)/.exec(stdout);
    return {
      isKeyboardShown: !!(inputShownMatch && inputShownMatch[1] === 'true'),
      canCloseKeyboard: !!(inputViewShownMatch && inputViewShownMatch[1] === 'true')
    };
  } catch (e) {
    throw new Error(`Error finding softkeyboard. Original error: ${e.message}`);
  }
});

methods.sendTelnetCommand = function () {
  var _ref39 = (0, _asyncToGenerator2.default)(function* (command) {
    _logger.default.debug(`Sending telnet command to device: ${command}`);

    let port = yield this.getEmulatorPort();
    return yield new _bluebird.default((resolve, reject) => {
      let conn = _net.default.createConnection(port, 'localhost'),
          connected = false,
          readyRegex = /^OK$/m,
          dataStream = "",
          res = null;

      conn.on('connect', () => {
        _logger.default.debug("Socket connection to device created");
      });
      conn.on('data', data => {
        data = data.toString('utf8');

        if (!connected) {
          if (readyRegex.test(data)) {
            connected = true;

            _logger.default.debug("Socket connection to device ready");

            conn.write(`${command}\n`);
          }
        } else {
          dataStream += data;

          if (readyRegex.test(data)) {
            res = dataStream.replace(readyRegex, "").trim();
            res = _lodash.default.last(res.trim().split('\n'));

            _logger.default.debug(`Telnet command got response: ${res}`);

            conn.write("quit\n");
          }
        }
      });
      conn.on('error', err => {
        _logger.default.debug(`Telnet command error: ${err.message}`);

        reject(err);
      });
      conn.on('close', () => {
        if (res === null) {
          reject(new Error("Never got a response from command"));
        } else {
          resolve(res);
        }
      });
    });
  });

  return function (_x24) {
    return _ref39.apply(this, arguments);
  };
}();

methods.isAirplaneModeOn = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.getSetting('global', 'airplane_mode_on');
  return parseInt(stdout, 10) !== 0;
});

methods.setAirplaneMode = function () {
  var _ref41 = (0, _asyncToGenerator2.default)(function* (on) {
    yield this.setSetting('global', 'airplane_mode_on', on ? 1 : 0);
  });

  return function (_x25) {
    return _ref41.apply(this, arguments);
  };
}();

methods.broadcastAirplaneMode = function () {
  var _ref42 = (0, _asyncToGenerator2.default)(function* (on) {
    yield this.shell(['am', 'broadcast', '-a', 'android.intent.action.AIRPLANE_MODE', '--ez', 'state', on ? 'true' : 'false']);
  });

  return function (_x26) {
    return _ref42.apply(this, arguments);
  };
}();

methods.isWifiOn = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.getSetting('global', 'wifi_on');
  return parseInt(stdout, 10) !== 0;
});

methods.setWifiState = function () {
  var _ref44 = (0, _asyncToGenerator2.default)(function* (on, isEmulator = false) {
    if (isEmulator) {
      yield this.shell(['svc', 'wifi', on ? 'enable' : 'disable'], {
        privileged: true
      });
    } else {
      yield this.shell(['am', 'broadcast', '-a', WIFI_CONNECTION_SETTING_ACTION, '-n', WIFI_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
    }
  });

  return function (_x27) {
    return _ref44.apply(this, arguments);
  };
}();

methods.isDataOn = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.getSetting('global', 'mobile_data');
  return parseInt(stdout, 10) !== 0;
});

methods.setDataState = function () {
  var _ref46 = (0, _asyncToGenerator2.default)(function* (on, isEmulator = false) {
    if (isEmulator) {
      yield this.shell(['svc', 'data', on ? 'enable' : 'disable'], {
        privileged: true
      });
    } else {
      yield this.shell(['am', 'broadcast', '-a', DATA_CONNECTION_SETTING_ACTION, '-n', DATA_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
    }
  });

  return function (_x28) {
    return _ref46.apply(this, arguments);
  };
}();

methods.setWifiAndData = function () {
  var _ref47 = (0, _asyncToGenerator2.default)(function* ({
    wifi,
    data
  }, isEmulator = false) {
    if (_appiumSupport.util.hasValue(wifi)) {
      yield this.setWifiState(wifi, isEmulator);
    }

    if (_appiumSupport.util.hasValue(data)) {
      yield this.setDataState(data, isEmulator);
    }
  });

  return function (_x29) {
    return _ref47.apply(this, arguments);
  };
}();

methods.setAnimationState = function () {
  var _ref48 = (0, _asyncToGenerator2.default)(function* (on) {
    yield this.shell(['am', 'broadcast', '-a', ANIMATION_SETTING_ACTION, '-n', ANIMATION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']);
  });

  return function (_x30) {
    return _ref48.apply(this, arguments);
  };
}();

methods.isAnimationOn = (0, _asyncToGenerator2.default)(function* () {
  let animator_duration_scale = yield this.getSetting('global', 'animator_duration_scale');
  let transition_animation_scale = yield this.getSetting('global', 'transition_animation_scale');
  let window_animation_scale = yield this.getSetting('global', 'window_animation_scale');
  return _lodash.default.some([animator_duration_scale, transition_animation_scale, window_animation_scale], setting => setting !== '0.0');
});

methods.setDeviceSysLocaleViaSettingApp = function () {
  var _ref50 = (0, _asyncToGenerator2.default)(function* (language, country, script = null) {
    const params = ['am', 'broadcast', '-a', LOCALE_SETTING_ACTION, '-n', LOCALE_SETTING_RECEIVER, '--es', 'lang', language.toLowerCase(), '--es', 'country', country.toUpperCase()];

    if (script) {
      params.push('--es', 'script', script);
    }

    yield this.shell(params);
  });

  return function (_x31, _x32) {
    return _ref50.apply(this, arguments);
  };
}();

methods.setGeoLocation = function () {
  var _ref51 = (0, _asyncToGenerator2.default)(function* (location, isEmulator = false) {
    let longitude = parseFloat(location.longitude);

    if (isNaN(longitude)) {
      throw new Error(`location.longitude is expected to be a valid float number. '${location.longitude}' is given instead`);
    }

    longitude = `${_lodash.default.ceil(longitude, 5)}`;
    let latitude = parseFloat(location.latitude);

    if (isNaN(latitude)) {
      throw new Error(`location.latitude is expected to be a valid float number. '${location.latitude}' is given instead`);
    }

    latitude = `${_lodash.default.ceil(latitude, 5)}`;

    if (isEmulator) {
      yield this.resetTelnetAuthToken();
      yield this.adbExec(['emu', 'geo', 'fix', longitude, latitude]);
      yield this.adbExec(['emu', 'geo', 'fix', longitude.replace('.', ','), latitude.replace('.', ',')]);
    } else {
      return yield this.shell(['am', 'startservice', '-e', 'longitude', longitude, '-e', 'latitude', latitude, LOCATION_SERVICE]);
    }
  });

  return function (_x33) {
    return _ref51.apply(this, arguments);
  };
}();

methods.getGeoLocation = (0, _asyncToGenerator2.default)(function* () {
  let output;

  try {
    output = yield this.shell(['am', 'broadcast', '-n', LOCATION_RECEIVER, '-a', LOCATION_RETRIEVAL_ACTION]);
  } catch (err) {
    throw new Error(`Cannot retrieve the current geo coordinates from the device. ` + `Make sure the Appium Settings application is up to date and has location permissions. Also the location ` + `services must be enabled on the device. Original error: ${err.message}`);
  }

  const match = /data="(-?[\d\.]+)\s+(-?[\d\.]+)\s+(-?[\d\.]+)"/.exec(output);

  if (!match) {
    throw new Error(`Cannot parse the actual location values from the command output: ${output}`);
  }

  const location = {
    latitude: match[1],
    longitude: match[2],
    altitude: match[3]
  };

  _logger.default.debug(`Got geo coordinates: ${JSON.stringify(location)}`);

  return location;
});

methods.rimraf = function () {
  var _ref53 = (0, _asyncToGenerator2.default)(function* (path) {
    yield this.shell(['rm', '-rf', path]);
  });

  return function (_x34) {
    return _ref53.apply(this, arguments);
  };
}();

methods.push = function () {
  var _ref54 = (0, _asyncToGenerator2.default)(function* (localPath, remotePath, opts) {
    yield this.adbExec(['push', localPath, remotePath], opts);
  });

  return function (_x35, _x36, _x37) {
    return _ref54.apply(this, arguments);
  };
}();

methods.pull = function () {
  var _ref55 = (0, _asyncToGenerator2.default)(function* (remotePath, localPath) {
    yield this.adbExec(['pull', remotePath, localPath], {
      timeout: 60000
    });
  });

  return function (_x38, _x39) {
    return _ref55.apply(this, arguments);
  };
}();

methods.processExists = function () {
  var _ref56 = (0, _asyncToGenerator2.default)(function* (processName) {
    try {
      if (!this.isValidClass(processName)) {
        throw new Error(`Invalid process name: ${processName}`);
      }

      let stdout = yield this.shell("ps");
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = stdout.split(/\r?\n/)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let line = _step2.value;
          line = line.trim().split(/\s+/);
          let pkgColumn = line[line.length - 1];

          if (pkgColumn && pkgColumn.indexOf(processName) !== -1) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return false;
    } catch (e) {
      throw new Error(`Error finding if process exists. Original error: ${e.message}`);
    }
  });

  return function (_x40) {
    return _ref56.apply(this, arguments);
  };
}();

methods.getForwardList = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug(`List forwarding ports`);

  let connections = yield this.adbExec(['forward', '--list']);
  return connections.split('\n');
});

methods.forwardPort = function () {
  var _ref58 = (0, _asyncToGenerator2.default)(function* (systemPort, devicePort) {
    _logger.default.debug(`Forwarding system: ${systemPort} to device: ${devicePort}`);

    yield this.adbExec(['forward', `tcp:${systemPort}`, `tcp:${devicePort}`]);
  });

  return function (_x41, _x42) {
    return _ref58.apply(this, arguments);
  };
}();

methods.removePortForward = function () {
  var _ref59 = (0, _asyncToGenerator2.default)(function* (systemPort) {
    _logger.default.debug(`Removing forwarded port socket connection: ${systemPort} `);

    yield this.adbExec(['forward', `--remove`, `tcp:${systemPort}`]);
  });

  return function (_x43) {
    return _ref59.apply(this, arguments);
  };
}();

methods.forwardAbstractPort = function () {
  var _ref60 = (0, _asyncToGenerator2.default)(function* (systemPort, devicePort) {
    _logger.default.debug(`Forwarding system: ${systemPort} to abstract device: ${devicePort}`);

    yield this.adbExec(['forward', `tcp:${systemPort}`, `localabstract:${devicePort}`]);
  });

  return function (_x44, _x45) {
    return _ref60.apply(this, arguments);
  };
}();

methods.ping = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.shell(["echo", "ping"]);

  if (stdout.indexOf("ping") === 0) {
    return true;
  }

  throw new Error(`ADB ping failed, returned ${stdout}`);
});
methods.restart = (0, _asyncToGenerator2.default)(function* () {
  try {
    yield this.stopLogcat();
    yield this.restartAdb();
    yield this.waitForDevice(60);
    yield this.startLogcat();
  } catch (e) {
    throw new Error(`Restart failed. Orginial error: ${e.message}`);
  }
});
methods.startLogcat = (0, _asyncToGenerator2.default)(function* () {
  if (!_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Trying to start logcat capture but it's already started!");
  }

  this.logcat = new _logcat.default({
    adb: this.executable,
    debug: false,
    debugTrace: false,
    clearDeviceLogsOnStart: !!this.clearDeviceLogsOnStart
  });
  yield this.logcat.startCapture();
});
methods.stopLogcat = (0, _asyncToGenerator2.default)(function* () {
  if (_lodash.default.isEmpty(this.logcat)) {
    return;
  }

  try {
    yield this.logcat.stopCapture();
  } finally {
    this.logcat = null;
  }
});

methods.getLogcatLogs = function () {
  if (_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Can't get logcat logs since logcat hasn't started");
  }

  return this.logcat.getLogs();
};

methods.setLogcatListener = function (listener) {
  if (_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Logcat process hasn't been started");
  }

  this.logcat.on('output', listener);
};

methods.removeLogcatListener = function (listener) {
  if (_lodash.default.isEmpty(this.logcat)) {
    throw new Error("Logcat process hasn't been started");
  }

  this.logcat.removeListener('output', listener);
};

methods.getPIDsByName = function () {
  var _ref65 = (0, _asyncToGenerator2.default)(function* (name) {
    _logger.default.debug(`Getting all processes with ${name}`);

    try {
      if (name.length > 15) {
        name = name.substr(name.length - 15);
      }

      let stdout = (yield this.shell(["ps"])).trim();
      let pids = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = stdout.split("\n")[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let line = _step3.value;

          if (line.indexOf(name) !== -1) {
            let match = /[^\t ]+[\t ]+([0-9]+)/.exec(line);

            if (match) {
              pids.push(parseInt(match[1], 10));
            } else {
              throw new Error(`Could not extract PID from ps output: ${line}`);
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return pids;
    } catch (e) {
      throw new Error(`Unable to get pids for ${name}. Orginial error: ${e.message}`);
    }
  });

  return function (_x46) {
    return _ref65.apply(this, arguments);
  };
}();

methods.killProcessesByName = function () {
  var _ref66 = (0, _asyncToGenerator2.default)(function* (name) {
    try {
      _logger.default.debug(`Attempting to kill all ${name} processes`);

      let pids = yield this.getPIDsByName(name);

      if (_lodash.default.isEmpty(pids)) {
        _logger.default.info(`No '${name}' process has been found`);

        return;
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = pids[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          let pid = _step4.value;
          yield this.killProcessByPID(pid);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    } catch (e) {
      throw new Error(`Unable to kill ${name} processes. Original error: ${e.message}`);
    }
  });

  return function (_x47) {
    return _ref66.apply(this, arguments);
  };
}();

methods.killProcessByPID = function () {
  var _ref67 = (0, _asyncToGenerator2.default)(function* (pid) {
    var _this2 = this;

    _logger.default.debug(`Attempting to kill process ${pid}`);

    let wasRoot = false;
    let becameRoot = false;

    try {
      try {
        yield this.shell(['kill', '-0', pid]);
      } catch (e) {
        if (!e.message.includes('Operation not permitted')) {
          throw e;
        }

        try {
          wasRoot = yield this.isRoot();
        } catch (ign) {}

        if (wasRoot) {
          throw e;
        }

        _logger.default.info(`Cannot kill PID ${pid} due to insufficient permissions. Retrying as root`);

        try {
          becameRoot = yield this.root();
        } catch (ign) {}

        yield this.shell(['kill', '-0', pid]);
      }

      const timeoutMs = 1000;
      let stdout;

      try {
        yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
          try {
            stdout = yield _this2.shell(['kill', pid]);
            return false;
          } catch (e) {
            return true;
          }
        }), {
          waitMs: timeoutMs,
          intervalMs: 300
        });
      } catch (err) {
        _logger.default.warn(`Cannot kill process ${pid} in ${timeoutMs} ms. Trying to force kill...`);

        stdout = yield this.shell(['kill', '-9', pid]);
      }

      return stdout;
    } finally {
      if (becameRoot) {
        yield this.unroot();
      }
    }
  });

  return function (_x48) {
    return _ref67.apply(this, arguments);
  };
}();

methods.broadcastProcessEnd = function () {
  var _ref69 = (0, _asyncToGenerator2.default)(function* (intent, processName) {
    this.broadcast(intent);
    let start = Date.now();
    let timeoutMs = 40000;

    try {
      while (Date.now() - start < timeoutMs) {
        if (yield this.processExists(processName)) {
          yield (0, _asyncbox.sleep)(400);
          continue;
        }

        return;
      }

      throw new Error(`Process never died within ${timeoutMs} ms`);
    } catch (e) {
      throw new Error(`Unable to broadcast process end. Original error: ${e.message}`);
    }
  });

  return function (_x49, _x50) {
    return _ref69.apply(this, arguments);
  };
}();

methods.broadcast = function () {
  var _ref70 = (0, _asyncToGenerator2.default)(function* (intent) {
    if (!this.isValidClass(intent)) {
      throw new Error(`Invalid intent ${intent}`);
    }

    _logger.default.debug(`Broadcasting: ${intent}`);

    yield this.shell(['am', 'broadcast', '-a', intent]);
  });

  return function (_x51) {
    return _ref70.apply(this, arguments);
  };
}();

methods.endAndroidCoverage = (0, _asyncToGenerator2.default)(function* () {
  if (this.instrumentProc && this.instrumentProc.isRunning) {
    yield this.instrumentProc.stop();
  }
});

methods.instrument = function () {
  var _ref72 = (0, _asyncToGenerator2.default)(function* (pkg, activity, instrumentWith) {
    if (activity[0] !== ".") {
      pkg = "";
    }

    let pkgActivity = (pkg + activity).replace(/\.+/g, '.');
    let stdout = yield this.shell(['am', 'instrument', '-e', 'main_activity', pkgActivity, instrumentWith]);

    if (stdout.indexOf("Exception") !== -1) {
      throw new Error(`Unknown exception during instrumentation. Original error ${stdout.split("\n")[0]}`);
    }
  });

  return function (_x52, _x53, _x54) {
    return _ref72.apply(this, arguments);
  };
}();

methods.androidCoverage = function () {
  var _ref73 = (0, _asyncToGenerator2.default)(function* (instrumentClass, waitPkg, waitActivity) {
    var _this3 = this;

    if (!this.isValidClass(instrumentClass)) {
      throw new Error(`Invalid class ${instrumentClass}`);
    }

    return yield new _bluebird.default(function () {
      var _ref74 = (0, _asyncToGenerator2.default)(function* (resolve, reject) {
        let args = _this3.executable.defaultArgs.concat(['shell', 'am', 'instrument', '-e', 'coverage', 'true', '-w']).concat([instrumentClass]);

        _logger.default.debug(`Collecting coverage data with: ${[_this3.executable.path].concat(args).join(' ')}`);

        try {
          _this3.instrumentProc = new _teen_process.SubProcess(_this3.executable.path, args);
          yield _this3.instrumentProc.start(0);

          _this3.instrumentProc.on('output', (stdout, stderr) => {
            if (stderr) {
              reject(new Error(`Failed to run instrumentation. Original error: ${stderr}`));
            }
          });

          yield _this3.waitForActivity(waitPkg, waitActivity);
          resolve();
        } catch (e) {
          reject(new Error(`Android coverage failed. Original error: ${e.message}`));
        }
      });

      return function (_x58, _x59) {
        return _ref74.apply(this, arguments);
      };
    }());
  });

  return function (_x55, _x56, _x57) {
    return _ref73.apply(this, arguments);
  };
}();

methods.getDeviceProperty = function () {
  var _ref75 = (0, _asyncToGenerator2.default)(function* (property) {
    let stdout = yield this.shell(['getprop', property]);
    let val = stdout.trim();

    _logger.default.debug(`Current device property '${property}': ${val}`);

    return val;
  });

  return function (_x60) {
    return _ref75.apply(this, arguments);
  };
}();

methods.setDeviceProperty = function () {
  var _ref76 = (0, _asyncToGenerator2.default)(function* (prop, val) {
    _logger.default.debug(`Setting device property '${prop}' to '${val}'`);

    yield this.shell(['setprop', prop, val], {
      privileged: true
    });
  });

  return function (_x61, _x62) {
    return _ref76.apply(this, arguments);
  };
}();

methods.getDeviceSysLanguage = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("persist.sys.language");
});

methods.setDeviceSysLanguage = function () {
  var _ref78 = (0, _asyncToGenerator2.default)(function* (language) {
    return yield this.setDeviceProperty("persist.sys.language", language.toLowerCase());
  });

  return function (_x63) {
    return _ref78.apply(this, arguments);
  };
}();

methods.getDeviceSysCountry = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("persist.sys.country");
});

methods.setDeviceSysCountry = function () {
  var _ref80 = (0, _asyncToGenerator2.default)(function* (country) {
    return yield this.setDeviceProperty("persist.sys.country", country.toUpperCase());
  });

  return function (_x64) {
    return _ref80.apply(this, arguments);
  };
}();

methods.getDeviceSysLocale = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("persist.sys.locale");
});

methods.setDeviceSysLocale = function () {
  var _ref82 = (0, _asyncToGenerator2.default)(function* (locale) {
    return yield this.setDeviceProperty("persist.sys.locale", locale);
  });

  return function (_x65) {
    return _ref82.apply(this, arguments);
  };
}();

methods.getDeviceProductLanguage = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("ro.product.locale.language");
});
methods.getDeviceProductCountry = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("ro.product.locale.region");
});
methods.getDeviceProductLocale = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("ro.product.locale");
});
methods.getModel = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("ro.product.model");
});
methods.getManufacturer = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getDeviceProperty("ro.product.manufacturer");
});
methods.getScreenSize = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.shell(['wm', 'size']);
  let size = new RegExp(/Physical size: ([^\r?\n]+)*/g).exec(stdout);

  if (size && size.length >= 2) {
    return size[1].trim();
  }

  return null;
});
methods.getScreenDensity = (0, _asyncToGenerator2.default)(function* () {
  let stdout = yield this.shell(['wm', 'density']);
  let density = new RegExp(/Physical density: ([^\r?\n]+)*/g).exec(stdout);

  if (density && density.length >= 2) {
    let densityNumber = parseInt(density[1].trim(), 10);
    return isNaN(densityNumber) ? null : densityNumber;
  }

  return null;
});

methods.setHttpProxy = function () {
  var _ref90 = (0, _asyncToGenerator2.default)(function* (proxyHost, proxyPort) {
    let proxy = `${proxyHost}:${proxyPort}`;

    if (_lodash.default.isUndefined(proxyHost)) {
      throw new Error(`Call to setHttpProxy method with undefined proxy_host: ${proxy}`);
    }

    if (_lodash.default.isUndefined(proxyPort)) {
      throw new Error(`Call to setHttpProxy method with undefined proxy_port ${proxy}`);
    }

    yield this.setSetting('global', 'http_proxy', proxy);
    yield this.setSetting('secure', 'http_proxy', proxy);
    yield this.setSetting('system', 'http_proxy', proxy);
    yield this.setSetting('system', 'global_http_proxy_host', proxyHost);
    yield this.setSetting('system', 'global_http_proxy_port', proxyPort);
  });

  return function (_x66, _x67) {
    return _ref90.apply(this, arguments);
  };
}();

methods.setSetting = function () {
  var _ref91 = (0, _asyncToGenerator2.default)(function* (namespace, setting, value) {
    return yield this.shell(['settings', 'put', namespace, setting, value]);
  });

  return function (_x68, _x69, _x70) {
    return _ref91.apply(this, arguments);
  };
}();

methods.getSetting = function () {
  var _ref92 = (0, _asyncToGenerator2.default)(function* (namespace, setting) {
    return yield this.shell(['settings', 'get', namespace, setting]);
  });

  return function (_x71, _x72) {
    return _ref92.apply(this, arguments);
  };
}();

methods.bugreport = function () {
  var _ref93 = (0, _asyncToGenerator2.default)(function* (timeout = 120000) {
    return yield this.adbExec(['bugreport'], {
      timeout
    });
  });

  return function () {
    return _ref93.apply(this, arguments);
  };
}();

methods.screenrecord = function (destination, options = {}) {
  const cmd = ['screenrecord'];
  const videoSize = options.videoSize,
        bitRate = options.bitRate,
        timeLimit = options.timeLimit,
        bugReport = options.bugReport;

  if (_appiumSupport.util.hasValue(videoSize)) {
    cmd.push('--size', videoSize);
  }

  if (_appiumSupport.util.hasValue(timeLimit)) {
    cmd.push('--time-limit', timeLimit);
  }

  if (_appiumSupport.util.hasValue(bitRate)) {
    cmd.push('--bit-rate', bitRate);
  }

  if (bugReport) {
    cmd.push('--bugreport');
  }

  cmd.push(destination);
  const fullCmd = [...this.executable.defaultArgs, 'shell', ...cmd];

  _logger.default.debug(`Building screenrecord process with the command line: adb ${(0, _shellQuote.quote)(fullCmd)}`);

  return new _teen_process.SubProcess(this.executable.path, fullCmd);
};

methods.performEditorAction = function () {
  var _ref94 = (0, _asyncToGenerator2.default)(function* (action) {
    _logger.default.debug(`Performing editor action: ${action}`);

    const defaultIME = yield this.defaultIME();
    yield this.enableIME(APPIUM_IME);

    try {
      yield this.setIME(APPIUM_IME);
      yield this.shell(['input', 'text', `/${action}/`]);
    } finally {
      yield this.setIME(defaultIME);
    }
  });

  return function (_x73) {
    return _ref94.apply(this, arguments);
  };
}();

var _default = methods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
